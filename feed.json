{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hoanh An",
    "home_page_url": "/",
    "feed_url": "/feed.json",
    "description": "Hoanh An's personal website",
    "icon": "/apple-touch-icon.png",
    "favicon": "/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Hoanh An",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "/2020/01/06/101-challenges",
            "title": "101+ Coding Interview Problems with Detailed Solutions, Test Cases, and Program Analysis",
            "summary": null,
            "content_text": "Hi friends,4 months ago, I made a redditposton creating a newsletter that sends out 3-6 coding interview problems with detailssolutions every week. To my surprise, the post received a lot of attention andpositive feedback from the community.Since the total number of problems and solutions has just passed 101, I wouldlike to say another big thank you all again for all the support. It reallyhelps me keep going.Moving on, I am hoping to add more questions and then finally condense them into a list ofmost frequently appeared coding interview problems that I think are the mostvaluable and productive to spend time on. Again, my goal has always been tohelp you get good at algorithms and data structures so that you can prepare betterfor your next coding interviews.For those who don’t know, here is the link to all 101+ questions and solutions, sorted byresources →If you’re interested in getting updates for this, feel free to join my maillist here →Best,Hoanh",
            "content_html": "<p>Hi friends,</p><p>4 months ago, I made a <a href=\"https://www.reddit.com/r/learnprogramming/comments/ctyvbc/is_anyone_interested_in_weekly_coding_interview/\">redditpost</a>on creating a newsletter that sends out 3-6 coding interview problems with detailssolutions every week. To my surprise, the post received a lot of attention andpositive feedback from the community.</p><p><strong>Since the total number of problems and solutions has just passed 101, I wouldlike to say another big thank you all again for all the support. It reallyhelps me keep going.</strong></p><p>Moving on, I am hoping to add more questions and then finally condense them into a list ofmost frequently appeared coding interview problems that I think are the mostvaluable and productive to spend time on. Again, my goal has always been tohelp you get good at algorithms and data structures so that you can prepare betterfor your next coding interviews.</p><p>For those who don’t know, <a href=\"https://github.com/hoanhan101/algo\">here is the link to all 101+ questions and solutions, sorted byresources →</a></p><p>If you’re interested in getting updates for this, feel free to join my <a href=\"https://tinyletter.com/hoanhan\">maillist here →</a></p><p>Best,</p><p>Hoanh</p>",
            "url": "/2020/01/06/101-challenges",
            
            
            
            "tags": ["interviewcake","grokking-the-coding-interview","leetcode","cracking-the-coding-interviews","algorithm"],
            
            "date_published": "2020-01-06T00:00:00-05:00",
            "date_modified": "2020-01-06T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/12/24/gtci-tree-bfs",
            "title": "Grokking the Coding Interview's Tree Breath First Search",
            "summary": null,
            "content_text": "1. Given a binary tree, populate the values of all nodes of each level from left to right in separate sub-arrays.Example:- Input:      1\t2   3  4       5  Output: []interface{}{[]interface{}{1}, []interface{}{2, 3}, []interface{}{4, 5}}Approach:- Start by pushing the root node to the queue.- Keep iterating until the queue is empty.- At each step,  - send the front of the queue and dequeue it  - enqueue its left and right childCost:- O(n) time, O(n) space.Link to solution →2. Given a binary tree, populate the values of all nodes of each level in reverse order in separate sub-arrays.Example:- Input:      1\t2   3  4       5  Output: []interface{}{[]interface{}{4, 5}, []interface{}{2, 3}, []interface{}{1}}Approach:- Similar to level order reversal problem, except we append the current level's  value at the beginning of the output list.Cost:- O(n) time, O(n) space.Link to solution →3. Given a binary tree, populate the values of all nodes of each level in a zigzag order in separate sub-arrays.Example:- Input:      1\t2   3  4       5  Output: [][]interface{}{[]interface{}{1}, []interface{}{3, 2}, []interface{}{4, 5}}Approach:- Start by pushing the root node to a queue.- Keep iterating until the queue is empty.- At each step,  - use a linked list to push front or back depending on the zigzag direction  - enqueue its left and right childCost:- O(n) time, O(n) space.Link to solution →4. Given a binary tree, populate an array to represent the averages of all of its levels.Example:- Input:      1\t2   3  4       5  Output: []float64{1, 2.5, 4.5}Approach:- Similar to level order traversal problem, except we keep track of the sum  at each level and return the average in the end.Cost:- O(n) time, O(n) space.Link to solution →5. Given a binary tree, find the minimum depth, aka the number of nodes along the shortest path from the root node to the nearest leaf node.Example:- Input:      1\t2   3  4       5        6   7      8  Output: 3Approach:- Similar to level order traversal problem, except we keep track of the minimum  depth at each level- Return it immediately once we find the leaf node.Cost:- O(n) time, O(n) space.Link to solution →6. Given a binary tree, find the maximum depth.Example:- Input:      1\t2   3  4       5        6   7      8  Output: 5Approach:- Similar to minimum depth problem, we will keep traversing for all  levels, incrementing our maximum depth instead of returning as  soon as we find a leaf node.Cost:- O(n) time, O(n) space.Link to solution →7. Given a binary tree and a node, find the level order successor of the given node. The level order successor is the node that appears right after the given node in the level order traversal.Example:- Input: target=6, tree=      1\t2   3  4       5        6   7      8  Output: 6Approach:- Similar to level order traversal problem, except we will not keep  track of all the levels.- Instead, we keep inserting the child node to the queue and return  the next node as soon as we find the target.Cost:- O(n) time, O(n) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-binary-tree-populate-the-values-of-all-nodes-of-each-level-from-left-to-right-in-separate-sub-arrays\">1. Given a binary tree, populate the values of all nodes of each level from left to right in separate sub-arrays.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5  Output: []interface{}{[]interface{}{1}, []interface{}{2, 3}, []interface{}{4, 5}}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Start by pushing the root node to the queue.- Keep iterating until the queue is empty.- At each step,  - send the front of the queue and dequeue it  - enqueue its left and right child</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/level_order_traversal_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-binary-tree-populate-the-values-of-all-nodes-of-each-level-in-reverse-order-in-separate-sub-arrays\">2. Given a binary tree, populate the values of all nodes of each level in reverse order in separate sub-arrays.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5  Output: []interface{}{[]interface{}{4, 5}, []interface{}{2, 3}, []interface{}{1}}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to level order reversal problem, except we append the current level's  value at the beginning of the output list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/reverse_level_order_traversal_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-binary-tree-populate-the-values-of-all-nodes-of-each-level-in-a-zigzag-order-in-separate-sub-arrays\">3. Given a binary tree, populate the values of all nodes of each level in a zigzag order in separate sub-arrays.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5  Output: [][]interface{}{[]interface{}{1}, []interface{}{3, 2}, []interface{}{4, 5}}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Start by pushing the root node to a queue.- Keep iterating until the queue is empty.- At each step,  - use a linked list to push front or back depending on the zigzag direction  - enqueue its left and right child</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/zigzag_traversal_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-binary-tree-populate-an-array-to-represent-the-averages-of-all-of-its-levels\">4. Given a binary tree, populate an array to represent the averages of all of its levels.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5  Output: []float64{1, 2.5, 4.5}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to level order traversal problem, except we keep track of the sum  at each level and return the average in the end.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/level_avg_test.go\">Link to solution →</a></p><h3 id=\"5-given-a-binary-tree-find-the-minimum-depth-aka-the-number-of-nodes-along-the-shortest-path-from-the-root-node-to-the-nearest-leaf-node\">5. Given a binary tree, find the minimum depth, aka the number of nodes along the shortest path from the root node to the nearest leaf node.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5        6   7      8  Output: 3</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to level order traversal problem, except we keep track of the minimum  depth at each level- Return it immediately once we find the leaf node.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/min_depth_test.go\">Link to solution →</a></p><h3 id=\"6-given-a-binary-tree-find-the-maximum-depth\">6. Given a binary tree, find the maximum depth.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5        6   7      8  Output: 5</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to minimum depth problem, we will keep traversing for all  levels, incrementing our maximum depth instead of returning as  soon as we find a leaf node.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/max_depth_test.go\">Link to solution →</a></p><h3 id=\"7-given-a-binary-tree-and-a-node-find-the-level-order-successor-of-the-given-node-the-level-order-successor-is-the-node-that-appears-right-after-the-given-node-in-the-level-order-traversal\">7. Given a binary tree and a node, find the level order successor of the given node. The level order successor is the node that appears right after the given node in the level order traversal.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: target=6, tree=      1\t2   3  4       5        6   7      8  Output: 6</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to level order traversal problem, except we will not keep  track of all the levels.- Instead, we keep inserting the child node to the queue and return  the next node as soon as we find the target.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/level_order_successor_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/12/24/gtci-tree-bfs",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-24T00:00:00-05:00",
            "date_modified": "2019-12-24T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/12/22/gtci-cyclic-sort",
            "title": "Grokking the Coding Interview's Cyclic Sort",
            "summary": null,
            "content_text": "1. Cyclic sortGiven an array containing n objects where each object, when created,was assigned a unique number from 1 to n based on their creation sequence.This means that the object with sequence number 3 was created just beforethe object with sequence number 4.Write a function to sort the objects in-place on their creation sequencenumber in O(n) and without any extra space.Example:- Input: []int{6, 3, 5, 2, 4, 1}  Output: []int{1, 2, 3, 4, 5, 6}Approach:- Use the fact that we are given a range of 1-n, can try placing each number at  its correct index in the array, say 1 at 0, 2 at 1, 3 at 2 and so on.- Iterate through the array and if the current number is not at the correct index,  swap it with the number at its correct index.Cost:- O(n) time, O(1) space.Link to solution →2. Given an array containing n numbers taken from the range 1 to n. It can have duplicates. Find all those missing numbers.Example:- Input: []int{2, 3, 1, 8, 2, 3, 5, 1}  Output: []int{4, 6, 7}Approach:- Similar to missing number problem, can rearrange the array using cyclic  sort.- Those that do not have the correct indices are the missing ones.Cost:- O(n) time and O(1) space.Link to solution →3. Given an array containing n distinct numbers taken from the range 0 to n. Since the array has only n numbers out of the total n+1 numbers, find the missing number.Example:- Input: []int{4, 0, 3, 1}  Output: 2Approach:- Sort the array using the cyclic sort first.- The one that does not have the correct index is the missing one.Cost:- O(n) time, O(1) space.Link to solution →4. Given an array containing n+1 numbers taken from the range 1 to n. It has only one duplicate number but can be repeated over time. Find that one.Example:- Input: []int{1, 4, 4, 3, 2}  Output: 4Approach:- Similar to missing number problem, can place each number on its correct  index.- If while swapping the number with its index both the numbers being swapped  are same, we have found the duplicate.Cost:- O(n) time, O(1) space.Link to solution →5. Given an array containing n numbers taken from the range 1 to n. It can have some duplicates. Find all those numbers.Example:- Input: []int{5, 4, 7, 2, 3, 5, 3}  Output: []int{3, 5}Approach:- Similar to missing number problem, can rearrange the array using cyclic  sort.- Those that do not have the correct indices are the duplicate ones.Cost:- O(n) time, O(1) space.Link to solution →6. Given an array containing n+1 numbers taken from the range 1 to n. One of the numbers got duplicated which also resulted in one number going missing. Find these numbers.Example:- Input: []int{3, 1, 2, 5, 2}  Output: []int{2, 4}Approach:- Similar to finding duplicates problem, can place each number on its correct  index.- The one is not at its correct index is the duplicate and its index itself  is the missing number.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-cyclic-sort\">1. Cyclic sort</h3><p>Given an array containing n objects where each object, when created,was assigned a unique number from 1 to n based on their creation sequence.This means that the object with sequence number 3 was created just beforethe object with sequence number 4.</p><p>Write a function to sort the objects in-place on their creation sequencenumber in O(n) and without any extra space.</p><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{6, 3, 5, 2, 4, 1}  Output: []int{1, 2, 3, 4, 5, 6}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use the fact that we are given a range of 1-n, can try placing each number at  its correct index in the array, say 1 at 0, 2 at 1, 3 at 2 and so on.- Iterate through the array and if the current number is not at the correct index,  swap it with the number at its correct index.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/cyclic_sort_test.go\">Link to solution →</a></p><h3 id=\"2-given-an-array-containing-n-numbers-taken-from-the-range-1-to-n-it-can-have-duplicates-find-all-those-missing-numbers\">2. Given an array containing n numbers taken from the range 1 to n. It can have duplicates. Find all those missing numbers.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{2, 3, 1, 8, 2, 3, 5, 1}  Output: []int{4, 6, 7}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to missing number problem, can rearrange the array using cyclic  sort.- Those that do not have the correct indices are the missing ones.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/missing_number_test.go\">Link to solution →</a></p><h3 id=\"3-given-an-array-containing-n-distinct-numbers-taken-from-the-range-0-to-n-since-the-array-has-only-n-numbers-out-of-the-total-n1-numbers-find-the-missing-number\">3. Given an array containing n distinct numbers taken from the range 0 to n. Since the array has only n numbers out of the total n+1 numbers, find the missing number.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{4, 0, 3, 1}  Output: 2</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Sort the array using the cyclic sort first.- The one that does not have the correct index is the missing one.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/missing_numbers_test.go\">Link to solution →</a></p><h3 id=\"4-given-an-array-containing-n1-numbers-taken-from-the-range-1-to-n-it-has-only-one-duplicate-number-but-can-be-repeated-over-time-find-that-one\">4. Given an array containing n+1 numbers taken from the range 1 to n. It has only one duplicate number but can be repeated over time. Find that one.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 4, 4, 3, 2}  Output: 4</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to missing number problem, can place each number on its correct  index.- If while swapping the number with its index both the numbers being swapped  are same, we have found the duplicate.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/duplicate_test.go\">Link to solution →</a></p><h3 id=\"5-given-an-array-containing-n-numbers-taken-from-the-range-1-to-n-it-can-have-some-duplicates-find-all-those-numbers\">5. Given an array containing n numbers taken from the range 1 to n. It can have some duplicates. Find all those numbers.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{5, 4, 7, 2, 3, 5, 3}  Output: []int{3, 5}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to missing number problem, can rearrange the array using cyclic  sort.- Those that do not have the correct indices are the duplicate ones.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/duplicates_test.go\">Link to solution →</a></p><h3 id=\"6-given-an-array-containing-n1-numbers-taken-from-the-range-1-to-n-one-of-the-numbers-got-duplicated-which-also-resulted-in-one-number-going-missing-find-these-numbers\">6. Given an array containing n+1 numbers taken from the range 1 to n. One of the numbers got duplicated which also resulted in one number going missing. Find these numbers.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{3, 1, 2, 5, 2}  Output: []int{2, 4}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to finding duplicates problem, can place each number on its correct  index.- The one is not at its correct index is the duplicate and its index itself  is the missing number.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/corrupt_pair_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/12/22/gtci-cyclic-sort",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-22T00:00:00-05:00",
            "date_modified": "2019-12-22T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/12/20/gtci-merge-intervals",
            "title": "Grokking the Coding Interview's Merge Intervals",
            "summary": null,
            "content_text": "1. Given a list of intervals, merge all the overlapping intervals to produce a list that has only mutually exclusive intervals.Example:- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }  Output: []interval{ {1, 3}, {4, 5} }- Input: []interval{ {1, 5}, {2, 3} }  Output: []interval{ {1, 5} }Approach:- Sort the list in ascending order so that intervals that might need to be  merged are next to each other.- Can merge two intervals together if the first one's end time is greater or  or equal than the second one's start time.Cost:- O(nlogn) time, O(n) space.- Because we sort all intervals first, the runtime is O(nlogn). We create a new  list of merged interval times, so the space cost is O(n).Link to solution →2. Given a list of non-overlapping intervals sorted by their start time, insert a given interval at the correct position and merge all necessary intervals to produce a list that has only mutually exclusive intervals.Example:- Input: []interval{ {1, 3}, {5, 7}, {8, 12} }, interval{4, 6}  Output: []interval{ {1, 3}, {4, 7}, {8, 12} }Approach:- Since the list is sorted, can skip all the intervals where their end time is  less than the new interval's start time.- The merging process is similar to the one in merge interval problem.Cost:- O(n) time, O(n) space.Link to solution →3. Given two sorted lists of intervals, find the intersection between them.Example:- Input: []interval{ {1, 3}, {5, 6}, {7, 9} }, []interval{ {2, 3}, {5, 7} }  Output: []interval{ {2, 3}, {5, 6}, {7, 7} }Approach:- Iterate through both list at the same time and check if two intervals  are overlapping at each step.- Opposite to the merging process, an overlapped interval has:  - a bigger start between the two intervals  - a smaller end between the two intervalsCost:- O(n) time, O(n) space.Link to solution →4. Given a list of intervals, check if any of them is conflicting.Example:- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }  Output: false- Input: []interval{ {1, 5}, {2, 3} }  Output: trueApproach:- Similar to merge intervals problem, need to return the true  immediately if any of them is conflicting.Cost:- O(nlogn) time, O(n) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-list-of-intervals-merge-all-the-overlapping-intervals-to-produce-a-list-that-has-only-mutually-exclusive-intervals\">1. Given a list of intervals, merge all the overlapping intervals to produce a list that has only mutually exclusive intervals.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }  Output: []interval{ {1, 3}, {4, 5} }- Input: []interval{ {1, 5}, {2, 3} }  Output: []interval{ {1, 5} }</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Sort the list in ascending order so that intervals that might need to be  merged are next to each other.- Can merge two intervals together if the first one's end time is greater or  or equal than the second one's start time.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(nlogn) time, O(n) space.- Because we sort all intervals first, the runtime is O(nlogn). We create a new  list of merged interval times, so the space cost is O(n).</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/merge_intervals_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-list-of-non-overlapping-intervals-sorted-by-their-start-time-insert-a-given-interval-at-the-correct-position-and-merge-all-necessary-intervals-to-produce-a-list-that-has-only-mutually-exclusive-intervals\">2. Given a list of non-overlapping intervals sorted by their start time, insert a given interval at the correct position and merge all necessary intervals to produce a list that has only mutually exclusive intervals.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []interval{ {1, 3}, {5, 7}, {8, 12} }, interval{4, 6}  Output: []interval{ {1, 3}, {4, 7}, {8, 12} }</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Since the list is sorted, can skip all the intervals where their end time is  less than the new interval's start time.- The merging process is similar to the one in merge interval problem.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/insert_interval_test.go\">Link to solution →</a></p><h3 id=\"3-given-two-sorted-lists-of-intervals-find-the-intersection-between-them\">3. Given two sorted lists of intervals, find the intersection between them.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []interval{ {1, 3}, {5, 6}, {7, 9} }, []interval{ {2, 3}, {5, 7} }  Output: []interval{ {2, 3}, {5, 6}, {7, 7} }</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through both list at the same time and check if two intervals  are overlapping at each step.- Opposite to the merging process, an overlapped interval has:  - a bigger start between the two intervals  - a smaller end between the two intervals</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/intervals_intersection_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-list-of-intervals-check-if-any-of-them-is-conflicting\">4. Given a list of intervals, check if any of them is conflicting.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }  Output: false- Input: []interval{ {1, 5}, {2, 3} }  Output: true</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to merge intervals problem, need to return the true  immediately if any of them is conflicting.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(nlogn) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/conflict_appointment_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/12/20/gtci-merge-intervals",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-20T00:00:00-05:00",
            "date_modified": "2019-12-20T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/12/18/gtci-fast-slow-pointers",
            "title": "Grokking the Coding Interview's Fast and Slow Pointers",
            "summary": null,
            "content_text": "1. Given the head of a singly linked list, write a function to determine if it contains a cycle.Approach:- Have a slow pointer move one step at a time while the fast one move  2 steps at a time.- If the linked list has a cycle, the fast pointer will catch the slow one.Cost:- O(n) time, O(1) space.Link to solution →2. Given the head of a singly linked list, write a function to find the starting node of the cycle.Approach:- Similar to finding a cycle in a linked list problem, can also determine  the start of its cycle and calculate length k of the cycle.- Have one pointer at the beginning and one at kth node of the linked list.- Move both of them until they meet at the start.of the cycle.Cost:- O(n) time and O(1) space.Link to solution →3. Write an algorithm to determine if a number is happy.Any number will be called a happy number if, after repeatedly replacingit with a number equal to the sum of the square of all of its digits,leads us to 1.Example:- Input: 19  Output: true  Explanation:\t  1^2 + 9^2 = 82\t  8^2 + 2^2 = 68\t  6^2 + 8^2 = 100\t  1^2 + 0^2 + 0^2 = 1Approach:- Since the process always end in a cycle, we can use a similar approach to  finding a cycle in linked list problem.- Once is cycle is found, check if it is stuck on 1.Cost:- O(n) time, O(1) space.Link to solution →4. Given the head of a singly linked list, write a function to return the middle value.Approach:- Have a slow pointer move one step at a time while the fast one move  2 steps at a time.- Once the fast one reaches the end, the slow is in the middle.Cost:- O(n) time, O(1) space.Link to solution →5. Given the head of a singly linked list, write a function to determine if it is a palindrome in constant space.Approach:- Find the middle of the linked list and reverse a half list- After comparing the first half with the reversed half to check if it's  a palindrome, revert to the half to original form.Cost:- O(n) time, O(1) space.Link to solution →6. Given the head of a singly linked list, write a function to reorder it such that nodes from the second half are inserted alternately to the nodes from the first half in reverse order.Approach:- Similar to palindrome linked list problem, can also use a trick to  reverse the second half and rearrange them in the required order  using fast and slow pointers.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-the-head-of-a-singly-linked-list-write-a-function-to-determine-if-it-contains-a-cycle\">1. Given the head of a singly linked list, write a function to determine if it contains a cycle.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have a slow pointer move one step at a time while the fast one move  2 steps at a time.- If the linked list has a cycle, the fast pointer will catch the slow one.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/linked_list_cycle_test.go\">Link to solution →</a></p><h3 id=\"2-given-the-head-of-a-singly-linked-list-write-a-function-to-find-the-starting-node-of-the-cycle\">2. Given the head of a singly linked list, write a function to find the starting node of the cycle.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to finding a cycle in a linked list problem, can also determine  the start of its cycle and calculate length k of the cycle.- Have one pointer at the beginning and one at kth node of the linked list.- Move both of them until they meet at the start.of the cycle.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/cycle_start_test.go\">Link to solution →</a></p><h3 id=\"3-write-an-algorithm-to-determine-if-a-number-is-happy\">3. Write an algorithm to determine if a number is happy.</h3><p>Any number will be called a happy number if, after repeatedly replacingit with a number equal to the sum of the square of all of its digits,leads us to 1.</p><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: 19  Output: true  Explanation:\t  1^2 + 9^2 = 82\t  8^2 + 2^2 = 68\t  6^2 + 8^2 = 100\t  1^2 + 0^2 + 0^2 = 1</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Since the process always end in a cycle, we can use a similar approach to  finding a cycle in linked list problem.- Once is cycle is found, check if it is stuck on 1.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/happy_number_test.go\">Link to solution →</a></p><h3 id=\"4-given-the-head-of-a-singly-linked-list-write-a-function-to-return-the-middle-value\">4. Given the head of a singly linked list, write a function to return the middle value.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have a slow pointer move one step at a time while the fast one move  2 steps at a time.- Once the fast one reaches the end, the slow is in the middle.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/middle_list_test.go\">Link to solution →</a></p><h3 id=\"5-given-the-head-of-a-singly-linked-list-write-a-function-to-determine-if-it-is-a-palindrome-in-constant-space\">5. Given the head of a singly linked list, write a function to determine if it is a palindrome in constant space.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Find the middle of the linked list and reverse a half list- After comparing the first half with the reversed half to check if it's  a palindrome, revert to the half to original form.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/palindrome_list_test.go\">Link to solution →</a></p><h3 id=\"6-given-the-head-of-a-singly-linked-list-write-a-function-to-reorder-it-such-that-nodes-from-the-second-half-are-inserted-alternately-to-the-nodes-from-the-first-half-in-reverse-order\">6. Given the head of a singly linked list, write a function to reorder it such that nodes from the second half are inserted alternately to the nodes from the first half in reverse order.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to palindrome linked list problem, can also use a trick to  reverse the second half and rearrange them in the required order  using fast and slow pointers.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/reorder_list_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/12/18/gtci-fast-slow-pointers",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-18T00:00:00-05:00",
            "date_modified": "2019-12-18T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/12/16/gtci-two-pointers",
            "title": "Grokking the Coding Interview's Two Pointers",
            "summary": null,
            "content_text": "1. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.Example:- Input: []int{1, 2, 6, 8, 16, 26}, target=14  Output: []int{2, 3}  Explanation: 6 (index 2) + 8 (index 3) = 14Approach:- Have one pointer start at the beginning and one at the end of the array.- At each step, see if the two pointers add up to the target sum and move  them toward each other accordingly.Cost:- O(n) time, O(n) space.Link to solution →2. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.Example:- Input: []int{1, 2, 6, 8, 16, 26}, target=14  Output: []int{2, 3}  Explanation: 6 (index 2) + 8 (index 3) = 14Approach:- Have one pointer iterate the array and one placing non-duplicate number.Cost:- O(n) time, O(1) space.Link to solution →3. Given a sorted array, create a new array containing squares of all the number of the input array in the sorted order.Assumption:- The input can have negative numbers.Example:- Input: []int{-2, -1, 0, 1, 2}  Output: []int{0, 1, 1, 4, 4}Approach:- The difficult part is to generate the output array with squares in sorted order because we have negative numbers and their squares are positive.- Have one pointer start at the beginning and one at the end and let them  move toward each other.- At each step, whichever bigger will be added to the output array, from  right to left.Cost:- O(n) time, O(n) space.Link to solution →4. Given an array containing 0s, 1s and 2s, sort the array in-place.Example:- Input: []int{1, 0, 2, 1, 0}  Output: []int{0, 0, 1, 1, 2}Approach:- Have one pointer start at the beginning and the other at the end  while iterating through the array.- We will move all 0s before that start pointer and 2s after the end  pointer so that all 1s would be between in the end.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-an-array-of-sorted-numbers-and-a-target-sum-find-a-pair-in-the-array-whose-sum-is-equal-to-the-given-target\">1. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 2, 6, 8, 16, 26}, target=14  Output: []int{2, 3}  Explanation: 6 (index 2) + 8 (index 3) = 14</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have one pointer start at the beginning and one at the end of the array.- At each step, see if the two pointers add up to the target sum and move  them toward each other accordingly.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/pair_target_sum_test.go\">Link to solution →</a></p><h3 id=\"2-given-an-array-of-sorted-numbers-and-a-target-sum-find-a-pair-in-the-array-whose-sum-is-equal-to-the-given-target\">2. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 2, 6, 8, 16, 26}, target=14  Output: []int{2, 3}  Explanation: 6 (index 2) + 8 (index 3) = 14</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have one pointer iterate the array and one placing non-duplicate number.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/remove_duplicates_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-sorted-array-create-a-new-array-containing-squares-of-all-the-number-of-the-input-array-in-the-sorted-order\">3. Given a sorted array, create a new array containing squares of all the number of the input array in the sorted order.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The input can have negative numbers.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{-2, -1, 0, 1, 2}  Output: []int{0, 1, 1, 4, 4}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The difficult part is to generate the output array with squares in sorted order because we have negative numbers and their squares are positive.- Have one pointer start at the beginning and one at the end and let them  move toward each other.- At each step, whichever bigger will be added to the output array, from  right to left.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/square_sorted_array_test.go\">Link to solution →</a></p><h3 id=\"4-given-an-array-containing-0s-1s-and-2s-sort-the-array-in-place\">4. Given an array containing 0s, 1s and 2s, sort the array in-place.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 0, 2, 1, 0}  Output: []int{0, 0, 1, 1, 2}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have one pointer start at the beginning and the other at the end  while iterating through the array.- We will move all 0s before that start pointer and 2s after the end  pointer so that all 1s would be between in the end.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/dutch_flag_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/12/16/gtci-two-pointers",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-16T00:00:00-05:00",
            "date_modified": "2019-12-16T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/12/15/gtci-sliding-window",
            "title": "Grokking the Coding Interview's Sliding Window",
            "summary": null,
            "content_text": "1. Given an array, find the average of all contiguous subarrays of size k.Example:- Input: []int{1, 3, 2, 6, -1, 4, 1, 8, 2}, k=5  Output: []int{2.2, 2.8, 2.4, 3.6, 2.8}Approach:- View each contiguous subarray as a sliding window of k elements.- As we move to the next subarray, slide the window by one element to  reuse the sum from previous array.Cost:- O(n) time, O(k) space.Link to solution →2. Given an array of positive numbers and a positive number k, find the maximum sum of any contiguous subarray of size k.Example:- Input: int{2, 1, 5, 1, 3, 2}, k=3  Output: 9  Explanation: Subarray with maximum sum is [5, 1, 3].Approach:- View each contiguous subarray as a sliding window of k elements.- As we move to the next subarray, slide the window by one element to  reuse the sum from previous array and update the maximum sum.Cost:- O(n) time and O(1) space.Link to solution →3. Given an array of positive numbers and a positive number s, find the length of the smallest contiguous subarray whose sum is greater than or equal to s.Example:- Input: array=int{2, 1, 5, 2, 3, 2}, s=7  Output: 2  Explanation: Smallest subarray with a sum great than or equal to 7 is [5, 2]  with length=2.Approach:- The difference between the previous problem and this one is that the size of  the sliding window is not fixed.- Can still use the similar strategy to add up elements until their sum is greater  than equal to s and view them as our sliding window.- Shrink the window until the window's sum is smaller than s again while keep  updating the minimum length.Cost:- O(n) time, O(1) space.Link to solution →4. Given a string, find the length of the longest substring in it with no more than k distinct characters.Example:- Input: string=\"araaci\", k=1  Output: 2  Explanation: Longest substring with no more than 1 distinct characters is \"aa\".- Input: string=\"araaci\", k=2  Output: 4  Explanation: Longest substring with no more than 2 distinct characters is \"araa\".- Input: string=\"araaci\", k=3  Output: 5  Explanation: Longest substring with no more than 3 distinct characters is \"araac\".Approach:- Use a hashmap to remember the frequency of each character we have seen.- Insert characters until we have k distinct characters in the map to be consider a  window.- Shrink the window until there is no more k distinct characters in the map and keep  updating the maximum window length at each step.Cost:- O(n) time, O(k) space where k is the number of characters in the map.Link to solution →5. Given an array of characters where each character represents a fruit tree, you are given two baskets and your goal is to put maximum number of fruits in each basket.Constraints:- Each basket can have only one type of fruit.- You can start with any tree, but once you have started you can’t skip a tree.  You will pick one fruit from each tree until you cannot, i.e., you will stop  when you have to pick from a third fruit type.Example:- Input: fruits=[\"apple\", \"orange\", \"coconut\", \"apple\", \"coconut\"]  Output: 3  Explanation: Can put 2 \"cocunut\" in 1 basket and 1 \"apple\" in other from  subarray [\"coconut\", \"apple\", \"coconut\"]Approach:- Similar to \"longest substring with k distinct characters\" with k=2.Cost:- O(n) time, O(k) space where k is the number of characters in the map.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-an-array-find-the-average-of-all-contiguous-subarrays-of-size-k\">1. Given an array, find the average of all contiguous subarrays of size k.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 3, 2, 6, -1, 4, 1, 8, 2}, k=5  Output: []int{2.2, 2.8, 2.4, 3.6, 2.8}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- View each contiguous subarray as a sliding window of k elements.- As we move to the next subarray, slide the window by one element to  reuse the sum from previous array.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(k) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/avg_subarray_test.go\">Link to solution →</a></p><h3 id=\"2-given-an-array-of-positive-numbers-and-a-positive-number-k-find-the-maximum-sum-of-any-contiguous-subarray-of-size-k\">2. Given an array of positive numbers and a positive number k, find the maximum sum of any contiguous subarray of size k.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: int{2, 1, 5, 1, 3, 2}, k=3  Output: 9  Explanation: Subarray with maximum sum is [5, 1, 3].</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- View each contiguous subarray as a sliding window of k elements.- As we move to the next subarray, slide the window by one element to  reuse the sum from previous array and update the maximum sum.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/max_subarray_test.go\">Link to solution →</a></p><h3 id=\"3-given-an-array-of-positive-numbers-and-a-positive-number-s-find-the-length-of-the-smallest-contiguous-subarray-whose-sum-is-greater-than-or-equal-to-s\">3. Given an array of positive numbers and a positive number s, find the length of the smallest contiguous subarray whose sum is greater than or equal to s.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: array=int{2, 1, 5, 2, 3, 2}, s=7  Output: 2  Explanation: Smallest subarray with a sum great than or equal to 7 is [5, 2]  with length=2.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The difference between the previous problem and this one is that the size of  the sliding window is not fixed.- Can still use the similar strategy to add up elements until their sum is greater  than equal to s and view them as our sliding window.- Shrink the window until the window's sum is smaller than s again while keep  updating the minimum length.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/valid_palindrome_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-string-find-the-length-of-the-longest-substring-in-it-with-no-more-than-k-distinct-characters\">4. Given a string, find the length of the longest substring in it with no more than k distinct characters.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: string=\"araaci\", k=1  Output: 2  Explanation: Longest substring with no more than 1 distinct characters is \"aa\".- Input: string=\"araaci\", k=2  Output: 4  Explanation: Longest substring with no more than 2 distinct characters is \"araa\".- Input: string=\"araaci\", k=3  Output: 5  Explanation: Longest substring with no more than 3 distinct characters is \"araac\".</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a hashmap to remember the frequency of each character we have seen.- Insert characters until we have k distinct characters in the map to be consider a  window.- Shrink the window until there is no more k distinct characters in the map and keep  updating the maximum window length at each step.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(k) space where k is the number of characters in the map.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/longest_substring_k_distinct_test.go\">Link to solution →</a></p><h3 id=\"5-given-an-array-of-characters-where-each-character-represents-a-fruit-tree-you-are-given-two-baskets-and-your-goal-is-to-put-maximum-number-of-fruits-in-each-basket\">5. Given an array of characters where each character represents a fruit tree, you are given two baskets and your goal is to put maximum number of fruits in each basket.</h3><p>Constraints:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Each basket can have only one type of fruit.- You can start with any tree, but once you have started you can’t skip a tree.  You will pick one fruit from each tree until you cannot, i.e., you will stop  when you have to pick from a third fruit type.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: fruits=[\"apple\", \"orange\", \"coconut\", \"apple\", \"coconut\"]  Output: 3  Explanation: Can put 2 \"cocunut\" in 1 basket and 1 \"apple\" in other from  subarray [\"coconut\", \"apple\", \"coconut\"]</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to \"longest substring with k distinct characters\" with k=2.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(k) space where k is the number of characters in the map.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/fruits_baskets_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/12/15/gtci-sliding-window",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-15T00:00:00-05:00",
            "date_modified": "2019-12-15T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/12/05/leetcode-binary-tree",
            "title": "LeetCode's Binary tree",
            "summary": null,
            "content_text": "1. Given a binary tree, determine if it is a valid binary search tree.Approach:- Traverse the tree and apply recursion to check at each step if:  - the current node's value is greater than the lower bound  - the current node's value is smaller than the upper bound  - the current node's left child follows  - the current node's left child followsCost:- O(n) time and O(n) stack space.Link to solution →2. Given a binary tree, find its maximum depth.Approach:- The maximum depth of the current node is the greater of the max height of the left  subtree and the right subtree plus one.Cost:- O(n) time, O(n) space.Link to solution →3. Given a binary tree, find its minimum depth.Approach:- Similar to finding maximum depth, the minimum depth of the current node is  the smaller of the min height of the left subtree and the right subtree plus one.Cost:- O(n) time, O(1) space where n is the length of a linked list.Link to solution →4. Given a binary tree, determine if it is height-balanced.Approach:- Calculate max depth for the left subtree and right subtree.- If either the left subtree or right subtree is unbalanced, return right away.Cost:- O(n) time, O(n) stack space.Link to solution →5. Given a binary tree, find the maximum path sum.Assumption:- The path might start and end at any node in the tree.- Assume the tree is non-empty.- The node can contain negative number.- The maximum path does not have to go though the root node.Approach:- At each node, the potential maximum path could be one of these cases:  - max(left subtree) + node  - max(right subtree) + node  - max(left subtree) + max(right subtree) + node  - the node itselfCost:- O(n) time, O(n) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-binary-tree-determine-if-it-is-a-valid-binary-search-tree\">1. Given a binary tree, determine if it is a valid binary search tree.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Traverse the tree and apply recursion to check at each step if:  - the current node's value is greater than the lower bound  - the current node's value is smaller than the upper bound  - the current node's left child follows  - the current node's left child follows</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(n) stack space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/valid_bst_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-binary-tree-find-its-maximum-depth\">2. Given a binary tree, find its maximum depth.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The maximum depth of the current node is the greater of the max height of the left  subtree and the right subtree plus one.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/max_depth_binary_tree_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-binary-tree-find-its-minimum-depth\">3. Given a binary tree, find its minimum depth.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to finding maximum depth, the minimum depth of the current node is  the smaller of the min height of the left subtree and the right subtree plus one.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space where n is the length of a linked list.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/min_depth_binary_tree_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-binary-tree-determine-if-it-is-height-balanced\">4. Given a binary tree, determine if it is height-balanced.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Calculate max depth for the left subtree and right subtree.- If either the left subtree or right subtree is unbalanced, return right away.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) stack space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/balanced_binary_tree_test.go\">Link to solution →</a></p><h3 id=\"5-given-a-binary-tree-find-the-maximum-path-sum\">5. Given a binary tree, find the maximum path sum.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The path might start and end at any node in the tree.- Assume the tree is non-empty.- The node can contain negative number.- The maximum path does not have to go though the root node.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- At each node, the potential maximum path could be one of these cases:  - max(left subtree) + node  - max(right subtree) + node  - max(left subtree) + max(right subtree) + node  - the node itself</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/binary_tree_max_path_sum_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/12/05/leetcode-binary-tree",
            
            
            
            "tags": ["leetcode","algorithm"],
            
            "date_published": "2019-12-05T00:00:00-05:00",
            "date_modified": "2019-12-05T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/11/16/leetcode-linked-list",
            "title": "LeetCode's Linked List",
            "summary": null,
            "content_text": "1. Merge two sorted linked lists and return it as a new list.Example:- Input: 1 -&gt; 3-&gt; 5 &amp; 2 -&gt; 4-&gt; 6  Output: 1 -&gt; 2-&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6Approach:- Traverse both list at the same time, compare their values at each step and  add the smaller one to a new list.Cost:- O(n|m) time, O(n+m) space where n and m are lengths of these two linked lists.Link to solution →2. Given two linked lists representing two non-negative number, add them together and return it as a linked list.Assumption:- The digits are stored in reverse order.- Each node contains a single digit.Example:- Input: (1 -&gt; 6 -&gt; 4) + (2 -&gt; 4-&gt; 1)  Output: (3 -&gt; 0 -&gt; 6)Approach:- Traverse both lists and keep track of the sum and carry for each  digit.Cost:- O(n|m) time, O(m|n) space where m and m are lengths of these two lists.Link to solution →3. Given a linked list, swap every two adjacent nodes and return its head.Assumption:- If the length of the linked list is odd, the last node should not be swapped.- The solution should use constant space.Example:- Input: 1 -&gt; 3-&gt; 5 -&gt; 2 -&gt; 4-&gt; 6  Output: 3 -&gt; 1-&gt; 2 -&gt; 5 -&gt; 6 -&gt; 4- Input: 1 -&gt; 3-&gt; 5 -&gt; 2 -&gt; 4  Output: 3 -&gt; 1-&gt; 2 -&gt; 5 -&gt; 4Approach:- Traverse the list and swap the nodes pairwise by adjusting where it's pointing next.Cost:- O(n) time, O(1) space where n is the length of a linked list.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-merge-two-sorted-linked-lists-and-return-it-as-a-new-list\">1. Merge two sorted linked lists and return it as a new list.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: 1 -&gt; 3-&gt; 5 &amp; 2 -&gt; 4-&gt; 6  Output: 1 -&gt; 2-&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Traverse both list at the same time, compare their values at each step and  add the smaller one to a new list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n|m) time, O(n+m) space where n and m are lengths of these two linked lists.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/merge_sorted_linked_list_test.go\">Link to solution →</a></p><h3 id=\"2-given-two-linked-lists-representing-two-non-negative-number-add-them-together-and-return-it-as-a-linked-list\">2. Given two linked lists representing two non-negative number, add them together and return it as a linked list.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The digits are stored in reverse order.- Each node contains a single digit.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: (1 -&gt; 6 -&gt; 4) + (2 -&gt; 4-&gt; 1)  Output: (3 -&gt; 0 -&gt; 6)</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Traverse both lists and keep track of the sum and carry for each  digit.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n|m) time, O(m|n) space where m and m are lengths of these two lists.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/add_two_numbers_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-linked-list-swap-every-two-adjacent-nodes-and-return-its-head\">3. Given a linked list, swap every two adjacent nodes and return its head.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- If the length of the linked list is odd, the last node should not be swapped.- The solution should use constant space.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: 1 -&gt; 3-&gt; 5 -&gt; 2 -&gt; 4-&gt; 6  Output: 3 -&gt; 1-&gt; 2 -&gt; 5 -&gt; 6 -&gt; 4- Input: 1 -&gt; 3-&gt; 5 -&gt; 2 -&gt; 4  Output: 3 -&gt; 1-&gt; 2 -&gt; 5 -&gt; 4</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Traverse the list and swap the nodes pairwise by adjusting where it's pointing next.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space where n is the length of a linked list.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/swap_nodes_in_pairs_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/11/16/leetcode-linked-list",
            
            
            
            "tags": ["leetcode","algorithm"],
            
            "date_published": "2019-11-16T00:00:00-05:00",
            "date_modified": "2019-11-16T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/10/18/leetcode-math",
            "title": "LeetCode's Math",
            "summary": null,
            "content_text": "1. Given a 64-bit integer, reverse its digits.Assumption:- Negative numbers are also valid.- Must handle the case where the reversed integer is overflow.Example:- Input: 123  Output: 321- Input: -123  Output: -321- Input: 8085774586302733229 Output: 0  Explanation: The reversed integer 9223372036854775808 overflows by 1 so we return 0.Approach:- Use modulo by 10 to get a digit at ones' place of the input and  dividing by 10 to shift it to the right (eliminate the ones' place).Cost:- O(m) time, O(1) space, where m is log10 of the input.Link to solution →2. Given a number represented as an array of digits, plus one to the number.Assumption:- The input are non-negative.- The digits are stored such that the most significant digit is at the head of the list.- The number does not contain leading zeros.Example:- Input: []int{1, 2, 5}  Output: []int{1, 2, 6}- Input: []int{1, 2, 9}  Output: []int{1, 3, 0}- Input: []int{1, 9, 9}  Output: []int{2, 0, 0}Approach:- Iterate through the list from right to left and add 1 to the current digit accordingly.  - If the current digit is less than 9, add 1 and update it.  - Otherwise, set it to 0.- If all the digits are 9, append an 0 in the end and update the first digit to 1.Cost:- O(n) time, O(1) space, where n is the length of the list.Link to solution →3. Determine whether an integer is a palindrome.Assumption:- Do this without extra space.- Define negative integers as non-palindrome.Example:- Input: 101  Output: true- Input: 106  Output: falseApproach:- Use two-pointer approach where one starts at the first digit and one starts  at the last digit, have them walk toward the middle and compare them at each  step.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-64-bit-integer-reverse-its-digits\">1. Given a 64-bit integer, reverse its digits.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Negative numbers are also valid.- Must handle the case where the reversed integer is overflow.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: 123  Output: 321- Input: -123  Output: -321- Input: 8085774586302733229 Output: 0  Explanation: The reversed integer 9223372036854775808 overflows by 1 so we return 0.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use modulo by 10 to get a digit at ones' place of the input and  dividing by 10 to shift it to the right (eliminate the ones' place).</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(m) time, O(1) space, where m is log10 of the input.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/reverse_integer_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-number-represented-as-an-array-of-digits-plus-one-to-the-number\">2. Given a number represented as an array of digits, plus one to the number.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The input are non-negative.- The digits are stored such that the most significant digit is at the head of the list.- The number does not contain leading zeros.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 2, 5}  Output: []int{1, 2, 6}- Input: []int{1, 2, 9}  Output: []int{1, 3, 0}- Input: []int{1, 9, 9}  Output: []int{2, 0, 0}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through the list from right to left and add 1 to the current digit accordingly.  - If the current digit is less than 9, add 1 and update it.  - Otherwise, set it to 0.- If all the digits are 9, append an 0 in the end and update the first digit to 1.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space, where n is the length of the list.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/plus_one_test.go\">Link to solution →</a></p><h3 id=\"3-determine-whether-an-integer-is-a-palindrome\">3. Determine whether an integer is a palindrome.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Do this without extra space.- Define negative integers as non-palindrome.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: 101  Output: true- Input: 106  Output: false</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use two-pointer approach where one starts at the first digit and one starts  at the last digit, have them walk toward the middle and compare them at each  step.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/palindrome_number_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/10/18/leetcode-math",
            
            
            
            "tags": ["leetcode","algorithm"],
            
            "date_published": "2019-10-18T00:00:00-04:00",
            "date_modified": "2019-10-18T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/10/08/leetcode-array-string",
            "title": "LeetCode's Array/String",
            "summary": null,
            "content_text": "1. Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that each input would have exactly one solution, and you may not use the same element twice.Example:- Input: nums = []int{2, 5, 4}, target = 6  Output: [0, 2] since nums[0] + nums[2] = 2 + 4 = 6Approach:- Use a hash map to store the value and its index as we iterate through the  list.- Within each iteration, look up the difference of target and the current  value to see if we have seen that number.- Simply return two cached indices once that condition meets.Cost:- O(n) time, O(n) space.Link to solution →2. Given a sorted array of integers, return indices of the two numbers such that they add up to a specific target.Example:- Input: nums = []int{2, 3, 4}, target = 6  Output: [0, 2] since nums[0] + nums[2] = 2 + 4 = 6Approach:- Since the array is sorted, can use two-pointer approach that has one point  to the start of the list while the other point at the end and move the  toward each other.Cost:- O(n) time and O(1) space.Link to solution →3. Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.Example:- Input: \"A man, a plan, a canal: Panama\"  Output: true- Input: \"race a car\"  Output: falseApproach:- Use two pointers approach that have one point to the start of the string and  the other point at the end.- Move them toward each other and compare if they're the same characters while  skipping non-alphanumeric characters and ignoring cases.Cost:- O(n) time, O(1) space.Link to solution →4. Implement strstr() that finds the first occurrence of the substring needle in the string haystack. It returns -1 if needle is not part of the haystack.Example:- Input: haystack = \"aaabacd\", needle = \"ba\"  Output: 3, because needle \"ba\" starts at index 3 in the haystack.Approach:- Scan the needle with the haystack from its first position and start matching  all subsequent letters one by one.- If one letter does not match, start again with the next position in the  haystack.Cost:- O(nm) time, O(1) space, where n is the length of haystack while m is the  length of needle.Link to solution →5. Given a string, reverse it word by word.Example:- Input: \"hard so be to have not does interview coding\"  Output: \"coding interview does not have to be so hard\"Approach:- Approach with a two-pass solution.- The first pass is to split the string into an array of words separated by  spaces.- The second pass is to reverse the order of words in the array by using  two-pointer approach: swap two values on both ends as we move toward the  middle.- Concatenate the values of ordered array to create a final string.Cost:- O(n) time, O(n) space.Link to solution →6. Given a string, find the length of the longest substring without repeating characters.Example:- Input: \"abcabcbb\"  Output: 3  Explanation: The longest substring is \"abc\" with the length of 3.- Input: \"bbbbb\"  Output: 1  Explanation: The longest substring is \"b\" with the length of 1.Approach:- Iterate through the string and keep track of the maximum length of non-repeating  characters using a hashmap that maps characters to their indices.- Could skip characters immediately if we found a repeating character.Cost:- O(n) time, O(m) cost where m &lt; n and  n is the length of the string.Link to solution →7. Given a sorted integer array where the range of elements are [0, 99] inclusive, return its missing ranges.Example:- Input: []int{0, 1, 6, 16, 66, 99}  Output: []string{\"2-5\", \"7-15\", \"17-65\", \"67-98\"}- Input: []int{6, 16, 66}  Output: []string{\"0-5\", \"7-15\", \"17-65\", \"67-99\"}Approach:- Keep two pointers where one is ahead of the other by 1 index.- Iterate through the list, calculate the difference of two consecutive numbers  in the list at each step and append it to a new list.Cost:- O(n) time, O(m) space, where m &lt; n and n is the size of the input.Link to solution →8. Given two strings, determine if they are both one edit distance apart.Example:- Input: \"abcde\", \"abXde\"  Output: true  Explanation: Only \"c\" in S is replaced by \"X\" in T.- Input: \"abcde\", \"abcXde\"  Output: true  Explanation: \"X\" is inserted between \"c\" and \"d\" in S to get T.Approach:- Use two-pointer approach to traverse both strings at the same time and  keep track of count of difference characters.Cost:- O(n) time, O(1) spaceLink to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-an-array-of-integers-return-indices-of-the-two-numbers-such-that-they-add-up-to-a-specific-target\">1. Given an array of integers, return indices of the two numbers such that they add up to a specific target.</h3><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: nums = []int{2, 5, 4}, target = 6  Output: [0, 2] since nums[0] + nums[2] = 2 + 4 = 6</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a hash map to store the value and its index as we iterate through the  list.- Within each iteration, look up the difference of target and the current  value to see if we have seen that number.- Simply return two cached indices once that condition meets.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/two_sum_i_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-sorted-array-of-integers-return-indices-of-the-two-numbers-such-that-they-add-up-to-a-specific-target\">2. Given a sorted array of integers, return indices of the two numbers such that they add up to a specific target.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: nums = []int{2, 3, 4}, target = 6  Output: [0, 2] since nums[0] + nums[2] = 2 + 4 = 6</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Since the array is sorted, can use two-pointer approach that has one point  to the start of the list while the other point at the end and move the  toward each other.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/two_sum_ii_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-string-determine-if-it-is-a-palindrome-considering-only-alphanumeric-characters-and-ignoring-cases\">3. Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"A man, a plan, a canal: Panama\"  Output: true- Input: \"race a car\"  Output: false</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use two pointers approach that have one point to the start of the string and  the other point at the end.- Move them toward each other and compare if they're the same characters while  skipping non-alphanumeric characters and ignoring cases.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/valid_palindrome_test.go\">Link to solution →</a></p><h3 id=\"4-implement-strstr-that-finds-the-first-occurrence-of-the-substring-needle-in-the-string-haystack-it-returns--1-if-needle-is-not-part-of-the-haystack\">4. Implement strstr() that finds the first occurrence of the substring needle in the string haystack. It returns -1 if needle is not part of the haystack.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: haystack = \"aaabacd\", needle = \"ba\"  Output: 3, because needle \"ba\" starts at index 3 in the haystack.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Scan the needle with the haystack from its first position and start matching  all subsequent letters one by one.- If one letter does not match, start again with the next position in the  haystack.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(nm) time, O(1) space, where n is the length of haystack while m is the  length of needle.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/strstr_test.go\">Link to solution →</a></p><h3 id=\"5-given-a-string-reverse-it-word-by-word\">5. Given a string, reverse it word by word.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"hard so be to have not does interview coding\"  Output: \"coding interview does not have to be so hard\"</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Approach with a two-pass solution.- The first pass is to split the string into an array of words separated by  spaces.- The second pass is to reverse the order of words in the array by using  two-pointer approach: swap two values on both ends as we move toward the  middle.- Concatenate the values of ordered array to create a final string.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/reverse_words_string_test.go\">Link to solution →</a></p><h3 id=\"6-given-a-string-find-the-length-of-the-longest-substring-without-repeating-characters\">6. Given a string, find the length of the longest substring without repeating characters.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"abcabcbb\"  Output: 3  Explanation: The longest substring is \"abc\" with the length of 3.- Input: \"bbbbb\"  Output: 1  Explanation: The longest substring is \"b\" with the length of 1.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through the string and keep track of the maximum length of non-repeating  characters using a hashmap that maps characters to their indices.- Could skip characters immediately if we found a repeating character.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(m) cost where m &lt; n and  n is the length of the string.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/longest_substring_test.go\">Link to solution →</a></p><h3 id=\"7-given-a-sorted-integer-array-where-the-range-of-elements-are-0-99-inclusive-return-its-missing-ranges\">7. Given a sorted integer array where the range of elements are [0, 99] inclusive, return its missing ranges.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{0, 1, 6, 16, 66, 99}  Output: []string{\"2-5\", \"7-15\", \"17-65\", \"67-98\"}- Input: []int{6, 16, 66}  Output: []string{\"0-5\", \"7-15\", \"17-65\", \"67-99\"}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Keep two pointers where one is ahead of the other by 1 index.- Iterate through the list, calculate the difference of two consecutive numbers  in the list at each step and append it to a new list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(m) space, where m &lt; n and n is the size of the input.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/missing_ranges_test.go\">Link to solution →</a></p><h3 id=\"8-given-two-strings-determine-if-they-are-both-one-edit-distance-apart\">8. Given two strings, determine if they are both one edit distance apart.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"abcde\", \"abXde\"  Output: true  Explanation: Only \"c\" in S is replaced by \"X\" in T.- Input: \"abcde\", \"abcXde\"  Output: true  Explanation: \"X\" is inserted between \"c\" and \"d\" in S to get T.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use two-pointer approach to traverse both strings at the same time and  keep track of count of difference characters.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/one_edit_distance_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/10/08/leetcode-array-string",
            
            
            
            "tags": ["leetcode","algorithm"],
            
            "date_published": "2019-10-08T00:00:00-04:00",
            "date_modified": "2019-10-08T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/10/01/interviewcake-linked-list",
            "title": "Interview Cake's Linked Lists",
            "summary": null,
            "content_text": "1. Delete a node from a singly-linked list, given only a pointer to that node.Approach:- Since we don't have access to the previous node, simply copy the value and  pointer of the next node and copy them into the current node.Cost:- O(1) time and O(1) space.Link to solution →2. Determine if a singly-linked list has a cycle.Approach:- Keep two pointers starting at the first node such that: every time one moves  one node ahead, the other moves 2 nodes ahead.- If the linked list has a cycle, the faster one will catch up with the slow  one. Otherwise, the faster one will each the end.Cost:- O(n) time and O(1) space.Link to solution →3. Reverse a linked list in-place.Approach:- Iterate through the list and point each node's next pointer to the previous item.Cost:- O(n) time, O(1) space.Link to solution →4. Find the kth to last node in a linked list.Example:- Input: list = 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6, k = 2  Output: 5, because 5 is the 2nd to the last node (6)Approach:- Use two pointers such that one starts at the beginning and the other one  starts at k distance apart.- Walk both at the same speed toward the end.- When one hits the tail, the other one is on the target node.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-delete-a-node-from-a-singly-linked-list-given-only-a-pointer-to-that-node\">1. Delete a node from a singly-linked list, given only a pointer to that node.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Since we don't have access to the previous node, simply copy the value and  pointer of the next node and copy them into the current node.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(1) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/delete_node_test.go\">Link to solution →</a></p><h3 id=\"2-determine-if-a-singly-linked-list-has-a-cycle\">2. Determine if a singly-linked list has a cycle.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Keep two pointers starting at the first node such that: every time one moves  one node ahead, the other moves 2 nodes ahead.- If the linked list has a cycle, the faster one will catch up with the slow  one. Otherwise, the faster one will each the end.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/linked_list_cycle_test.go\">Link to solution →</a></p><h3 id=\"3-reverse-a-linked-list-in-place\">3. Reverse a linked list in-place.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through the list and point each node's next pointer to the previous item.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/reverse_linked_list_test.go\">Link to solution →</a></p><h3 id=\"4-find-the-kth-to-last-node-in-a-linked-list\">4. Find the kth to last node in a linked list.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: list = 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6, k = 2  Output: 5, because 5 is the 2nd to the last node (6)</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use two pointers such that one starts at the beginning and the other one  starts at k distance apart.- Walk both at the same speed toward the end.- When one hits the tail, the other one is on the target node.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/kth_to_last_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/10/01/interviewcake-linked-list",
            
            
            
            "tags": ["interviewcake","algorithm"],
            
            "date_published": "2019-10-01T00:00:00-04:00",
            "date_modified": "2019-10-01T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/09/24/7-sorting-algorithms",
            "title": "7 sorting algorithms",
            "summary": null,
            "content_text": "Here are 7 sorting algorithms implementations in Go that we are going to cover in this post:  Bubble Sort  Selection Sort  Insertion Sort  Merge Sort  Quicksort  Heapsort  Counting SortBubble SortApproach:Repeatedly swap the adjacent elements if they are in the wrong order in thearray, one item at a time.Cost:O(n^2) time and O(1) space.Solution:func bubbleSort(in []int) {\tlength := len(in)\t// for each element in the list, check it with almost every other element.\tfor i := 0; i &lt; length; i++ {\t\t// since the last i element is already in place, only iterate through\t\t// the item before the last one.\t\tfor j := 0; j &lt; length-i-1; j++ {\t\t\t// swap the adjacent elements if they are not in ascending order.\t\t\tif in[j] &gt; in[j+1] {\t\t\t\tcommon.Swap(in, j, j+1)\t\t\t}\t\t}\t}}Selection SortApproach:Repeatedly select the next smallest element from the unsorted array and move itto the front.Cost:O(n^2) time and O(1) space.Solution:func selectionSort(in []int) {\tminIndex := 0\tfor i := 0; i &lt; len(in)-1; i++ {\t\tminIndex = i\t\t// find the minimum in the rest of the array.\t\tfor j := i + 1; j &lt; len(in); j++ {\t\t\tif in[j] &lt; in[minIndex] {\t\t\t\tminIndex = j\t\t\t}\t\t}\t\t// swap the minimum value with the first value.\t\tcommon.Swap(in, i, minIndex)\t}}Insertion SortApproach:Insert elements from an unsorted array into a sorted subsection of thearray, one item at a time.Cost:O(n^2) time and O(1) space.Solution:func insertionSort(in []int) {\t// iterate through the list from position 1.\tfor i := 1; i &lt; len(in); i++ {\t\t// shift each one to the left by swapping it with the one before until\t\t// it's in the right spot.\t\tcurrent := in[i]\t\tj := i - 1\t\tfor j &gt;= 0 &amp;&amp; current &lt; in[j] {\t\t\tin[j+1] = in[j]\t\t\tj--\t\t}\t\tin[j+1] = current\t}}Merge SortApproach:Split the input in half, recursively sorts each half, then merge thesorted halves back together.Cost:O(nlogn) time and O(n) space.Solution:func mergeSort(in []int) []int {\t// base case\tif len(in) &lt;= 1 {\t\treturn in\t}\t// split the input in half.\tmiddleIndex := len(in) / 2\tleft := in[:middleIndex]\tright := in[middleIndex:]\t// sort each half.\tleftSorted := mergeSort(left)\trightSorted := mergeSort(right)\t// merge the sorted halves.\treturn mergeSortedArray(leftSorted, rightSorted)}func mergeSortedArray(a1, a2 []int) []int {\tout := []int{}\t// keep two \"pointer\" at index 0 and move up accordingly as one get\t// merged in.\ti, j := 0, 0\tfor i &lt; len(a1) &amp;&amp; j &lt; len(a2) {\t\tif a1[i] &lt; a2[j] {\t\t\tout = append(out, a1[i])\t\t\ti++\t\t} else {\t\t\tout = append(out, a2[j])\t\t\tj++\t\t}\t}\t// if we get here, one array must have bigger size than the other. could\t// figure out which one is it then copy the rest of its to our final one.\tif i &lt; len(a1) {\t\tout = append(out, a1[i:]...)\t}\tif j &lt; len(a2) {\t\tout = append(out, a2[j:]...)\t}\treturn out}QuicksortApproach:Recursively divide the input into two smaller arrays around a pivot, whereone half has items smaller than the pivot, other half has items bigger thanthe pivot.Cost:O(nlogn) time and O(nlogn) space.Solution:func quicksort(in []int, start, end int) {\tif start &lt; end {\t\t// pi is the pivot/partition index.\t\tpi := partition(in, start, end)\t\t// sort the items before and after partition.\t\tquicksort(in, start, pi-1)\t\tquicksort(in, pi+1, end)\t}}func partition(in []int, start, end int) int {\tpivot := in[end]\tleft := start\tright := end - 1\tfor left &lt;= right {\t\t// keep going until we find something on the left that belongs to the\t\t// right.\t\tfor left &lt;= end &amp;&amp; in[left] &lt; pivot {\t\t\tleft++\t\t}\t\t// keep going until we find something on the right that belongs to the\t\t// left.\t\tfor right &gt;= start &amp;&amp; in[right] &gt;= pivot {\t\t\tright--\t\t}\t\t// by swapping the item at left and right index, we move the item that\t\t// is smaller than the pivot to the left half and vice versa.\t\tif left &lt; right {\t\t\tcommon.Swap(in, left, right)\t\t} else {\t\t\t// once the partition is finished, move the pivot back to its final\t\t\t// position by swapping the item at left and end index.\t\t\tcommon.Swap(in, left, end)\t\t}\t}\treturn left}HeapsortApproach:Similar to selection sort, repeatedly choose the largest item and move it tothe end of the array using a max heap.Cost:O(nlogn) time and O(1) space.Solution:func heapsort(in []int) {\theapify(in)\tsize := len(in)\tfor size &gt; 0 {\t\t// repeatedly remove the largest item.\t\tlargest := removeLargest(in, size)\t\t// update the heap size.\t\tsize--\t\t// store the removed value at the end of the list.\t\tin[size] = largest\t}}// heapify transform the input into a max heap.func heapify(in []int) {\tfor i := len(in) - 1; i &gt; -1; i-- {\t\tbubbleDown(in, len(in), i)\t}}// bubbleDown allow larger values to reach the top.func bubbleDown(heap []int, heapSize int, index int) {\tfor index &lt; heapSize {\t\t// fast-calculate the children left and right index.\t\tleft := index*2 + 1\t\tright := index*2 + 2\t\t// stop if there is no child node.\t\tif left &gt;= heapSize {\t\t\tbreak\t\t}\t\t// find the larger index\t\tlarger := left\t\tif right &lt; heapSize &amp;&amp; heap[left] &lt; heap[right] {\t\t\tlarger = right\t\t}\t\t// if the current item is larger than both children, we're done.\t\t// if not, swap with the larger child.\t\tif heap[index] &lt; heap[larger] {\t\t\tcommon.Swap(heap, index, larger)\t\t} else {\t\t\tbreak\t\t}\t}}// removeLargest remove and return the largest item from the heap.func removeLargest(heap []int, heapSize int) int {\t// largest item is at the top of our max heap.\tlargest := heap[0]\t// move the last item into the root position.\theap[0] = heap[heapSize-1]\t// bubble down from the root to restore the heap.\tbubbleDown(heap, heapSize-1, 0)\treturn largest}Counting SortApproach:Iterate through the input, count the number of times each item occurs, usethese counts to compute each item's index in the final sorted array.Cost:O(n) time and O(n) space.Solution:func countingSort(in []int, max int) []int {\t// utilize max value to create a fix-sized list of item counts.\tcounts := make([]int, max+1)\tout := make([]int, 0)\t// populate the array where its indices represent items themselves and\t// its values represent how many time the item appears.\tfor _, item := range in {\t\tcounts[item]++\t}\t// iterate through the counts and add the item to the output list.\tfor i := 0; i &lt; len(counts); i++ {\t\tcount := counts[i]\t\tfor j := 0; j &lt; count; j++ {\t\t\tout = append(out, i)\t\t}\t}\treturn out}  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<p>Here are 7 sorting algorithms implementations in Go that we are going to cover in this post:</p><ol>  <li>Bubble Sort</li>  <li>Selection Sort</li>  <li>Insertion Sort</li>  <li>Merge Sort</li>  <li>Quicksort</li>  <li>Heapsort</li>  <li>Counting Sort</li></ol><h2 id=\"bubble-sort\">Bubble Sort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Repeatedly swap the adjacent elements if they are in the wrong order in thearray, one item at a time.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(n^2) time and O(1) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">bubbleSort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span>\t<span class=\"c\">// for each element in the list, check it with almost every other element.</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">length</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// since the last i element is already in place, only iterate through</span>\t\t<span class=\"c\">// the item before the last one.</span>\t\t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">length</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t\t<span class=\"c\">// swap the adjacent elements if they are not in ascending order.</span>\t\t\t<span class=\"k\">if</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"p\">{</span>\t\t\t\t<span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"p\">)</span>\t\t\t<span class=\"p\">}</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"selection-sort\">Selection Sort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Repeatedly select the next smallest element from the unsorted array and move itto the front.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(n^2) time and O(1) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">selectionSort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">minIndex</span> <span class=\"o\">:=</span> <span class=\"m\">0</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t<span class=\"n\">minIndex</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\t\t<span class=\"c\">// find the minimum in the rest of the array.</span>\t\t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">);</span> <span class=\"n\">j</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t\t<span class=\"k\">if</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">minIndex</span><span class=\"p\">]</span> <span class=\"p\">{</span>\t\t\t\t<span class=\"n\">minIndex</span> <span class=\"o\">=</span> <span class=\"n\">j</span>\t\t\t<span class=\"p\">}</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"c\">// swap the minimum value with the first value.</span>\t\t<span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">minIndex</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"insertion-sort\">Insertion Sort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Insert elements from an unsorted array into a sorted subsection of thearray, one item at a time.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(n^2) time and O(1) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">insertionSort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"c\">// iterate through the list from position 1.</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">);</span> <span class=\"n\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// shift each one to the left by swapping it with the one before until</span>\t\t<span class=\"c\">// it's in the right spot.</span>\t\t<span class=\"n\">current</span> <span class=\"o\">:=</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\t\t<span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"m\">1</span>\t\t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"m\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">current</span> <span class=\"o\">&lt;</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\t\t\t<span class=\"n\">j</span><span class=\"o\">--</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">current</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"merge-sort\">Merge Sort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Split the input in half, recursively sorts each half, then merge thesorted halves back together.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(nlogn) time and O(n) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">mergeSort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">[]</span><span class=\"kt\">int</span> <span class=\"p\">{</span>\t<span class=\"c\">// base case</span>\t<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"m\">1</span> <span class=\"p\">{</span>\t\t<span class=\"k\">return</span> <span class=\"n\">in</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// split the input in half.</span>\t<span class=\"n\">middleIndex</span> <span class=\"o\">:=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"m\">2</span>\t<span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"n\">middleIndex</span><span class=\"p\">]</span>\t<span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">middleIndex</span><span class=\"o\">:</span><span class=\"p\">]</span>\t<span class=\"c\">// sort each half.</span>\t<span class=\"n\">leftSorted</span> <span class=\"o\">:=</span> <span class=\"n\">mergeSort</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">)</span>\t<span class=\"n\">rightSorted</span> <span class=\"o\">:=</span> <span class=\"n\">mergeSort</span><span class=\"p\">(</span><span class=\"n\">right</span><span class=\"p\">)</span>\t<span class=\"c\">// merge the sorted halves.</span>\t<span class=\"k\">return</span> <span class=\"n\">mergeSortedArray</span><span class=\"p\">(</span><span class=\"n\">leftSorted</span><span class=\"p\">,</span> <span class=\"n\">rightSorted</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">mergeSortedArray</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">[]</span><span class=\"kt\">int</span> <span class=\"p\">{</span>\t<span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">{}</span>\t<span class=\"c\">// keep two \"pointer\" at index 0 and move up accordingly as one get</span>\t<span class=\"c\">// merged in.</span>\t<span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">0</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"k\">if</span> <span class=\"n\">a1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">a2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\t\t\t<span class=\"n\">i</span><span class=\"o\">++</span>\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span>\t\t\t<span class=\"n\">j</span><span class=\"o\">++</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// if we get here, one array must have bigger size than the other. could</span>\t<span class=\"c\">// figure out which one is it then copy the rest of its to our final one.</span>\t<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"p\">]</span><span class=\"o\">...</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"p\">]</span><span class=\"o\">...</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">out</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"quicksort\">Quicksort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Recursively divide the input into two smaller arrays around a pivot, whereone half has items smaller than the pivot, other half has items bigger thanthe pivot.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(nlogn) time and O(nlogn) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">quicksort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">if</span> <span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// pi is the pivot/partition index.</span>\t\t<span class=\"n\">pi</span> <span class=\"o\">:=</span> <span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span>\t\t<span class=\"c\">// sort the items before and after partition.</span>\t\t<span class=\"n\">quicksort</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">pi</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">)</span>\t\t<span class=\"n\">quicksort</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">pi</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>\t<span class=\"n\">pivot</span> <span class=\"o\">:=</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">end</span><span class=\"p\">]</span>\t<span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">start</span>\t<span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"m\">1</span>\t<span class=\"k\">for</span> <span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// keep going until we find something on the left that belongs to the</span>\t\t<span class=\"c\">// right.</span>\t\t<span class=\"k\">for</span> <span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pivot</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">left</span><span class=\"o\">++</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"c\">// keep going until we find something on the right that belongs to the</span>\t\t<span class=\"c\">// left.</span>\t\t<span class=\"k\">for</span> <span class=\"n\">right</span> <span class=\"o\">&gt;=</span> <span class=\"n\">start</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">pivot</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">right</span><span class=\"o\">--</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"c\">// by swapping the item at left and right index, we move the item that</span>\t\t<span class=\"c\">// is smaller than the pivot to the left half and vice versa.</span>\t\t<span class=\"k\">if</span> <span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\t\t\t<span class=\"c\">// once the partition is finished, move the pivot back to its final</span>\t\t\t<span class=\"c\">// position by swapping the item at left and end index.</span>\t\t\t<span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">left</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"heapsort\">Heapsort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Similar to selection sort, repeatedly choose the largest item and move it tothe end of the array using a max heap.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(nlogn) time and O(1) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">heapsort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">heapify</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span>\t<span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span>\t<span class=\"k\">for</span> <span class=\"n\">size</span> <span class=\"o\">&gt;</span> <span class=\"m\">0</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// repeatedly remove the largest item.</span>\t\t<span class=\"n\">largest</span> <span class=\"o\">:=</span> <span class=\"n\">removeLargest</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">)</span>\t\t<span class=\"c\">// update the heap size.</span>\t\t<span class=\"n\">size</span><span class=\"o\">--</span>\t\t<span class=\"c\">// store the removed value at the end of the list.</span>\t\t<span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">size</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">largest</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"c\">// heapify transform the input into a max heap.</span><span class=\"k\">func</span> <span class=\"n\">heapify</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span> <span class=\"p\">{</span>\t\t<span class=\"n\">bubbleDown</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">),</span> <span class=\"n\">i</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"c\">// bubbleDown allow larger values to reach the top.</span><span class=\"k\">func</span> <span class=\"n\">bubbleDown</span><span class=\"p\">(</span><span class=\"n\">heap</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">heapSize</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">index</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"n\">heapSize</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// fast-calculate the children left and right index.</span>\t\t<span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">index</span><span class=\"o\">*</span><span class=\"m\">2</span> <span class=\"o\">+</span> <span class=\"m\">1</span>\t\t<span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">index</span><span class=\"o\">*</span><span class=\"m\">2</span> <span class=\"o\">+</span> <span class=\"m\">2</span>\t\t<span class=\"c\">// stop if there is no child node.</span>\t\t<span class=\"k\">if</span> <span class=\"n\">left</span> <span class=\"o\">&gt;=</span> <span class=\"n\">heapSize</span> <span class=\"p\">{</span>\t\t\t<span class=\"k\">break</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"c\">// find the larger index</span>\t\t<span class=\"n\">larger</span> <span class=\"o\">:=</span> <span class=\"n\">left</span>\t\t<span class=\"k\">if</span> <span class=\"n\">right</span> <span class=\"o\">&lt;</span> <span class=\"n\">heapSize</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">larger</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"c\">// if the current item is larger than both children, we're done.</span>\t\t<span class=\"c\">// if not, swap with the larger child.</span>\t\t<span class=\"k\">if</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"n\">larger</span><span class=\"p\">]</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">heap</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">larger</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\t\t\t<span class=\"k\">break</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"c\">// removeLargest remove and return the largest item from the heap.</span><span class=\"k\">func</span> <span class=\"n\">removeLargest</span><span class=\"p\">(</span><span class=\"n\">heap</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">heapSize</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>\t<span class=\"c\">// largest item is at the top of our max heap.</span>\t<span class=\"n\">largest</span> <span class=\"o\">:=</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">]</span>\t<span class=\"c\">// move the last item into the root position.</span>\t<span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"n\">heapSize</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">]</span>\t<span class=\"c\">// bubble down from the root to restore the heap.</span>\t<span class=\"n\">bubbleDown</span><span class=\"p\">(</span><span class=\"n\">heap</span><span class=\"p\">,</span> <span class=\"n\">heapSize</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">)</span>\t<span class=\"k\">return</span> <span class=\"n\">largest</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"counting-sort\">Counting Sort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Iterate through the input, count the number of times each item occurs, usethese counts to compute each item's index in the final sorted array.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(n) time and O(n) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">countingSort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">max</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">[]</span><span class=\"kt\">int</span> <span class=\"p\">{</span>\t<span class=\"c\">// utilize max value to create a fix-sized list of item counts.</span>\t<span class=\"n\">counts</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">max</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"p\">)</span>\t<span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">)</span>\t<span class=\"c\">// populate the array where its indices represent items themselves and</span>\t<span class=\"c\">// its values represent how many time the item appears.</span>\t<span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">in</span> <span class=\"p\">{</span>\t\t<span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span><span class=\"o\">++</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// iterate through the counts and add the item to the output list.</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">counts</span><span class=\"p\">);</span> <span class=\"n\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t<span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\t\t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">out</span><span class=\"p\">}</span></code></pre></div></div><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/09/24/7-sorting-algorithms",
            
            
            
            "tags": ["algorithm","sorting"],
            
            "date_published": "2019-09-24T00:00:00-04:00",
            "date_modified": "2019-09-24T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/09/17/interviewcake-queue-stack",
            "title": "Interview Cake's Queues and Stacks",
            "summary": null,
            "content_text": "1. Implement a stack with a method getMax() that returns the largest element in the stack in O(1) time.Approach:- We use two stack implementation themselves: one holds all the items and the  other holds all the maximum values after each push() and pop().- That way, we could keep track of your maximum value up to date in constant  time.Cost:- O(1) time, O(m) space where m is the number of operations performed on the  stack.Link to solution →2. Implement a queue with 2 stacks.Approach:- Use one stack for enqueuing item and the other to reverse the order them for  dequeuing/popping item.Cost:- O(1) time, O(m) space m is the number of operations.Link to solution →3. Given a sentence as string, and the position of an opening parenthesis position, find the matching closing one position.Example:- Input: \"I ((like) (nesting) parenthesis)\", opening parenthesis position = 2  Output: 31, because the matching parenthesis of the one in position 2 is at  index 31.Approach:- Iterate through the string and keep a count of matching parenthesis at each  step.Cost:- O(n) time, O(1) space.Link to solution →4. Given a string, determine if its brackets are properly nested.Example:- Input: \"{[]()}\"  Output: true- Input: \"{[(])}\"  Output: false- Input: \"{[}\"  Output: falseApproach:- Use a stack to keep track of matching parenthesis as we iterate  through the string.Cost:- O(n) time and O(n) space, where n is the number of operations.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-implement-a-stack-with-a-method-getmax-that-returns-the-largest-element-in-the-stack-in-o1-time\">1. Implement a stack with a method getMax() that returns the largest element in the stack in O(1) time.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- We use two stack implementation themselves: one holds all the items and the  other holds all the maximum values after each push() and pop().- That way, we could keep track of your maximum value up to date in constant  time.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(1) time, O(m) space where m is the number of operations performed on the  stack.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/largest_stack_test.go\">Link to solution →</a></p><h3 id=\"2-implement-a-queue-with-2-stacks\">2. Implement a queue with 2 stacks.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use one stack for enqueuing item and the other to reverse the order them for  dequeuing/popping item.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(1) time, O(m) space m is the number of operations.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/queue_two_stacks_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-sentence-as-string-and-the-position-of-an-opening-parenthesis-position-find-the-matching-closing-one-position\">3. Given a sentence as string, and the position of an opening parenthesis position, find the matching closing one position.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"I ((like) (nesting) parenthesis)\", opening parenthesis position = 2  Output: 31, because the matching parenthesis of the one in position 2 is at  index 31.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through the string and keep a count of matching parenthesis at each  step.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/parenthesis_matching_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-string-determine-if-its-brackets-are-properly-nested\">4. Given a string, determine if its brackets are properly nested.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"{[]()}\"  Output: true- Input: \"{[(])}\"  Output: false- Input: \"{[}\"  Output: false</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a stack to keep track of matching parenthesis as we iterate  through the string.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(n) space, where n is the number of operations.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/bracket_validator_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/09/17/interviewcake-queue-stack",
            
            
            
            "tags": ["interviewcake","algorithm"],
            
            "date_published": "2019-09-17T00:00:00-04:00",
            "date_modified": "2019-09-17T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/08/31/interviewcake-tree-graph",
            "title": "Interview Cake's Trees and Graphs",
            "summary": null,
            "content_text": "1. Given a binary tree, determine if it is “superbalanced” - the difference between the depths of any two leaf nodes is no greater than 1.Example:- Input:         1      2     3    4   5      7          6  8   9                   10  Output: false  Even though this tree is balanced by definition, it is not \"superbalanced\".Approach:- Use a depth-first walk through the tree and keep track of the depth as we  go.- Every time we found a leaf with a new depth, there are two ways that the  tree could be unbalanced:   - There are more than 2 different leaf depths.   - There are exactly 2 depths but they are more than 1 apart.Cost:- O(n) time, O(n) space.- The worst case is that we have to iterate all nodes in the tree so the time  complexity is O(n). For space complexity, we have to keep track of the all  the nodes at every depth. Hence, it is O(n).Link to solution →2. Given a binary tree, determine if it is a binary search tree.Example:- Input:          5      3       8    2   4   7   9  1               11  Output: true, because for each node, its value is greater than all values in  the left subtree and less than all values in the right one.Approach:- Use a depth-first walk through the tree and validate each node as we go.- If a node appears in the left subtree, it must be less than its ancestor and  vice versa.- Instead of keeping track of every ancestor to check the inequalities, just  need to check the largest number it must be greater than and the smallest one  it must be less than, aka lower bound and upper bound.Cost:- O(n) time, O(n) space.- The worst case is that we have to iterate all nodes in the tree so the time  complexity is O(n). For space complexity, we have to keep track of the lower  bound and upper bound as we traverse the tree via a stack. Hence, the worst  case is O(n).Link to solution →3. Given a binary search tree, find the 2nd largest item.Example:- Input:          5      3       8    2   4   7   9  1               11  Output: 9- Input:           5      3        8    2   4   7     16                11              9   12  Output: 12Approach:- The largest item in a binary search tree is the rightmost item. Can  simply traverse down the tree recursively to find one.- The 2nd largest item could be the parent of the largest but it's not  necessary since the largest could have a left subtree and there might exist  one there.- Still, the second largest one when the largest has a left subtree is basically  the largest one in that left subtree.Cost:- O(h) time, O(1) space, where h is the height of the tree.- If the tree is balanced, the time complexity is (Olgn). Otherwise, it's O(n).Link to solution →4. Given an undirected graph, with maximum degree d, find a graph coloring using at most d + 1 colors. Assume that there is no node with a loop.Example:- For a graph with degree 3, we could use at most 4 colors.Approach:- Use a greedy approach to iterate over the graph and assign each node the  first non-taken color that we found.Cost:- O(m) time and O(d) space, where m is sum of all the nodes and edges, d is  the number of all colors.- Even though it seems like we have an outer and inner loop, we carefully walk  through the graph one node at a time and stop checking for colors as soon as  we found one that is non-taken.- About the space complexity, it makes sense that we have to store all  available colors in the worst case. Hence it takes up O(d) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-binary-tree-determine-if-it-is-superbalanced---the-difference-between-the-depths-of-any-two-leaf-nodes-is-no-greater-than-1\">1. Given a binary tree, determine if it is “superbalanced” - the difference between the depths of any two leaf nodes is no greater than 1.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:         1      2     3    4   5      7          6  8   9                   10  Output: false  Even though this tree is balanced by definition, it is not \"superbalanced\".</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a depth-first walk through the tree and keep track of the depth as we  go.- Every time we found a leaf with a new depth, there are two ways that the  tree could be unbalanced:   - There are more than 2 different leaf depths.   - There are exactly 2 depths but they are more than 1 apart.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.- The worst case is that we have to iterate all nodes in the tree so the time  complexity is O(n). For space complexity, we have to keep track of the all  the nodes at every depth. Hence, it is O(n).</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/balanced_binary_tree_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-binary-tree-determine-if-it-is-a-binary-search-tree\">2. Given a binary tree, determine if it is a binary search tree.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:          5      3       8    2   4   7   9  1               11  Output: true, because for each node, its value is greater than all values in  the left subtree and less than all values in the right one.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a depth-first walk through the tree and validate each node as we go.- If a node appears in the left subtree, it must be less than its ancestor and  vice versa.- Instead of keeping track of every ancestor to check the inequalities, just  need to check the largest number it must be greater than and the smallest one  it must be less than, aka lower bound and upper bound.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.- The worst case is that we have to iterate all nodes in the tree so the time  complexity is O(n). For space complexity, we have to keep track of the lower  bound and upper bound as we traverse the tree via a stack. Hence, the worst  case is O(n).</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/binary_search_tree_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-binary-search-tree-find-the-2nd-largest-item\">3. Given a binary search tree, find the 2nd largest item.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:          5      3       8    2   4   7   9  1               11  Output: 9- Input:           5      3        8    2   4   7     16                11              9   12  Output: 12</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The largest item in a binary search tree is the rightmost item. Can  simply traverse down the tree recursively to find one.- The 2nd largest item could be the parent of the largest but it's not  necessary since the largest could have a left subtree and there might exist  one there.- Still, the second largest one when the largest has a left subtree is basically  the largest one in that left subtree.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(h) time, O(1) space, where h is the height of the tree.- If the tree is balanced, the time complexity is (Olgn). Otherwise, it's O(n).</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/2nd_largest_item_bst_test.go\">Link to solution →</a></p><h3 id=\"4-given-an-undirected-graph-with-maximum-degree-d-find-a-graph-coloring-using-at-most-d--1-colors-assume-that-there-is-no-node-with-a-loop\">4. Given an undirected graph, with maximum degree d, find a graph coloring using at most d + 1 colors. Assume that there is no node with a loop.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- For a graph with degree 3, we could use at most 4 colors.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a greedy approach to iterate over the graph and assign each node the  first non-taken color that we found.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(m) time and O(d) space, where m is sum of all the nodes and edges, d is  the number of all colors.- Even though it seems like we have an outer and inner loop, we carefully walk  through the graph one node at a time and stop checking for colors as soon as  we found one that is non-taken.- About the space complexity, it makes sense that we have to store all  available colors in the worst case. Hence it takes up O(d) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/graph_coloring_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/08/31/interviewcake-tree-graph",
            
            
            
            "tags": ["interviewcake","algorithm"],
            
            "date_published": "2019-08-31T00:00:00-04:00",
            "date_modified": "2019-08-31T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/08/24/interviewcake-greedy-algorithms",
            "title": "Interview Cake's Greedy algorithms",
            "summary": null,
            "content_text": "1. Given a list of stock prices (integer) in chronological order, return the max profit from buying at earlier time and selling at later time.Example:- Input: []int{10, 7, 5, 8, 11, 9}  Output: 6, because one can buy at 5 and sell at 11Approach:- Use a greedy approach to keep track of the minimum price and the maximum  profit for each value while iterating through the list.Cost:- O(n) time, O(1) space.Link to solution →2. Given a list of integers, return the highest product of three numbers.Example:- Input: []int{-10, -10, 1, 3, 2}  Output: 300, because -10.-10.3 gives the highest productApproach:- Use a greedy approach to keep track of the current highest, current lowest,  highest of three, highest of two and lowest of two for every value as we  iterate through the list.Cost:- O(n) time, O(1) space.Link to solution →3. Given a list of integers, return a corresponding list where every index holds the product of every other values except the value in that index. And, you can’t use division!Example:- Input: []int{1, 7, 3, 4}  Output: []int{84, 12, 28, 21}Approach:- Iterate through the list and at each step, calculate the product of all  the integers before each index and the product of all the integers after  each index.Cost:- O(n) time, O(n) space.Link to solution →4. Given a list of integers, shuffle its location in-place.Example:- Input: []int{1, 2, 3, 4, 5}  Output: []int{2, 1, 4, 3, 5}Approach:- Iterate through the list, swap current value with a value in a randomized  index that is between the current and last index.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-list-of-stock-prices-integer-in-chronological-order-return-the-max-profit-from-buying-at-earlier-time-and-selling-at-later-time\">1. Given a list of stock prices (integer) in chronological order, return the max profit from buying at earlier time and selling at later time.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{10, 7, 5, 8, 11, 9}  Output: 6, because one can buy at 5 and sell at 11</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a greedy approach to keep track of the minimum price and the maximum  profit for each value while iterating through the list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/apple_stocks_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-list-of-integers-return-the-highest-product-of-three-numbers\">2. Given a list of integers, return the highest product of three numbers.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{-10, -10, 1, 3, 2}  Output: 300, because -10.-10.3 gives the highest product</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a greedy approach to keep track of the current highest, current lowest,  highest of three, highest of two and lowest of two for every value as we  iterate through the list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/highest_product_of_three_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-list-of-integers-return-a-corresponding-list-where-every-index-holds-the-product-of-every-other-values-except-the-value-in-that-index-and-you-cant-use-division\">3. Given a list of integers, return a corresponding list where every index holds the product of every other values except the value in that index. And, you can’t use division!</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 7, 3, 4}  Output: []int{84, 12, 28, 21}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through the list and at each step, calculate the product of all  the integers before each index and the product of all the integers after  each index.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/product_of_others_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-list-of-integers-shuffle-its-location-in-place\">4. Given a list of integers, shuffle its location in-place.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 2, 3, 4, 5}  Output: []int{2, 1, 4, 3, 5}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through the list, swap current value with a value in a randomized  index that is between the current and last index.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/inplace_shuffle_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/08/24/interviewcake-greedy-algorithms",
            
            
            
            "tags": ["interviewcake","algorithm"],
            
            "date_published": "2019-08-24T00:00:00-04:00",
            "date_modified": "2019-08-24T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/08/23/interview-cake-hashing-problems",
            "title": "Interview Cake's Hashing problems",
            "summary": null,
            "content_text": "1. Given a list of movie lengths and a total flight length, determine if there exist two movies that add up to the total length.Example:- Input: list=[]int{2, 3, 4}, length=6  Output: true, because there exists 2 and 4 that add up to 6Approach:- Could use hashmap to keep track of movie lengths that we've seen so far and  look it up as we iterate through the list.Cost:- O(n) time, O(n) space.Link to solution →2. Given a string, check if its permutation is a palindrome.Example:- Input: \"ivicc\"  Output: true- Input: \"civic\"  Output: trueApproach:- To determine if a permutation is a palindrome, need to check if each  character in the string appears an even number of times, allowing for  only one character to appear an odd time, that is the middle one.- Could use a hashmap store the characters and their number of occurrences.Cost:- O(n) time, O(1) space.Link to solution →3. Given a sentence (string), return its word count map.Example:- Input: \"Cliff finished his cake and paid the bill. Bill finished his cake at the edge of the cliff.\"  Output: map[string]int{\"cliff\": 1, \"Cliff\": 1, \"finished\": 2, \"his\": 2, \"cake\": 2, \"and\": 1, \"paid\": 1, \"the\": 3, \"bill\": 1, \"Bill\": 1, \"at\": 1, \"edge\": 1, \"of\": 1}Approach:- First get rid of special characters, then use a hashmap to keep counts of words  as we iterate through the string.Cost:- O(n) time, O(n) space.Link to solution →4. Given an unsorted list scores (integer) and a highest possible score (integer), return a sorted list utilizing that fact.Example:- Input: []int{37, 89, 41, 65, 91, 53}, 100  Output: []int{91, 89, 65, 53, 41, 37}Approach:- Utilize the highest score to allocate a fix-sized list ahead of time where  where its indices represent the scores themselves and its values represent  how many time these scores appear in the list.Cost:- O(n) time, O(n) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-list-of-movie-lengths-and-a-total-flight-length-determine-if-there-exist-two-movies-that-add-up-to-the-total-length\">1. Given a list of movie lengths and a total flight length, determine if there exist two movies that add up to the total length.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: list=[]int{2, 3, 4}, length=6  Output: true, because there exists 2 and 4 that add up to 6</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Could use hashmap to keep track of movie lengths that we've seen so far and  look it up as we iterate through the list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/inflight_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-string-check-if-its-permutation-is-a-palindrome\">2. Given a string, check if its permutation is a palindrome.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"ivicc\"  Output: true- Input: \"civic\"  Output: true</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- To determine if a permutation is a palindrome, need to check if each  character in the string appears an even number of times, allowing for  only one character to appear an odd time, that is the middle one.- Could use a hashmap store the characters and their number of occurrences.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/permutation_palindrome_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-sentence-string-return-its-word-count-map\">3. Given a sentence (string), return its word count map.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"Cliff finished his cake and paid the bill. Bill finished his cake at the edge of the cliff.\"  Output: map[string]int{\"cliff\": 1, \"Cliff\": 1, \"finished\": 2, \"his\": 2, \"cake\": 2, \"and\": 1, \"paid\": 1, \"the\": 3, \"bill\": 1, \"Bill\": 1, \"at\": 1, \"edge\": 1, \"of\": 1}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- First get rid of special characters, then use a hashmap to keep counts of words  as we iterate through the string.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/word_cloud_test.go\">Link to solution →</a></p><h3 id=\"4-given-an-unsorted-list-scores-integer-and-a-highest-possible-score-integer-return-a-sorted-list-utilizing-that-fact\">4. Given an unsorted list scores (integer) and a highest possible score (integer), return a sorted list utilizing that fact.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{37, 89, 41, 65, 91, 53}, 100  Output: []int{91, 89, 65, 53, 41, 37}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Utilize the highest score to allocate a fix-sized list ahead of time where  where its indices represent the scores themselves and its values represent  how many time these scores appear in the list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/top_scores_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/08/23/interview-cake-hashing-problems",
            
            
            
            "tags": ["interviewcake","algorithm"],
            
            "date_published": "2019-08-23T00:00:00-04:00",
            "date_modified": "2019-08-23T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/08/21/interviewcake-array-string-manipulation",
            "title": "Interview Cake's Array and string manipulation",
            "summary": null,
            "content_text": "1. Given a list of unsorted, independent meetings, returns a list of a merged one.Example:- Input: []meeting{ {1, 2}, {2, 3}, {4, 5} }  Output: []meeting{ {1, 3}, {4, 5} }- Input: []meeting{ {1, 5}, {2, 3} }  Output: []meeting{ {1, 5} }Approach:- Sort the list in ascending order so that meetings that might need to be  merged are next to each other.- Can merge two meetings together if the first one's end time is greater or  or equal than the second one's start time.Cost:- O(nlogn) time, O(n) space.- Because we sort all meeting first, the runtime is O(nlogn). We create a new  list of merged meeting times, so the space cost is O(n).Link to solution →2. Given a list of string, reverse its order.Example:- Input: []string{\"a\", \"b\", \"c\", \"d\"}  Output: []string{\"d\", \"c\", \"b\", \"a\"}Approach:- Use two pointers approach to swap two values on both ends as we move toward  the middle.Cost:- O(n) time, O(1) space.Link to solution →3. Given a list of string that is made up of word but in reverse, return the correct order in-place.Example:- Input: []string{\"w\", \"o\", \"r\", \"l\", \"d\", \"\", \"h\", \"e\", \"l\", \"l\", \"o\", \"\", \"s\", \"a\", \"y\"}  Output: []string{\"s\", \"a\", \"y\", \"\", \"h\", \"e\", \"l\", \"l\", \"o\", \"\", \"w\", \"o\", \"r\", \"l\", \"d\"}Approach:- Similar to reversing string, use the same idea to reverse all the characters  in the list first so that we could have a list of words in the right order, not  its characters.- Iterate through the list again and reverse its characters.Cost:- O(n) time, O(1) space.Link to solution →4. Merge two sorted arrays.Example:- Input: []int{1, 3, 5}, []int{2, 4, 6}  Output: []int{1, 2, 3, 4, 5, 6}- Input: []int{1, 3, 5}, []int{2, 4, 6, 7}  Output: []int{1, 2, 3, 4, 5, 6, 7}Approach:- Since these arrays are sorted, can use two pointers approach to iterate  through both of them and append the smaller value to a new merged list at  each step.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-list-of-unsorted-independent-meetings-returns-a-list-of-a-merged-one\">1. Given a list of unsorted, independent meetings, returns a list of a merged one.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []meeting{ {1, 2}, {2, 3}, {4, 5} }  Output: []meeting{ {1, 3}, {4, 5} }- Input: []meeting{ {1, 5}, {2, 3} }  Output: []meeting{ {1, 5} }</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Sort the list in ascending order so that meetings that might need to be  merged are next to each other.- Can merge two meetings together if the first one's end time is greater or  or equal than the second one's start time.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(nlogn) time, O(n) space.- Because we sort all meeting first, the runtime is O(nlogn). We create a new  list of merged meeting times, so the space cost is O(n).</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/merge_meetings_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-list-of-string-reverse-its-order\">2. Given a list of string, reverse its order.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []string{\"a\", \"b\", \"c\", \"d\"}  Output: []string{\"d\", \"c\", \"b\", \"a\"}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use two pointers approach to swap two values on both ends as we move toward  the middle.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/reverse_string_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-list-of-string-that-is-made-up-of-word-but-in-reverse-return-the-correct-order-in-place\">3. Given a list of string that is made up of word but in reverse, return the correct order in-place.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []string{\"w\", \"o\", \"r\", \"l\", \"d\", \"\", \"h\", \"e\", \"l\", \"l\", \"o\", \"\", \"s\", \"a\", \"y\"}  Output: []string{\"s\", \"a\", \"y\", \"\", \"h\", \"e\", \"l\", \"l\", \"o\", \"\", \"w\", \"o\", \"r\", \"l\", \"d\"}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to reversing string, use the same idea to reverse all the characters  in the list first so that we could have a list of words in the right order, not  its characters.- Iterate through the list again and reverse its characters.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/reverse_word_test.go\">Link to solution →</a></p><h3 id=\"4-merge-two-sorted-arrays\">4. Merge two sorted arrays.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 3, 5}, []int{2, 4, 6}  Output: []int{1, 2, 3, 4, 5, 6}- Input: []int{1, 3, 5}, []int{2, 4, 6, 7}  Output: []int{1, 2, 3, 4, 5, 6, 7}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Since these arrays are sorted, can use two pointers approach to iterate  through both of them and append the smaller value to a new merged list at  each step.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/merge_sorted_arrays_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "/2019/08/21/interviewcake-array-string-manipulation",
            
            
            
            "tags": ["interviewcake","algorithm"],
            
            "date_published": "2019-08-21T00:00:00-04:00",
            "date_modified": "2019-08-21T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/06/14/baremetrics",
            "title": "Josh Pigford, Baremetrics, $70k/month",
            "summary": null,
            "content_text": "What is the product?Subscription analytics and insights.What is its current revenue?$14k/month after 6 months, $70K/month in 2017, $120k/month now.What is the business model?Subscription.How did the founder come up with their idea?  Was running 2 other SaaS products in the survey space and needed thesenumbers himself: monthly recurring revenue, lifetime value, churn,… Therewas no anything great that existed then.How did they know it was the right one?  Realized that there was a pretty big need from talking to other SaaS friends.  Launched the first version in November 2013 and it was clear by February thatthere was a much larger opportunity. Focused 100% on it.What did it take to get the initial product out the door?  Vanilla Rails app, hosted on Heroku, just one big monolithic app.  Later spent a lot of money running background jobs so that he did not have tospend time on infrastructure!How did they get their first paying customers?  Used Twitter connections to push for it, though he only had than 1k followersthen.  Start reaching out to random people he knew and they shared it.  Sold to a $250/month customer in 8 days.  Advised to have someone start using the product right away and try to have thempay for it, instead of getting stuck in the testing phase (building email list,building a landing page,…)  Later wrote useful, educational content on the blog.References:  Launching Your Product and Finding Customers Immediately with Josh Pigford of Baremetrics",
            "content_html": "<h3 id=\"what-is-the-product\">What is the product?</h3><p>Subscription analytics and insights.</p><h3 id=\"what-is-its-current-revenue\">What is its current revenue?</h3><p>$14k/month after 6 months, $70K/month in 2017, $120k/month now.</p><h3 id=\"what-is-the-business-model\">What is the business model?</h3><p>Subscription.</p><h3 id=\"how-did-the-founder-come-up-with-their-idea\">How did the founder come up with their idea?</h3><ul>  <li>Was running 2 other SaaS products in the survey space and needed thesenumbers himself: monthly recurring revenue, lifetime value, churn,… Therewas no anything great that existed then.</li></ul><h3 id=\"how-did-they-know-it-was-the-right-one\">How did they know it was the right one?</h3><ul>  <li>Realized that there was a pretty big need from talking to other SaaS friends.</li>  <li>Launched the first version in November 2013 and it was clear by February thatthere was a much larger opportunity. Focused 100% on it.</li></ul><h3 id=\"what-did-it-take-to-get-the-initial-product-out-the-door\">What did it take to get the initial product out the door?</h3><ul>  <li>Vanilla Rails app, hosted on Heroku, just one big monolithic app.</li>  <li>Later spent a lot of money running background jobs so that he did not have tospend time on infrastructure!</li></ul><h3 id=\"how-did-they-get-their-first-paying-customers\">How did they get their first paying customers?</h3><ul>  <li>Used Twitter connections to push for it, though he only had than 1k followersthen.</li>  <li>Start reaching out to random people he knew and they shared it.</li>  <li>Sold to a $250/month customer in 8 days.</li>  <li>Advised to have someone start using the product right away and try to have thempay for it, instead of getting stuck in the testing phase (building email list,building a landing page,…)</li>  <li>Later wrote useful, educational content on the blog.</li></ul><p><br /></p><p>References:</p><ul>  <li><a href=\"https://www.indiehackers.com/podcast/006-josh-pigford-of-baremetrics\">Launching Your Product and Finding Customers Immediately with Josh Pigford of Baremetrics</a></li></ul>",
            "url": "/2019/06/14/baremetrics",
            
            
            
            "tags": ["early-days","indiehackers"],
            
            "date_published": "2019-06-14T00:00:00-04:00",
            "date_modified": "2019-06-14T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/06/13/sifter",
            "title": "Garrett Dimon, Sifter",
            "summary": null,
            "content_text": "What is the product?Bug tracker for small teams and non-technical people.What is the business model?Subscription.How did the founder come up with their idea?  Was doing a lot of consulting work and found one of his biggeststruggles was getting his non-technical clients to participate withthe issue tracking, especially with small teams.  After sharing the ideas around, peopled started expressing interests andencouraged him to do something like that.How did they know it was the right one?  It was clear that people showed interests in the beginning and wanted to usesomething like that.What did it take to get the initial product out the door?  Had a simple Rails MySQL setup, built a billing system himself because Stripewas not there yet and Braintree was not so good. Took 11 months in total.How did they get their first paying customers?  People expressed interests and came to him in the first place.  He kept blogging and sharing.References:  Succeeding in a Crowded Market by Building a Niche Business with GarrettDimon of Sifter",
            "content_html": "<h3 id=\"what-is-the-product\">What is the product?</h3><p>Bug tracker for small teams and non-technical people.</p><h3 id=\"what-is-the-business-model\">What is the business model?</h3><p>Subscription.</p><h3 id=\"how-did-the-founder-come-up-with-their-idea\">How did the founder come up with their idea?</h3><ul>  <li>Was doing a lot of consulting work and found one of his biggeststruggles was getting his non-technical clients to participate withthe issue tracking, especially with small teams.</li>  <li>After sharing the ideas around, peopled started expressing interests andencouraged him to do something like that.</li></ul><h3 id=\"how-did-they-know-it-was-the-right-one\">How did they know it was the right one?</h3><ul>  <li>It was clear that people showed interests in the beginning and wanted to usesomething like that.</li></ul><h3 id=\"what-did-it-take-to-get-the-initial-product-out-the-door\">What did it take to get the initial product out the door?</h3><ul>  <li>Had a simple Rails MySQL setup, built a billing system himself because Stripewas not there yet and Braintree was not so good. Took 11 months in total.</li></ul><h3 id=\"how-did-they-get-their-first-paying-customers\">How did they get their first paying customers?</h3><ul>  <li>People expressed interests and came to him in the first place.</li>  <li>He kept blogging and sharing.</li></ul><p><br /></p><p>References:</p><ul>  <li><a href=\"https://www.indiehackers.com/podcast/004-garrett-dimon-of-sifter\">Succeeding in a Crowded Market by Building a Niche Business with GarrettDimon of Sifter</a></li></ul>",
            "url": "/2019/06/13/sifter",
            
            
            
            "tags": ["early-days","indiehackers"],
            
            "date_published": "2019-06-13T00:00:00-04:00",
            "date_modified": "2019-06-13T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/06/12/instapainting",
            "title": "Chris Chen, Instapainting, $32k/month",
            "summary": null,
            "content_text": "What is the product?Custom painting by actual artists, delivered to your shipping address.What is its current revenue?$32k a month.What is the business model?Direct sale.How did the founder come up with their idea?  Raised money from YC after YC, spent about 2 years pivoting and tryingdifferent ideas. Focused on how to generate revenue immediately because hewas running low on cash.  Saw several sites were doing the same things but with oil paintings.Introduced a more modern, cheaper, mixed media product.How did they know it was the right one?  It generated revenue immediately after trying to sell on r/startupssubreddit.What did it take to get the initial product out the door?  Found one supplier that could do the work.  The very first artists were his roommates.  Had a basic interface for artist to check the order and manually brokered andmanaged transaction. Had to email back and forth because there was nomessaging system in place yet.  Barely managed to ship on time so even had to do the painting himself.  Replied to email in timely fashion. Took great care of customers.How did they get their first paying customers?  Tried to sell on r/startups subreddit, targeting gifts around New Year time.  3 months later got a TechCrunch article, then Hacker News.  Optimized for SEO.  Did some cool content marketing strategies such as: making a robot toreplicate artist’s painting, making a 2-player version of 2048 and havingfeatured on top of Hacker News,…References:  Fueling Growth with SEO and Content Marketing with Chris Chen of Instapainting",
            "content_html": "<h3 id=\"what-is-the-product\">What is the product?</h3><p>Custom painting by actual artists, delivered to your shipping address.</p><h3 id=\"what-is-its-current-revenue\">What is its current revenue?</h3><p>$32k a month.</p><h3 id=\"what-is-the-business-model\">What is the business model?</h3><p>Direct sale.</p><h3 id=\"how-did-the-founder-come-up-with-their-idea\">How did the founder come up with their idea?</h3><ul>  <li>Raised money from YC after YC, spent about 2 years pivoting and tryingdifferent ideas. Focused on how to generate revenue immediately because hewas running low on cash.</li>  <li>Saw several sites were doing the same things but with oil paintings.Introduced a more modern, cheaper, mixed media product.</li></ul><h3 id=\"how-did-they-know-it-was-the-right-one\">How did they know it was the right one?</h3><ul>  <li>It generated revenue immediately after trying to sell on r/startupssubreddit.</li></ul><h3 id=\"what-did-it-take-to-get-the-initial-product-out-the-door\">What did it take to get the initial product out the door?</h3><ul>  <li>Found one supplier that could do the work.</li>  <li>The very first artists were his roommates.</li>  <li>Had a basic interface for artist to check the order and manually brokered andmanaged transaction. Had to email back and forth because there was nomessaging system in place yet.</li>  <li>Barely managed to ship on time so even had to do the painting himself.</li>  <li>Replied to email in timely fashion. Took great care of customers.</li></ul><h3 id=\"how-did-they-get-their-first-paying-customers\">How did they get their first paying customers?</h3><ul>  <li>Tried to sell on r/startups subreddit, targeting gifts around New Year time.</li>  <li>3 months later got a TechCrunch article, then Hacker News.</li>  <li>Optimized for SEO.</li>  <li>Did some cool content marketing strategies such as: making a robot toreplicate artist’s painting, making a 2-player version of 2048 and havingfeatured on top of Hacker News,…</li></ul><p><br /></p><p>References:</p><ul>  <li><a href=\"https://www.indiehackers.com/podcast/002-chris-chen-of-instapainting\">Fueling Growth with SEO and Content Marketing with Chris Chen of Instapainting</a></li></ul>",
            "url": "/2019/06/12/instapainting",
            
            
            
            "tags": ["early-days","indiehackers"],
            
            "date_published": "2019-06-12T00:00:00-04:00",
            "date_modified": "2019-06-12T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/06/11/gorails",
            "title": "Chris Oliver, GoRails, $15k/month",
            "summary": null,
            "content_text": "What is the product?Education site for Ruby on Rails developers.What is its current revenue?$15k a month.What is the business model?Subscription.How did the founder come up with their idea?  Was working as a Ruby on Rails consultant for many businesses and startups.Got tired of trading my time for money then decided to document Rails practicesand turned them into a product.  Published content for a year before launching paid courses.  Collected email addresses along the way. Also built a forum to ask/answerquestions publicly.How did they know it was the right one?  Generated thousand visitors the first month by documenting some free guideson the blog, then decided to keep going because there was need.What did it take to get the initial product out the door?  Took 5 month to plan, record, edit screencasts for the first 2 courses.  Setup Stripe and Wistia himself.How did they get their first paying customers?  Launched and got 1 sale a week, 9 sales after 2 months.  Decided to use subscription model with weekly screencasts instead. Got 14subscribers the second day.References:  Rails and Revenue: How to Build a Screencast Business",
            "content_html": "<h3 id=\"what-is-the-product\">What is the product?</h3><p>Education site for Ruby on Rails developers.</p><h3 id=\"what-is-its-current-revenue\">What is its current revenue?</h3><p>$15k a month.</p><h3 id=\"what-is-the-business-model\">What is the business model?</h3><p>Subscription.</p><h3 id=\"how-did-the-founder-come-up-with-their-idea\">How did the founder come up with their idea?</h3><ul>  <li>Was working as a Ruby on Rails consultant for many businesses and startups.Got tired of trading my time for money then decided to document Rails practicesand turned them into a product.</li>  <li>Published content for a year before launching paid courses.</li>  <li>Collected email addresses along the way. Also built a forum to ask/answerquestions publicly.</li></ul><h3 id=\"how-did-they-know-it-was-the-right-one\">How did they know it was the right one?</h3><ul>  <li>Generated thousand visitors the first month by documenting some free guideson the blog, then decided to keep going because there was need.</li></ul><h3 id=\"what-did-it-take-to-get-the-initial-product-out-the-door\">What did it take to get the initial product out the door?</h3><ul>  <li>Took 5 month to plan, record, edit screencasts for the first 2 courses.</li>  <li>Setup Stripe and Wistia himself.</li></ul><h3 id=\"how-did-they-get-their-first-paying-customers\">How did they get their first paying customers?</h3><ul>  <li>Launched and got 1 sale a week, 9 sales after 2 months.</li>  <li>Decided to use subscription model with weekly screencasts instead. Got 14subscribers the second day.</li></ul><p><br /></p><p>References:</p><ul>  <li><a href=\"https://www.indiehackers.com/interview/rails-and-revenue-how-to-build-a-screencast-business-8999c7ac7f\">Rails and Revenue: How to Build a Screencast Business</a></li></ul>",
            "url": "/2019/06/11/gorails",
            
            
            
            "tags": ["early-days","indiehackers"],
            
            "date_published": "2019-06-11T00:00:00-04:00",
            "date_modified": "2019-06-11T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/06/10/submithub",
            "title": "Jason Grishkoff, SubmitHub, $50k/month",
            "summary": null,
            "content_text": "What is the product?Allow musicians to connect with industry professionals.What is its current revenue?$50k a month.What is the business model?  Free/premium credit.How did the founder come up with their idea?  Found Indie Shuffle blog that features good indie music. Realized that themore content on the blog, the more traffic it attracted. Hence, pushed out2-3 articles a day in the beginning then paid people to do so. Hit a pointwhere there were 10 articles a day.  Got attention from musicians themselves and started to connect with them tofeature their music.  Built SubmitHub for people to submit their requests instead of using emails.  Later expanded to a service to help musicians with industry professionals.How did they know it was the right one?  He knew it when musicians contacted him and wanted to submit their music too.What did it take to get the initial product out the door?  Had to learn coding by himself.  Had to talk to a lot of blogs and labels.How did they get their first paying customers?  Many musicians turned into customers.References:  Building an Audience and Being Scrappy with Jason Grishkoff of SubmitHub",
            "content_html": "<h3 id=\"what-is-the-product\">What is the product?</h3><p>Allow musicians to connect with industry professionals.</p><h3 id=\"what-is-its-current-revenue\">What is its current revenue?</h3><p>$50k a month.</p><h3 id=\"what-is-the-business-model\">What is the business model?</h3><ul>  <li>Free/premium credit.</li></ul><h3 id=\"how-did-the-founder-come-up-with-their-idea\">How did the founder come up with their idea?</h3><ul>  <li>Found Indie Shuffle blog that features good indie music. Realized that themore content on the blog, the more traffic it attracted. Hence, pushed out2-3 articles a day in the beginning then paid people to do so. Hit a pointwhere there were 10 articles a day.</li>  <li>Got attention from musicians themselves and started to connect with them tofeature their music.</li>  <li>Built SubmitHub for people to submit their requests instead of using emails.</li>  <li>Later expanded to a service to help musicians with industry professionals.</li></ul><h3 id=\"how-did-they-know-it-was-the-right-one\">How did they know it was the right one?</h3><ul>  <li>He knew it when musicians contacted him and wanted to submit their music too.</li></ul><h3 id=\"what-did-it-take-to-get-the-initial-product-out-the-door\">What did it take to get the initial product out the door?</h3><ul>  <li>Had to learn coding by himself.</li>  <li>Had to talk to a lot of blogs and labels.</li></ul><h3 id=\"how-did-they-get-their-first-paying-customers\">How did they get their first paying customers?</h3><ul>  <li>Many musicians turned into customers.</li></ul><p><br /></p><p>References:</p><ul>  <li><a href=\"https://www.indiehackers.com/podcast/001-jason-grishkoff-of-submithub\">Building an Audience and Being Scrappy with Jason Grishkoff of SubmitHub</a></li></ul>",
            "url": "/2019/06/10/submithub",
            
            
            
            "tags": ["early-days","indiehackers"],
            
            "date_published": "2019-06-10T00:00:00-04:00",
            "date_modified": "2019-06-10T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/06/09/scalable-press",
            "title": "Eric Zhang, Scalable Press, $100m/year",
            "summary": null,
            "content_text": "What is the product?Efficient custom printing on demand - lower cost, better quality, betterturnaround time.What is its current revenue?$100 millions a year.What is the business model?Manufacture.How did the founder come up with their idea?  Had a friend, Raymond, who sold T-shirt online. He was a high schoolstudent until he dropped out because he had made $1 millions in revenue.  He did contracts with a Chinese factory at first, but wanted to improvethe product quality and used a US factory instead.  Eric later joined to build their own printing infrastructure to a evenmore automated, cheaper, efficient process.How did they know it was the right one?  The T-shirt space was booming at that time, notably Teespring.  They were doing alright and wanting to do it better,faster, and cheaper with their brand TeepChip.What did it take to get the initial product out the door?  Built the printing API first.  Used profits to reinvest into the business then built the software team.  Every step of the decision was made frugally because they did not have a lotof capital.How did they get their first paying customers?  Had people signed up early for the API, a lot from Hacker News. A lot of themturned into customers.References:  How to Execute Well and Beat the Competition with Eric Zhang of Scalable Press",
            "content_html": "<h3 id=\"what-is-the-product\">What is the product?</h3><p>Efficient custom printing on demand - lower cost, better quality, betterturnaround time.</p><h3 id=\"what-is-its-current-revenue\">What is its current revenue?</h3><p>$100 millions a year.</p><h3 id=\"what-is-the-business-model\">What is the business model?</h3><p>Manufacture.</p><h3 id=\"how-did-the-founder-come-up-with-their-idea\">How did the founder come up with their idea?</h3><ul>  <li>Had a friend, Raymond, who sold T-shirt online. He was a high schoolstudent until he dropped out because he had made $1 millions in revenue.</li>  <li>He did contracts with a Chinese factory at first, but wanted to improvethe product quality and used a US factory instead.</li>  <li>Eric later joined to build their own printing infrastructure to a evenmore automated, cheaper, efficient process.</li></ul><h3 id=\"how-did-they-know-it-was-the-right-one\">How did they know it was the right one?</h3><ul>  <li>The T-shirt space was booming at that time, notably Teespring.</li>  <li>They were doing alright and wanting to do it better,faster, and cheaper with their brand TeepChip.</li></ul><h3 id=\"what-did-it-take-to-get-the-initial-product-out-the-door\">What did it take to get the initial product out the door?</h3><ul>  <li>Built the printing API first.</li>  <li>Used profits to reinvest into the business then built the software team.</li>  <li>Every step of the decision was made frugally because they did not have a lotof capital.</li></ul><h3 id=\"how-did-they-get-their-first-paying-customers\">How did they get their first paying customers?</h3><ul>  <li>Had people signed up early for the API, a lot from Hacker News. A lot of themturned into customers.</li></ul><p><br /></p><p>References:</p><ul>  <li><a href=\"https://www.indiehackers.com/podcast/101-eric-zhang-of-scalable-press\">How to Execute Well and Beat the Competition with Eric Zhang of Scalable Press</a></li></ul>",
            "url": "/2019/06/09/scalable-press",
            
            
            
            "tags": ["early-days","indiehackers"],
            
            "date_published": "2019-06-09T00:00:00-04:00",
            "date_modified": "2019-06-09T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/06/08/grasshopper",
            "title": "David Hauser, Grasshopper, $32m/year",
            "summary": null,
            "content_text": "What is the product?Virtual phone system.What is its current revenue?$32 millions a year.What is the business model?Subscription.How did the founder come up with their idea?  Could not find a good solution for handling inbound calls professionally.  Started right away, developed the software started selling as quickly as possible.  Became profitable after 3 months.How did they know it was the right one?  They have learned a lot over the years starting their own businesses so they knew there was a need.  They were good at targeting the right group because of their experiences.What did it take to get the initial product out the door?  Had almost no money so aimed to get revenue as quickly as possible.  Used funding from other ventures and borrowing from friends and relatives.  Did a lot of of coding himself.How did they get their first paying customers?  There was no social media, PPC or AdWords back then.  Bought keyword traffic from Omnitrure, used organic SEO, though he said thesetatics wouldn’t work today. Basically test as many channels as possible, andget feedbacks quickly.References:  Bootstrapping a SaaS Business to $30,000,000/year with David Hauser of Grasshopper",
            "content_html": "<h3 id=\"what-is-the-product\">What is the product?</h3><p>Virtual phone system.</p><h3 id=\"what-is-its-current-revenue\">What is its current revenue?</h3><p>$32 millions a year.</p><h3 id=\"what-is-the-business-model\">What is the business model?</h3><p>Subscription.</p><h3 id=\"how-did-the-founder-come-up-with-their-idea\">How did the founder come up with their idea?</h3><ul>  <li>Could not find a good solution for handling inbound calls professionally.</li>  <li>Started right away, developed the software started selling as quickly as possible.</li>  <li>Became profitable after 3 months.</li></ul><h3 id=\"how-did-they-know-it-was-the-right-one\">How did they know it was the right one?</h3><ul>  <li>They have learned a lot over the years starting their own businesses so they knew there was a need.</li>  <li>They were good at targeting the right group because of their experiences.</li></ul><h3 id=\"what-did-it-take-to-get-the-initial-product-out-the-door\">What did it take to get the initial product out the door?</h3><ul>  <li>Had almost no money so aimed to get revenue as quickly as possible.</li>  <li>Used funding from other ventures and borrowing from friends and relatives.</li>  <li>Did a lot of of coding himself.</li></ul><h3 id=\"how-did-they-get-their-first-paying-customers\">How did they get their first paying customers?</h3><ul>  <li>There was no social media, PPC or AdWords back then.</li>  <li>Bought keyword traffic from Omnitrure, used organic SEO, though he said thesetatics wouldn’t work today. Basically test as many channels as possible, andget feedbacks quickly.</li></ul><p><br /></p><p>References:</p><ul>  <li><a href=\"https://www.indiehackers.com/podcast/003-david-hauser-of-grasshopper\">Bootstrapping a SaaS Business to $30,000,000/year with David Hauser of Grasshopper</a></li></ul>",
            "url": "/2019/06/08/grasshopper",
            
            
            
            "tags": ["early-days","indiehackers"],
            
            "date_published": "2019-06-08T00:00:00-04:00",
            "date_modified": "2019-06-08T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/06/07/convertkit",
            "title": "Nathan Barry, ConvertKit, $600k/month",
            "summary": null,
            "content_text": "What is the product?Email marketing tool for bloggers and content creators.What is its current revenue?5k to $600k a month in 2 years.What is the business model?Subscription.How did the founder come up with the idea?  Nathan used to design and write books on iOS and web app.  Was expert on email marketing and had built and grew his personal audiencethroughout the year.  One day he blogged about starting a SaaS company but had no idea to work on.Just basically set a public goal to hold accountability.  Came up with an idea to interview businesses in depth, tried to see whatproblems they were facing. But then decided to stay true to his problems -building a service that was better than Mailchimp.How did they know it was the right one?  Bunch of similar products were out there and had huge market shares.Still went for it because it showed there were needs and still rooms forimprovements.What did it take to get the initial product out the door?  Knew about 10 people who were good at email marketing. Asked them about theirfrustrations, tried to understand their why, asked if they would pay for a solution.  Came back after a month with a MVP and asked to buy it - started to get realfeedbacks, though only made 1 purchase though they all said yes.How did they get their first paying customers?  Through direct contact as above.  Also launch pre-sale programs.References:  Growing a $600,000/mo Business by Starting with Direct Sales with Nathan Barry of ConvertKit",
            "content_html": "<h3 id=\"what-is-the-product\">What is the product?</h3><p>Email marketing tool for bloggers and content creators.</p><h3 id=\"what-is-its-current-revenue\">What is its current revenue?</h3><p>5k to $600k a month in 2 years.</p><h3 id=\"what-is-the-business-model\">What is the business model?</h3><p>Subscription.</p><h3 id=\"how-did-the-founder-come-up-with-the-idea\">How did the founder come up with the idea?</h3><ul>  <li>Nathan used to design and write books on iOS and web app.</li>  <li>Was expert on email marketing and had built and grew his personal audiencethroughout the year.</li>  <li>One day he blogged about starting a SaaS company but had no idea to work on.Just basically set a public goal to hold accountability.</li>  <li>Came up with an idea to interview businesses in depth, tried to see whatproblems they were facing. But then decided to stay true to his problems -building a service that was better than Mailchimp.</li></ul><h3 id=\"how-did-they-know-it-was-the-right-one\">How did they know it was the right one?</h3><ul>  <li>Bunch of similar products were out there and had huge market shares.Still went for it because it showed there were needs and still rooms forimprovements.</li></ul><h3 id=\"what-did-it-take-to-get-the-initial-product-out-the-door\">What did it take to get the initial product out the door?</h3><ul>  <li>Knew about 10 people who were good at email marketing. Asked them about theirfrustrations, tried to understand their why, asked if they would pay for a solution.</li>  <li>Came back after a month with a MVP and asked to buy it - started to get realfeedbacks, though only made 1 purchase though they all said yes.</li></ul><h3 id=\"how-did-they-get-their-first-paying-customers\">How did they get their first paying customers?</h3><ul>  <li>Through direct contact as above.</li>  <li>Also launch pre-sale programs.</li></ul><p><br /></p><p>References:</p><ul>  <li><a href=\"https://www.indiehackers.com/podcast/008-nathan-barry-of-convertkit\">Growing a $600,000/mo Business by Starting with Direct Sales with Nathan Barry of ConvertKit</a></li></ul>",
            "url": "/2019/06/07/convertkit",
            
            
            
            "tags": ["early-days","indiehackers"],
            
            "date_published": "2019-06-07T00:00:00-04:00",
            "date_modified": "2019-06-07T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/06/06/earlyday",
            "title": "Early days of profitable internet businesses",
            "summary": null,
            "content_text": "I am interested in starting a company in the near future. I think the best wayto learn how to do so is to look at the early days of different profitable businesses,not when they’re already successful so that one can see how the foundersactually got started.Some of resources that I find helpful to obtain these informations are:  Indie HackersFor each company, here is a list of questions that I would like to start with:  What is the product?  What is its current revenue?  What is the business model?  How did the founder come up with the idea?  How did they know it was the right one?  What did it take to get the initial product out the door?  How did they get their first paying customers?That said, from now on, I will try to write up at least 1-3 articles on thistopic everyweek. They should all have the tag #early-days.Here is a sumary of my finding if anyone is interested →",
            "content_html": "<p>I am interested in starting a company in the near future. I think the best wayto learn how to do so is to look at the early days of different profitable businesses,not when they’re already successful so that one can see how the foundersactually got started.</p><p>Some of resources that I find helpful to obtain these informations are:</p><ul>  <li><a href=\"https://www.indiehackers.com\">Indie Hackers</a></li></ul><p>For each company, here is a list of questions that I would like to start with:</p><ul>  <li>What is the product?</li>  <li>What is its current revenue?</li>  <li>What is the business model?</li>  <li>How did the founder come up with the idea?</li>  <li>How did they know it was the right one?</li>  <li>What did it take to get the initial product out the door?</li>  <li>How did they get their first paying customers?</li></ul><p>That said, from now on, I will try to write up at least 1-3 articles on thistopic everyweek. They should all have the tag <a href=\"/tag/early-days\">#early-days</a>.</p><p><a href=\"/2019/06/06/earlyday-summary\">Here is a sumary of my finding if anyone is interested →</a></p>",
            "url": "/2019/06/06/earlyday",
            
            
            
            "tags": ["early-days","indiehackers"],
            
            "date_published": "2019-06-06T00:00:00-04:00",
            "date_modified": "2019-06-06T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "/2019/06/06/earlyday-summary",
            "title": "Early days of profitable internet businesses's summary",
            "summary": null,
            "content_text": "  Dive deep into the industry and take advantage of your domain expertise to identifythe “right” problems to work on.  Constantly launch/bootstrap products - as a lot of them have founded multiplebusinesses before and get their hand dirty on the business side of thing.  Actively seek for paying customers and TALK TO THEM, even before having aconcrete product. Focus on how to generate revenue immediately.  Blog to share your progress. Provide quality contents. Grow your audience.  Don’t get trapped in testing phase where all you do is collecting emails andbuilding lists… Hack a MVP and have actually customer use it then pay forit. This is the ultimate test.  Utilize social media to promote your products and get feedbacks.",
            "content_html": "<ul>  <li>Dive deep into the industry and take advantage of your domain expertise to identifythe “right” problems to work on.</li>  <li>Constantly launch/bootstrap products - as a lot of them have founded multiplebusinesses before and get their hand dirty on the business side of thing.</li>  <li>Actively seek for paying customers and TALK TO THEM, even before having aconcrete product. Focus on how to generate revenue immediately.</li>  <li>Blog to share your progress. Provide quality contents. Grow your audience.</li>  <li>Don’t get trapped in testing phase where all you do is collecting emails andbuilding lists… Hack a MVP and have actually customer use it then pay forit. This is the ultimate test.</li>  <li>Utilize social media to promote your products and get feedbacks.</li></ul>",
            "url": "/2019/06/06/earlyday-summary",
            
            
            
            "tags": ["early-days","indiehackers"],
            
            "date_published": "2019-06-06T00:00:00-04:00",
            "date_modified": "2019-06-06T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}