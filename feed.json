{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hoanh An",
    "home_page_url": "https://hoanhan101.github.io/",
    "feed_url": "https://hoanhan101.github.io/feed.json",
    "description": "Hoanh An's personal website",
    "icon": "https://hoanhan101.github.io/apple-touch-icon.png",
    "favicon": "https://hoanhan101.github.io/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Hoanh An",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://hoanhan101.github.io/2020/04/26/guide-to-the-good-life",
            "title": "William Braxton Irvine, A Guide to the Good Life",
            "summary": null,
            "content_text": "  What is a good life according to Stoicism?          Having a good life is not about making a good living, aka having a high-paying job since one could hate the job or have conflicting thoughts about its moral.      A person must be virtuous in order to have a good life.                  A person’s virtue depends on their excellence as a human being, how well one performs the function for which humans were designed.                          A virtuous hammer is one that can drive nails well, a virtuous scissors is one that can cut well.                                To be virtuous is to live as we were designed to live, that is to reason, to do certain things, to have certain duties. For example, one of which is the social duty that is to honor our parents, be agreeable to our friends,…                      Psychological techniques to practice Stoicism for attaining a good life:          Negative visualization:                  Bad things happen, no matter how hard we try to prevent them. Assuming we will always be able to enjoy things we value causes us distress when they are taken from us.          We are unhappy largely because we’re insatiable. After working hard for what we desire, we quickly get bored, dissatisfied, take things for granted and eventually chase new desire.                          Consumer purchase: longing for a new TV, laptop, phone after buying one several weeks ago              Job: wanting higher pay, new workplace, new boss after landing the job of our dreams              Relationship: fantasizing about starting a new relationship after marriage                                The solution is to forestall the adaptation process, even better reverse it so that we stop taking things for granted and desire what we already have.                          Image that we have lost the things we value, our wife has left, our relatives and friends were death, we lost our job, our house, our money and so on.              As we go about our day, reflect periodically that we will not live forever and this day could be our last. The goal is not to change our activities but our state of mind that we carry out these activities and appreciate today.                                Most of us are already living the dream, having a wonderful partner, a dream job, a good car though we take things for granted other than delighting in them. Some are less fortunate, still the practice of negative still can be applied.          Being satisfied with what we’ve got doesn’t mean we shouldn’t seek certain things in life or strive to become better.                    Trichotomy of control:                  There are things over which we have:                          Complete control: goals we set for ourself, opinions and values we form              No control: whether the sun will rise tomorrow              Some but not complete control: whether we will win a competition or become a millionaire though we try really hard for it                                We should not concern ourselves with things that we have no control of.          If we want things that we have less or no control, we will sometimes fail to get what we want, be upset and anxious about it.          A strategy to deal with things that we have less or no control is to be careful about the goals and values that we form.                          Instead of setting a goal to win a competition, which we only have partial control, set a goal to do our best in the match, which we have complete control.              We’ll free ourself from frustration or disappointment if we lose.                                          Fatalism:                  We must learn to welcome whatever comes to us and trust that it happens is for the best.          We have no control of the past as well as the present (this very moment). That said, we’re wasting time worrying about past and present events.          Instead of wishing it could be different, embrace it.                    Self-denial (extension of negative visualization):                  Besides contemplating bad things happening, we should sometimes live as if they had happened, cause ourselves to experience discomfort that we could have avoided (experience cold weather even though clothes are at hand).          Benefits of voluntary discomfort:                          Harden ourselves against misfortune that might happen in the future.              Grow confident that we can withstand major discomfort.              Help us appreciate what we have.                                Besides practicing voluntary discomfort, we should sometimes forgo opportunities to experience pleasure, choose not to do things that make us feel good (eating carb and sugar).          Willpower is like muscle power: the more exercise, the stronger they are; the more will power we have, the more self-control and courage we have.                    Meditation:                  On the events of daily living at bedtime:                          Did something disrupt our tranquility?              Did we experience anger/envy/lust?              Is there something that I could avoid?                                On our Stoic progress:                          Do we periodically engage in negative visualization?              Do we take time to distinguish between these things over which we have control, less and no control?              Are we careful to initialize our goals?              Have we refrained from dwelling on the past and instead focused our attention on the future?              Have we consciously practiced acts of self-denial?                                            Advice on daily living:          How to think about social duty:                  We were designed to live among other people and interact with them in a manner that is advantageous.          To fulfill this social duty, we must feel a concern for all humankind, to do good and bear with them.                    How to preserve tranquility while interacting with other people:                  We can’t be selective in doing our social duty (dealing with annoying, misguided people) though we can be selective about whom we befriend, ones that share our values.          When dealing with annoying people, keep in mind that there are people that find us annoying as well so that we can also reflect on our shortcomings and become more empathetic to others’ faults.          Due to fatalism, we should operate on the assumption that annoying people are fated to behave that way and it’s expectable (though they can be changed of course).          The risk in dealing with annoying people is that they will make us hate them, though that only makes us more like them. The best revenge is to refuse to do so.                    How to deal with insult:                  What upsets us is not things themselves but our judgments about these things.          When insulted, pause and consider if what the insulter said is true, how well-inform the insulter is, or if we respect him.                          If it’s true or we respect the insulter, we should reflect on ourselves and strive to be better.              If not, we should feel relived because it’s the right thing to do as we don’t need their approval.                                  If a dog barks us, we don’t be upset by the fact that he might dislike us.                                                              One of the best way to respond to insult is with humor, especially self-deprecating jokes. Another way is with no response.                          By not responding to the insulter, we are robbing him the pleasure of having upset us which is likely to make him upset as a result.              Also, no one wants to be ignored and the insulter is likely to feel humiliated then.                                          How to respond to the death:                  It’s not possible to eliminate grief but possible to minimize the amount of grief we experience in our life.          One strategy that is mentioned above is negative visualization.          Remember that the person whose death that we’re grieving wouldn’t want us to be tortured with tears.                    How to overcome anger/anti-joy:                  We should fight our tendency to believe the worst about other and our tendency to jump to conclusion about their motivations.          Things that anger us generally don’t do us any real harm. Sometimes things that we think are important are actually are not that important.          Humor can help if we choose to think that bad things happening to us is funny and amusing.          When angry, force ourselves to relax our face, soften our voice, slow our pace of walking and so on.                    How to think about fame:                  If we seek social status, we give other people power over us in a sense that we have to do things that make them admire us. In other words, we will have enslaved ourselves.          We should be confident about ourselves and our values and ignore what people think of us.                    How to think about wealth/luxurious living:                  There’s a danger that if we’re exposed to a luxurious lifestyle, we will lose our ability to take delight in simple things.                          We become harder to please.              Our standards are constantly getting higher as we want nothing but the best.              Once it starts, it’s difficult to stop.                                Luxurious lifestyle is harder to maintain and keep up with.          People who achieve luxurious lifestyle are rarely satisfied or happy since they will only learn that they crave even more luxury.          Even though a Stoic doesn’t pursue wealth, they nevertheless acquire it. It’s acceptable for them to enjoy wealth, as long as they are careful not to cling to it. Also, by the practice of negative visualization, they should be prepared as their wealth can be taken away from them anytime.                    References:  https://www.goodreads.com/book/show/5617966-a-guide-to-the-good-life",
            "content_html": "<ul>  <li>What is a good life according to Stoicism?    <ul>      <li>Having a good life is not about making a good living, aka having a high-paying job since one could hate the job or have conflicting thoughts about its moral.</li>      <li>A person must be virtuous in order to have a good life.        <ul>          <li>A person’s virtue depends on their excellence as a human being, how well one performs the function for which humans were designed.            <ul>              <li>A virtuous hammer is one that can drive nails well, a virtuous scissors is one that can cut well.</li>            </ul>          </li>          <li>To be virtuous is to live as we were designed to live, that is to reason, to do certain things, to have certain duties. For example, one of which is the social duty that is to honor our parents, be agreeable to our friends,…</li>        </ul>      </li>    </ul>  </li>  <li>Psychological techniques to practice Stoicism for attaining a good life:    <ul>      <li>Negative visualization:        <ul>          <li>Bad things happen, no matter how hard we try to prevent them. Assuming we will always be able to enjoy things we value causes us distress when they are taken from us.</li>          <li>We are unhappy largely because we’re insatiable. After working hard for what we desire, we quickly get bored, dissatisfied, take things for granted and eventually chase new desire.            <ul>              <li>Consumer purchase: longing for a new TV, laptop, phone after buying one several weeks ago</li>              <li>Job: wanting higher pay, new workplace, new boss after landing the job of our dreams</li>              <li>Relationship: fantasizing about starting a new relationship after marriage</li>            </ul>          </li>          <li>The solution is to forestall the adaptation process, even better reverse it so that we stop taking things for granted and desire what we already have.            <ul>              <li>Image that we have lost the things we value, our wife has left, our relatives and friends were death, we lost our job, our house, our money and so on.</li>              <li>As we go about our day, reflect periodically that we will not live forever and this day could be our last. The goal is not to change our activities but our state of mind that we carry out these activities and appreciate today.</li>            </ul>          </li>          <li>Most of us are already living the dream, having a wonderful partner, a dream job, a good car though we take things for granted other than delighting in them. Some are less fortunate, still the practice of negative still can be applied.</li>          <li>Being satisfied with what we’ve got doesn’t mean we shouldn’t seek certain things in life or strive to become better.</li>        </ul>      </li>      <li>Trichotomy of control:        <ul>          <li>There are things over which we have:            <ul>              <li>Complete control: goals we set for ourself, opinions and values we form</li>              <li>No control: whether the sun will rise tomorrow</li>              <li>Some but not complete control: whether we will win a competition or become a millionaire though we try really hard for it</li>            </ul>          </li>          <li>We should not concern ourselves with things that we have no control of.</li>          <li>If we want things that we have less or no control, we will sometimes fail to get what we want, be upset and anxious about it.</li>          <li>A strategy to deal with things that we have less or no control is to be careful about the goals and values that we form.            <ul>              <li>Instead of setting a goal to win a competition, which we only have partial control, set a goal to do our best in the match, which we have complete control.</li>              <li>We’ll free ourself from frustration or disappointment if we lose.</li>            </ul>          </li>        </ul>      </li>      <li>Fatalism:        <ul>          <li>We must learn to welcome whatever comes to us and trust that it happens is for the best.</li>          <li>We have no control of the past as well as the present (this very moment). That said, we’re wasting time worrying about past and present events.</li>          <li>Instead of wishing it could be different, embrace it.</li>        </ul>      </li>      <li>Self-denial (extension of negative visualization):        <ul>          <li>Besides contemplating bad things happening, we should sometimes live as if they had happened, cause ourselves to experience discomfort that we could have avoided (experience cold weather even though clothes are at hand).</li>          <li>Benefits of voluntary discomfort:            <ul>              <li>Harden ourselves against misfortune that might happen in the future.</li>              <li>Grow confident that we can withstand major discomfort.</li>              <li>Help us appreciate what we have.</li>            </ul>          </li>          <li>Besides practicing voluntary discomfort, we should sometimes forgo opportunities to experience pleasure, choose not to do things that make us feel good (eating carb and sugar).</li>          <li>Willpower is like muscle power: the more exercise, the stronger they are; the more will power we have, the more self-control and courage we have.</li>        </ul>      </li>      <li>Meditation:        <ul>          <li>On the events of daily living at bedtime:            <ul>              <li>Did something disrupt our tranquility?</li>              <li>Did we experience anger/envy/lust?</li>              <li>Is there something that I could avoid?</li>            </ul>          </li>          <li>On our Stoic progress:            <ul>              <li>Do we periodically engage in negative visualization?</li>              <li>Do we take time to distinguish between these things over which we have control, less and no control?</li>              <li>Are we careful to initialize our goals?</li>              <li>Have we refrained from dwelling on the past and instead focused our attention on the future?</li>              <li>Have we consciously practiced acts of self-denial?</li>            </ul>          </li>        </ul>      </li>    </ul>  </li>  <li>Advice on daily living:    <ul>      <li>How to think about social duty:        <ul>          <li>We were designed to live among other people and interact with them in a manner that is advantageous.</li>          <li>To fulfill this social duty, we must feel a concern for all humankind, to do good and bear with them.</li>        </ul>      </li>      <li>How to preserve tranquility while interacting with other people:        <ul>          <li>We can’t be selective in doing our social duty (dealing with annoying, misguided people) though we can be selective about whom we befriend, ones that share our values.</li>          <li>When dealing with annoying people, keep in mind that there are people that find us annoying as well so that we can also reflect on our shortcomings and become more empathetic to others’ faults.</li>          <li>Due to fatalism, we should operate on the assumption that annoying people are fated to behave that way and it’s expectable (though they can be changed of course).</li>          <li>The risk in dealing with annoying people is that they will make us hate them, though that only makes us more like them. The best revenge is to refuse to do so.</li>        </ul>      </li>      <li>How to deal with insult:        <ul>          <li>What upsets us is not things themselves but our judgments about these things.</li>          <li>When insulted, pause and consider if what the insulter said is true, how well-inform the insulter is, or if we respect him.            <ul>              <li>If it’s true or we respect the insulter, we should reflect on ourselves and strive to be better.</li>              <li>If not, we should feel relived because it’s the right thing to do as we don’t need their approval.                <ul>                  <li>If a dog barks us, we don’t be upset by the fact that he might dislike us.</li>                </ul>              </li>            </ul>          </li>          <li>One of the best way to respond to insult is with humor, especially self-deprecating jokes. Another way is with no response.            <ul>              <li>By not responding to the insulter, we are robbing him the pleasure of having upset us which is likely to make him upset as a result.</li>              <li>Also, no one wants to be ignored and the insulter is likely to feel humiliated then.</li>            </ul>          </li>        </ul>      </li>      <li>How to respond to the death:        <ul>          <li>It’s not possible to eliminate grief but possible to minimize the amount of grief we experience in our life.</li>          <li>One strategy that is mentioned above is negative visualization.</li>          <li>Remember that the person whose death that we’re grieving wouldn’t want us to be tortured with tears.</li>        </ul>      </li>      <li>How to overcome anger/anti-joy:        <ul>          <li>We should fight our tendency to believe the worst about other and our tendency to jump to conclusion about their motivations.</li>          <li>Things that anger us generally don’t do us any real harm. Sometimes things that we think are important are actually are not that important.</li>          <li>Humor can help if we choose to think that bad things happening to us is funny and amusing.</li>          <li>When angry, force ourselves to relax our face, soften our voice, slow our pace of walking and so on.</li>        </ul>      </li>      <li>How to think about fame:        <ul>          <li>If we seek social status, we give other people power over us in a sense that we have to do things that make them admire us. In other words, we will have enslaved ourselves.</li>          <li>We should be confident about ourselves and our values and ignore what people think of us.</li>        </ul>      </li>      <li>How to think about wealth/luxurious living:        <ul>          <li>There’s a danger that if we’re exposed to a luxurious lifestyle, we will lose our ability to take delight in simple things.            <ul>              <li>We become harder to please.</li>              <li>Our standards are constantly getting higher as we want nothing but the best.</li>              <li>Once it starts, it’s difficult to stop.</li>            </ul>          </li>          <li>Luxurious lifestyle is harder to maintain and keep up with.</li>          <li>People who achieve luxurious lifestyle are rarely satisfied or happy since they will only learn that they crave even more luxury.</li>          <li>Even though a Stoic doesn’t pursue wealth, they nevertheless acquire it. It’s acceptable for them to enjoy wealth, as long as they are careful not to cling to it. Also, by the practice of negative visualization, they should be prepared as their wealth can be taken away from them anytime.</li>        </ul>      </li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/5617966-a-guide-to-the-good-life\">https://www.goodreads.com/book/show/5617966-a-guide-to-the-good-life</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/04/26/guide-to-the-good-life",
            
            
            
            "tags": ["book","stoic","happiness","meaning","life","death","wealth"],
            
            "date_published": "2020-04-26T00:00:00-04:00",
            "date_modified": "2020-04-26T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/04/14/unlimited-memory",
            "title": "Kevin Horsley, Unlimited Memory",
            "summary": null,
            "content_text": "  Concentrate:          Do one thing at a time.                  Exceptional work is always associated with periods of deep concentration.                    Have a clear purpose on what you want to learn about.                  What does it matter?          How is it applicable to my life? How can I apply it?          How can it help me achieve my goals?                      Create and connect:          People that learn quickly or have a so-called photographic memory apply their creativity to everything they learn, using the SEE principles.                  S-Senses: the more senses you engage, the more lively the images become, the more memorable they are          E-Exaggeration: exaggerate with humor, make the images illogical, make the learning more fun and easy to memorize          E-Energize: give images action, make a movie, like how Disney does with their objects                    A tip to remember abstract concepts or complex words is to rhyme or break it own to more meaningful concepts. For examples:                  Tiger in Spanish is Tigre, which sounds like tea grey: imagine a tiger drinking grey tea          The capital of Greece is Athens, which sounds like eight hens: imagine them swimming in Greece                    Long-term memory can be used to trap short-term information.                  The car method: use your car image (long-term) and store new information on parts of the car (short-term)          The body method: use parts of your body to store new information          The peg method: use rhyming words to store ordered lists (one-bu, two-shoe, three-tree, four-door, five-hive, six-stick, seven-heaven, eight-gate, nine-vine, ten-hen)                    Linking thoughts, associating concepts, developing a story line are great ways to create a relationship between the known and unknown and strengthen the memory capacity.                  Recall, reinforce, compare different features of what you have already known to what you don’t know                      Continuous use:          Have self-discipline to stick the practice/review sessions.                  Again, have a strong vision and a clear purpose on what you want.          Make it part of your DAILY routine.          Stop listening to your feelings, just do it whether you feel like it or not.                    References:  https://www.goodreads.com/book/show/20958539-unlimited-memory",
            "content_html": "<ul>  <li>Concentrate:    <ul>      <li>Do one thing at a time.        <ul>          <li>Exceptional work is always associated with periods of deep concentration.</li>        </ul>      </li>      <li>Have a clear purpose on what you want to learn about.        <ul>          <li>What does it matter?</li>          <li>How is it applicable to my life? How can I apply it?</li>          <li>How can it help me achieve my goals?</li>        </ul>      </li>    </ul>  </li>  <li>Create and connect:    <ul>      <li>People that learn quickly or have a so-called photographic memory apply their creativity to everything they learn, using the SEE principles.        <ul>          <li>S-Senses: the more senses you engage, the more lively the images become, the more memorable they are</li>          <li>E-Exaggeration: exaggerate with humor, make the images illogical, make the learning more fun and easy to memorize</li>          <li>E-Energize: give images action, make a movie, like how Disney does with their objects</li>        </ul>      </li>      <li>A tip to remember abstract concepts or complex words is to rhyme or break it own to more meaningful concepts. For examples:        <ul>          <li>Tiger in Spanish is Tigre, which sounds like tea grey: imagine a tiger drinking grey tea</li>          <li>The capital of Greece is Athens, which sounds like eight hens: imagine them swimming in Greece</li>        </ul>      </li>      <li>Long-term memory can be used to trap short-term information.        <ul>          <li>The car method: use your car image (long-term) and store new information on parts of the car (short-term)</li>          <li>The body method: use parts of your body to store new information</li>          <li>The peg method: use rhyming words to store ordered lists (one-bu, two-shoe, three-tree, four-door, five-hive, six-stick, seven-heaven, eight-gate, nine-vine, ten-hen)</li>        </ul>      </li>      <li>Linking thoughts, associating concepts, developing a story line are great ways to create a relationship between the known and unknown and strengthen the memory capacity.        <ul>          <li>Recall, reinforce, compare different features of what you have already known to what you don’t know</li>        </ul>      </li>    </ul>  </li>  <li>Continuous use:    <ul>      <li>Have self-discipline to stick the practice/review sessions.        <ul>          <li>Again, have a strong vision and a clear purpose on what you want.</li>          <li>Make it part of your DAILY routine.</li>          <li>Stop listening to your feelings, just do it whether you feel like it or not.</li>        </ul>      </li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/20958539-unlimited-memory\">https://www.goodreads.com/book/show/20958539-unlimited-memory</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/04/14/unlimited-memory",
            
            
            
            "tags": ["book","memory","productivity"],
            
            "date_published": "2020-04-14T00:00:00-04:00",
            "date_modified": "2020-04-14T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/04/01/antifragile",
            "title": "Nassim Nicholas Taleb, Antifragile",
            "summary": null,
            "content_text": "  Fragile things are exposed to volatility, robust things resist it, antifragile things benefit from it.  The antifragile system is made up of fragile parts.          The weak one dies in the process while the strong one stays.      Individual failure can provide helpful information to strengthen the system as a whole.        Shock and stressors strengthen antifragile system by forcing them to build up capacity.          When human bounce back after traumatic accidents, hardships or failures, they become stronger.      Lifting heavy puts the body to unusual stress and makes the muscle stronger.      Even though The Titanic was a disaster, it made the ship cruising system stronger.        Trying to over-control systems often leads to fragility.          Mom who overprotects her children prevents them from developing the ability to bounce back and adapt to future difficulties.        To take advantage of antifragility, you don’t need to understand the opportunities you see, just when to seize them.          Society put too much value on theoretical or academic knowledge and not too much on a practical one.      Often the most successful traders don’t know complicated economic theory or finance; they know when to buy and sell.      The Industrial Revolution was not instigated by academics but hobbyists.        The shorter the time frame you observe an event, the higher the noise you will perceive.  Prediction in the modern world is impossible.          We always find patterns, causes, explanations in past events, but they are useless for predicting the future.      An assumption that the worst event we have witnessed must be the worst that could ever happen is simply false.      What’s most likely to stick in the future is what has already been around for long.      Instead of trying to predict what is going to happen, position yourself in such a way that you have optionality.                  The more options you have, the more ways you have to respond to unforeseen events (but not too many options).          Prepare for failure scenarios.                      Squeeze is a situation where you have no choice but to do it, regardless of the cost.          They are the opposite of options.      The larger something is, the harder the squeeze, the more damage it causes.      Still, the larger something is, the harder it will be hit by unexpected events.        The Barbell Strategy suggests to play it safe on one side so that you can take more risks on other side.          Cover your downside to protect yourself from extreme harm.      Let the upside take care of itself.                  If the risky part plays out badly, you’re still fine.          If a Black Swan event makes the risks pay off big, you profit handsomely.                      Practical activities:          Lift heavy weights or do HIIT.      Practice intermittent fasting.      Eat fermented foods, such as sauerkraut, kimchi, yogurt, pickles,…      Cold/heat exposure.                  Take cold showers, ice baths, wear less clothes and sleep only with your sheets.          Take saunas, do Bikram yoga and get a sweat on during training.                    Put most of your money in safe investments and 10% in highly lucrative ones.      Keep your day job but take massive action on your side hustle at night.      References:  https://www.goodreads.com/book/show/13530973-antifragile  http://siimland.com/become-antifragile/",
            "content_html": "<ul>  <li>Fragile things are exposed to volatility, robust things resist it, antifragile things benefit from it.</li>  <li>The antifragile system is made up of fragile parts.    <ul>      <li>The weak one dies in the process while the strong one stays.</li>      <li>Individual failure can provide helpful information to strengthen the system as a whole.</li>    </ul>  </li>  <li>Shock and stressors strengthen antifragile system by forcing them to build up capacity.    <ul>      <li>When human bounce back after traumatic accidents, hardships or failures, they become stronger.</li>      <li>Lifting heavy puts the body to unusual stress and makes the muscle stronger.</li>      <li>Even though The Titanic was a disaster, it made the ship cruising system stronger.</li>    </ul>  </li>  <li>Trying to over-control systems often leads to fragility.    <ul>      <li>Mom who overprotects her children prevents them from developing the ability to bounce back and adapt to future difficulties.</li>    </ul>  </li>  <li>To take advantage of antifragility, you don’t need to understand the opportunities you see, just when to seize them.    <ul>      <li>Society put too much value on theoretical or academic knowledge and not too much on a practical one.</li>      <li>Often the most successful traders don’t know complicated economic theory or finance; they know when to buy and sell.</li>      <li>The Industrial Revolution was not instigated by academics but hobbyists.</li>    </ul>  </li>  <li>The shorter the time frame you observe an event, the higher the noise you will perceive.</li>  <li>Prediction in the modern world is impossible.    <ul>      <li>We always find patterns, causes, explanations in past events, but they are useless for predicting the future.</li>      <li>An assumption that the worst event we have witnessed must be the worst that could ever happen is simply false.</li>      <li>What’s most likely to stick in the future is what has already been around for long.</li>      <li>Instead of trying to predict what is going to happen, position yourself in such a way that you have optionality.        <ul>          <li>The more options you have, the more ways you have to respond to unforeseen events (but not too many options).</li>          <li>Prepare for failure scenarios.</li>        </ul>      </li>    </ul>  </li>  <li>Squeeze is a situation where you have no choice but to do it, regardless of the cost.    <ul>      <li>They are the opposite of options.</li>      <li>The larger something is, the harder the squeeze, the more damage it causes.</li>      <li>Still, the larger something is, the harder it will be hit by unexpected events.</li>    </ul>  </li>  <li>The Barbell Strategy suggests to play it safe on one side so that you can take more risks on other side.    <ul>      <li>Cover your downside to protect yourself from extreme harm.</li>      <li>Let the upside take care of itself.        <ul>          <li>If the risky part plays out badly, you’re still fine.</li>          <li>If a Black Swan event makes the risks pay off big, you profit handsomely.</li>        </ul>      </li>    </ul>  </li>  <li>Practical activities:    <ul>      <li>Lift heavy weights or do HIIT.</li>      <li>Practice intermittent fasting.</li>      <li>Eat fermented foods, such as sauerkraut, kimchi, yogurt, pickles,…</li>      <li>Cold/heat exposure.        <ul>          <li>Take cold showers, ice baths, wear less clothes and sleep only with your sheets.</li>          <li>Take saunas, do Bikram yoga and get a sweat on during training.</li>        </ul>      </li>      <li>Put most of your money in safe investments and 10% in highly lucrative ones.</li>      <li>Keep your day job but take massive action on your side hustle at night.</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/13530973-antifragile\">https://www.goodreads.com/book/show/13530973-antifragile</a></li>  <li><a href=\"http://siimland.com/become-antifragile/\">http://siimland.com/become-antifragile/</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/04/01/antifragile",
            
            
            
            "tags": ["book","antifragile","investing"],
            
            "date_published": "2020-04-01T00:00:00-04:00",
            "date_modified": "2020-04-01T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/03/28/web-architectural-components",
            "title": "Modern Web Architectural Components",
            "summary": null,
            "content_text": "  Tiers          A tier is a logical separation of components in an application or service - database, backend app, user interface, messaging, caching      Single tier: user interface, backend business logic, database reside in the same machine                  Pros: no network latency          Cons: hard to maintain once is shipped                    Two-tier: client (user interface, business logic) &amp; server (database)                  Communication happens over the HTTP protocol (request-response model &amp; stateless)          REST API takes advantage of the HTTP methodologies to establish communication between the client and the server                    Three-tier: user interface, application logic, database reside in different machines      N-tier: more than 3 components involved - cache, message queues, load balancers,…                  Single Responsibility Principle: a component has only a single responsibility          Separation of concerns: keep components separate, make them reusable                      Scalability          Ability to withstand increased workload without sacrificing the latency      Latency can be divided into 2 parts:                  Network latency: amount of time the network takes to send data packet from point A to B          Application latency: amount of time the application takes to process a user request                    Type of scalability                  Vertical scaling/scaling up: adding more power to server                          Pros: not a lot of overhead on monitoring, operating and maintaining              Cons: single point of failure                                Horizontal scaling/scaling out: adding more hardware to the existing resource pool                          Pros: cheaper, better fault-tolerance              Cons: managing server is hard, writing distributed computing program is also challenging                                          Common bottlenecks that hurt scalability                  Database latency          Poor application architecture          Not caching wisely          Inefficient configuration and load balancing          Adding business logic to the database          Badly written code                    Common strategies to improve and test the scalability                  Profiling          Cache wisely          Use a CDN          Compress data          Avoid unnecessary round trips between client and sever          Run load &amp; stress tests                      High Availability          Ability to stay online despite having failures at the infrastructural level in real-time      Common reasons for system failures                  Software crashes          Hardware crashes          Human error          Planned downtime                    A common way to add more availability is to have redundancy - duplicating the components &amp; keeping them on standby to take over in case the active instances go down        Monolithic &amp; Microservices          Monolithic: entire application code in a single service                  Pros: simple to develop, test, deploy as everything resides in one repo          Cons:                          Continuous deployment means re-deploying the entire application              Single point of failure              Hard to scale                                          Microservices: tasks are split into separate services forming a larger service as a whole                  Pros:                          No single point of failure              Easier to scale independently                                Cons:                          Difficult to manage              No strong consistency                                            Database          Forms of data:                  Structured: conforms to a certain structure, stored in a normalized fashion          Unstructured: no definite structure, could be text, image, video, multimedia files, machine-generated data          Semi-structured: mix of structured and unstructured data, stored in XML or JSON          User state: user logs and activity on the platform                    Why the need for NoSQL while relational database is still doing fine?                  Scaling relational database is not trivial, which requires Sharding or Replicating          NoSQL is fast with read-write and really easy to scale out          Eventual consistency over strong consistency                          Eventual consistency: achieve high availability that informally guarantees that, if no new updates are made, return the last updated value for all accesses              Strong consistency: data has to be strongly consistent at all times                                Data analytics                    Polyglot persistence                  Use different storage technologies to handle different needs within a given software application          Multi-model databases reduce the operational complexity of using several different database models in an application by supporting multiple data models via a single API                    CAP theorem                  It is impossible for a distributed data store to simultaneously provide more than two out of the following three guarantees:                          Consistency: every read receives the most recent write              Availability: every request receives a non-error response              Partition tolerance: system continues to operate despite network failures                                          Types of databases                  Document-oriented: generally semi-structured &amp; stored in a JSON-like format                          Use cases:                                  Working with semi-structured data                  Need a flexible schema                  Examples are real-time feeds, live sport apps, web-based multiplayer games                                            Real life implementations                                  SEGA uses Mongo-DB to simply ops and improve gaming experiences                  Coinbase uses MongoDB to scale from 15k to 1.2 million requests per minute                                                              Graph: store data in nodes/vertices and edges in the form of relationships                          Use cases:                                  Maps                  Social graphs                  Recommendation engines                  Storing genetic data                                            Real life implementations                                  Walmart uses Neo4J to show product recommendations in real-time                  NASA uses Neo4J to store “lessons learned” data                                                              Key-value: use a simple key-value method to store and quickly fetch the data                          Use cases:                                  Caching                  Implementing queue                  Managing real-time data                                            Real life implementations                                  Inovonics uses Redis to drive real-time analytics on millions of sensor data                  Microsoft uses Redis to handle the traffic spike on its platforms                  Google Cloud uses Memcache to implement caching on their cloud platform                                                              Time series: optimized for tracking &amp; persisting time series data                          Use cases:                                  Managing data in real-time &amp; continually over a long period of time                  Managing data for running analytics &amp; monitoring                                            Real life implementations                                  IBM uses Influx DB to run analytics for real-time cognitive fraud detection                  Spiio uses Influx DB to remotely monitor vertical lining green walls &amp; plant installations                                                              Wide Column: primarily used to handle massive amounts of data                          Use cases:                                  Managing big data                                            Real life implementations                                  Netflix uses Cassandra as the backend database for the streaming service                  Adobe uses HBase for processing large amounts of data                                                                          Caching          Ensure low latency and high throughput      Strategies                  Cache Aside:                          First look in the cache, return if present, else fetch from the database and update cache              Has a TTL (Time To Live) period to sync up data              Works well for read-heavy workloads like user profile data                                Read-through                          Similar to Cache Aside, but the cache is always up-to-date                                Write-through                          Cache before writing to database              Works well for write-heavy workloads like MMOs                                Write-back                          Similar to Write-through, but add some delay before writing to database                                            Message queue          Features:                  Facilitate asynchronous behaviour (background processes, tasks, batch jobs)          Facilitate cross-module communication          Provide temporary storage for storing messages until they’re consumed                    Models:                  Publish-subscribe (Pub-sub): one to many relationship          Point to point: one to one relationship                    Protocols:                  Advanced Message Queuing Protocol (AMQP)          Streaming Text Oriented Messaging Protocol (STOMP)                    Real life implementations                  LinkedIn Real-Time Architecture          Facebook’s Live Streaming architecture                      Stream processing          Layers of data processing setup:                  Data collection/query layer          Data standardization layer          Data processing layer          Data analysis layer          Data visualization layer          Data storage layer          Data security layer                    Ways to ingest data:                  Real-time          Batching                    Challenges:                  Formatting, standardizing, converting data from multiple resources is a slow and tedious process          It’s resource-intensive          Moving data around is risky                    Use cases:                  Moving data into Hadoop          Streaming data to Elastic search          Log processing          Real-time streaming                    Distributed data processing                  Diverge large amounts of data to several different nodes for parallel processing          Popular frameworks:                          MapReduce - Apache Hadoop              Apache Spark              Apache Storm              Apache Kafka                                          Architecture                  Lambda leverages both real-time and batching process that consists 3 layers                          Batch: deals with results from the batching process              Speed: gets data from the real-time streaming process              Serving: combines the results from the Batch and Speed layers                                Kappa has only a single pipeline and only contains Speed and Serving layers                          Preferred if the batch and the streaming analytics results are fairly identical                                          Real life implementations                  Netflix’ Keystone Real-time Stream Processing Platform          Netflix’ Migrating Batch ETL to Stream Processing                      Other architectures          Event-driven: capable of handling a big number of concurrent requests with minimal resources      WebHooks: have an event-based mechanism that only fires an HTTP event to consumers whenever new info is available      Share Nothing: every module has its own environment      Hexagonal:                  Port: act as an API, interface          Adapter: an implementation of the interface, convert data from Port to be consumed by Domain          Domain: contain business logic                    Peer to Peer: nodes can communicate with each other without the need of a central server      Decentralized social network      References:  https://www.educative.io/courses/web-application-software-architecture-101",
            "content_html": "<ul>  <li>Tiers    <ul>      <li>A tier is a logical separation of components in an application or service - database, backend app, user interface, messaging, caching</li>      <li>Single tier: user interface, backend business logic, database reside in the same machine        <ul>          <li>Pros: no network latency</li>          <li>Cons: hard to maintain once is shipped</li>        </ul>      </li>      <li>Two-tier: client (user interface, business logic) &amp; server (database)        <ul>          <li>Communication happens over the HTTP protocol (request-response model &amp; stateless)</li>          <li>REST API takes advantage of the HTTP methodologies to establish communication between the client and the server</li>        </ul>      </li>      <li>Three-tier: user interface, application logic, database reside in different machines</li>      <li>N-tier: more than 3 components involved - cache, message queues, load balancers,…        <ul>          <li>Single Responsibility Principle: a component has only a single responsibility</li>          <li>Separation of concerns: keep components separate, make them reusable</li>        </ul>      </li>    </ul>  </li>  <li>Scalability    <ul>      <li>Ability to withstand increased workload without sacrificing the latency</li>      <li>Latency can be divided into 2 parts:        <ul>          <li>Network latency: amount of time the network takes to send data packet from point A to B</li>          <li>Application latency: amount of time the application takes to process a user request</li>        </ul>      </li>      <li>Type of scalability        <ul>          <li>Vertical scaling/scaling up: adding more power to server            <ul>              <li>Pros: not a lot of overhead on monitoring, operating and maintaining</li>              <li>Cons: single point of failure</li>            </ul>          </li>          <li>Horizontal scaling/scaling out: adding more hardware to the existing resource pool            <ul>              <li>Pros: cheaper, better fault-tolerance</li>              <li>Cons: managing server is hard, writing distributed computing program is also challenging</li>            </ul>          </li>        </ul>      </li>      <li>Common bottlenecks that hurt scalability        <ul>          <li>Database latency</li>          <li>Poor application architecture</li>          <li>Not caching wisely</li>          <li>Inefficient configuration and load balancing</li>          <li>Adding business logic to the database</li>          <li>Badly written code</li>        </ul>      </li>      <li>Common strategies to improve and test the scalability        <ul>          <li>Profiling</li>          <li>Cache wisely</li>          <li>Use a CDN</li>          <li>Compress data</li>          <li>Avoid unnecessary round trips between client and sever</li>          <li>Run load &amp; stress tests</li>        </ul>      </li>    </ul>  </li>  <li>High Availability    <ul>      <li>Ability to stay online despite having failures at the infrastructural level in real-time</li>      <li>Common reasons for system failures        <ul>          <li>Software crashes</li>          <li>Hardware crashes</li>          <li>Human error</li>          <li>Planned downtime</li>        </ul>      </li>      <li>A common way to add more availability is to have redundancy - duplicating the components &amp; keeping them on standby to take over in case the active instances go down</li>    </ul>  </li>  <li>Monolithic &amp; Microservices    <ul>      <li>Monolithic: entire application code in a single service        <ul>          <li>Pros: simple to develop, test, deploy as everything resides in one repo</li>          <li>Cons:            <ul>              <li>Continuous deployment means re-deploying the entire application</li>              <li>Single point of failure</li>              <li>Hard to scale</li>            </ul>          </li>        </ul>      </li>      <li>Microservices: tasks are split into separate services forming a larger service as a whole        <ul>          <li>Pros:            <ul>              <li>No single point of failure</li>              <li>Easier to scale independently</li>            </ul>          </li>          <li>Cons:            <ul>              <li>Difficult to manage</li>              <li>No strong consistency</li>            </ul>          </li>        </ul>      </li>    </ul>  </li>  <li>Database    <ul>      <li>Forms of data:        <ul>          <li>Structured: conforms to a certain structure, stored in a normalized fashion</li>          <li>Unstructured: no definite structure, could be text, image, video, multimedia files, machine-generated data</li>          <li>Semi-structured: mix of structured and unstructured data, stored in XML or JSON</li>          <li>User state: user logs and activity on the platform</li>        </ul>      </li>      <li>Why the need for NoSQL while relational database is still doing fine?        <ul>          <li>Scaling relational database is not trivial, which requires Sharding or Replicating</li>          <li>NoSQL is fast with read-write and really easy to scale out</li>          <li>Eventual consistency over strong consistency            <ul>              <li>Eventual consistency: achieve high availability that informally guarantees that, if no new updates are made, return the last updated value for all accesses</li>              <li>Strong consistency: data has to be strongly consistent at all times</li>            </ul>          </li>          <li>Data analytics</li>        </ul>      </li>      <li>Polyglot persistence        <ul>          <li>Use different storage technologies to handle different needs within a given software application</li>          <li>Multi-model databases reduce the operational complexity of using several different database models in an application by supporting multiple data models via a single API</li>        </ul>      </li>      <li>CAP theorem        <ul>          <li>It is impossible for a distributed data store to simultaneously provide more than two out of the following three guarantees:            <ul>              <li>Consistency: every read receives the most recent write</li>              <li>Availability: every request receives a non-error response</li>              <li>Partition tolerance: system continues to operate despite network failures</li>            </ul>          </li>        </ul>      </li>      <li>Types of databases        <ul>          <li>Document-oriented: generally semi-structured &amp; stored in a JSON-like format            <ul>              <li>Use cases:                <ul>                  <li>Working with semi-structured data</li>                  <li>Need a flexible schema</li>                  <li>Examples are real-time feeds, live sport apps, web-based multiplayer games</li>                </ul>              </li>              <li>Real life implementations                <ul>                  <li><a href=\"https://www.mongodb.com/blog/post/sega-hardlight-migrates-to-mongodb-atlas-simplify-ops-improve-experience-mobile-gamers\">SEGA uses Mongo-DB to simply ops and improve gaming experiences</a></li>                  <li><a href=\"https://www.mongodb.com/customers/coinbase\">Coinbase uses MongoDB to scale from 15k to 1.2 million requests per minute</a></li>                </ul>              </li>            </ul>          </li>          <li>Graph: store data in nodes/vertices and edges in the form of relationships            <ul>              <li>Use cases:                <ul>                  <li>Maps</li>                  <li>Social graphs</li>                  <li>Recommendation engines</li>                  <li>Storing genetic data</li>                </ul>              </li>              <li>Real life implementations                <ul>                  <li><a href=\"https://neo4j.com/case-studies/walmart/\">Walmart uses Neo4J to show product recommendations in real-time</a></li>                  <li><a href=\"https://neo4j.com/blog/david-meza-chief-knowledge-architect-nasa/\">NASA uses Neo4J to store “lessons learned” data</a></li>                </ul>              </li>            </ul>          </li>          <li>Key-value: use a simple key-value method to store and quickly fetch the data            <ul>              <li>Use cases:                <ul>                  <li>Caching</li>                  <li>Implementing queue</li>                  <li>Managing real-time data</li>                </ul>              </li>              <li>Real life implementations                <ul>                  <li><a href=\"https://redislabs.com/customers/inovonics/\">Inovonics uses Redis to drive real-time analytics on millions of sensor data</a></li>                  <li><a href=\"https://redislabs.com/docs/microsoft-relies-redis-labs/\">Microsoft uses Redis to handle the traffic spike on its platforms</a></li>                  <li><a href=\"https://cloud.google.com/appengine/docs/standard/python/memcache/\">Google Cloud uses Memcache to implement caching on their cloud platform</a></li>                </ul>              </li>            </ul>          </li>          <li>Time series: optimized for tracking &amp; persisting time series data            <ul>              <li>Use cases:                <ul>                  <li>Managing data in real-time &amp; continually over a long period of time</li>                  <li>Managing data for running analytics &amp; monitoring</li>                </ul>              </li>              <li>Real life implementations                <ul>                  <li><a href=\"https://www.influxdata.com/customer/ibm/\">IBM uses Influx DB to run analytics for real-time cognitive fraud detection</a></li>                  <li><a href=\"https://www.influxdata.com/customer/customer_case_study_spiio/\">Spiio uses Influx DB to remotely monitor vertical lining green walls &amp; plant installations</a></li>                </ul>              </li>            </ul>          </li>          <li>Wide Column: primarily used to handle massive amounts of data            <ul>              <li>Use cases:                <ul>                  <li>Managing big data</li>                </ul>              </li>              <li>Real life implementations                <ul>                  <li><a href=\"https://netflixtechblog.com/tagged/cassandra\">Netflix uses Cassandra as the backend database for the streaming service</a></li>                  <li><a href=\"https://hbase.apache.org/poweredbyhbase.html\">Adobe uses HBase for processing large amounts of data</a></li>                </ul>              </li>            </ul>          </li>        </ul>      </li>    </ul>  </li>  <li>Caching    <ul>      <li>Ensure low latency and high throughput</li>      <li>Strategies        <ul>          <li>Cache Aside:            <ul>              <li>First look in the cache, return if present, else fetch from the database and update cache</li>              <li>Has a TTL (Time To Live) period to sync up data</li>              <li>Works well for read-heavy workloads like user profile data</li>            </ul>          </li>          <li>Read-through            <ul>              <li>Similar to Cache Aside, but the cache is always up-to-date</li>            </ul>          </li>          <li>Write-through            <ul>              <li>Cache before writing to database</li>              <li>Works well for write-heavy workloads like MMOs</li>            </ul>          </li>          <li>Write-back            <ul>              <li>Similar to Write-through, but add some delay before writing to database</li>            </ul>          </li>        </ul>      </li>    </ul>  </li>  <li>Message queue    <ul>      <li>Features:        <ul>          <li>Facilitate asynchronous behaviour (background processes, tasks, batch jobs)</li>          <li>Facilitate cross-module communication</li>          <li>Provide temporary storage for storing messages until they’re consumed</li>        </ul>      </li>      <li>Models:        <ul>          <li>Publish-subscribe (Pub-sub): one to many relationship</li>          <li>Point to point: one to one relationship</li>        </ul>      </li>      <li>Protocols:        <ul>          <li><a href=\"https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol\">Advanced Message Queuing Protocol (AMQP)</a></li>          <li><a href=\"https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol\">Streaming Text Oriented Messaging Protocol (STOMP)</a></li>        </ul>      </li>      <li>Real life implementations        <ul>          <li><a href=\"https://www.8bitmen.com/linkedin-real-time-architecture-how-does-linkedin-identify-its-users-online/\">LinkedIn Real-Time Architecture</a></li>          <li><a href=\"https://engineering.fb.com/ios/under-the-hood-broadcasting-live-video-to-millions/\">Facebook’s Live Streaming architecture</a></li>        </ul>      </li>    </ul>  </li>  <li>Stream processing    <ul>      <li>Layers of data processing setup:        <ul>          <li>Data collection/query layer</li>          <li>Data standardization layer</li>          <li>Data processing layer</li>          <li>Data analysis layer</li>          <li>Data visualization layer</li>          <li>Data storage layer</li>          <li>Data security layer</li>        </ul>      </li>      <li>Ways to ingest data:        <ul>          <li>Real-time</li>          <li>Batching</li>        </ul>      </li>      <li>Challenges:        <ul>          <li>Formatting, standardizing, converting data from multiple resources is a slow and tedious process</li>          <li>It’s resource-intensive</li>          <li>Moving data around is risky</li>        </ul>      </li>      <li>Use cases:        <ul>          <li>Moving data into Hadoop</li>          <li>Streaming data to Elastic search</li>          <li>Log processing</li>          <li>Real-time streaming</li>        </ul>      </li>      <li>Distributed data processing        <ul>          <li>Diverge large amounts of data to several different nodes for parallel processing</li>          <li>Popular frameworks:            <ul>              <li>MapReduce - Apache Hadoop</li>              <li>Apache Spark</li>              <li>Apache Storm</li>              <li>Apache Kafka</li>            </ul>          </li>        </ul>      </li>      <li>Architecture        <ul>          <li>Lambda leverages both real-time and batching process that consists 3 layers            <ul>              <li>Batch: deals with results from the batching process</li>              <li>Speed: gets data from the real-time streaming process</li>              <li>Serving: combines the results from the Batch and Speed layers</li>            </ul>          </li>          <li>Kappa has only a single pipeline and only contains Speed and Serving layers            <ul>              <li>Preferred if the batch and the streaming analytics results are fairly identical</li>            </ul>          </li>        </ul>      </li>      <li>Real life implementations        <ul>          <li><a href=\"https://netflixtechblog.com/keystone-real-time-stream-processing-platform-a3ee651812a\">Netflix’ Keystone Real-time Stream Processing Platform</a></li>          <li><a href=\"https://netflixtechblog.com/keystone-real-time-stream-processing-platform-a3ee651812a\">Netflix’ Migrating Batch ETL to Stream Processing</a></li>        </ul>      </li>    </ul>  </li>  <li>Other architectures    <ul>      <li>Event-driven: capable of handling a big number of concurrent requests with minimal resources</li>      <li>WebHooks: have an event-based mechanism that only fires an HTTP event to consumers whenever new info is available</li>      <li>Share Nothing: every module has its own environment</li>      <li>Hexagonal:        <ul>          <li>Port: act as an API, interface</li>          <li>Adapter: an implementation of the interface, convert data from Port to be consumed by Domain</li>          <li>Domain: contain business logic</li>        </ul>      </li>      <li>Peer to Peer: nodes can communicate with each other without the need of a central server</li>      <li>Decentralized social network</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.educative.io/courses/web-application-software-architecture-101\">https://www.educative.io/courses/web-application-software-architecture-101</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/03/28/web-architectural-components",
            
            
            
            
            
            "date_published": "2020-03-28T00:00:00-04:00",
            "date_modified": "2020-03-28T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/03/25/reduce-stress-investing",
            "title": "How Checking Performance Might Hurt Your Performance",
            "summary": null,
            "content_text": "Paying too much attention to your investments (more than once per quarter) costs more than just your time:  Make you more risk-averse.          The shorter the time the returns are generated from, the less risk investors are willing to take.      You’ll see loss 50% of the time if you check performance daily, 25% if one a year, 1% if 7 years.        Mislead about future return.          Knowing which stocks performed the best last month won’t tell you which ones will perform the best this month.      Even professionals can get caught in this trap.        Increase your risk of performance chasing, which could reduce your returns.          Past performance is not necessarily indicative of future results.      Performance chasing could cost an investor between 2 to 4% per year.        Make you unhappy.          We tend to feel losses more powerfully than we feel gains.      Market losses are the one constant that don’t change over time, meaning you’ll see losses most of the time.      Next time, think twice before you feel the urge to check on your performance!References:  https://www.betterment.com/resources/reduce-stress-investing/",
            "content_html": "<p>Paying too much attention to your investments (more than once per quarter) costs more than just your time:</p><ul>  <li>Make you more risk-averse.    <ul>      <li>The shorter the time the returns are generated from, the less risk investors are willing to take.</li>      <li>You’ll see loss 50% of the time if you check performance daily, 25% if one a year, 1% if 7 years.</li>    </ul>  </li>  <li>Mislead about future return.    <ul>      <li>Knowing which stocks performed the best last month won’t tell you which ones will perform the best this month.</li>      <li>Even professionals can get caught in this trap.</li>    </ul>  </li>  <li>Increase your risk of performance chasing, which could reduce your returns.    <ul>      <li>Past performance is not necessarily indicative of future results.</li>      <li>Performance chasing could cost an investor between 2 to 4% per year.</li>    </ul>  </li>  <li>Make you unhappy.    <ul>      <li>We tend to feel losses more powerfully than we feel gains.</li>      <li>Market losses are the one constant that don’t change over time, meaning you’ll see losses most of the time.</li>    </ul>  </li></ul><p>Next time, think twice before you feel the urge to check on your performance!</p><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.betterment.com/resources/reduce-stress-investing/\">https://www.betterment.com/resources/reduce-stress-investing/</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/03/25/reduce-stress-investing",
            
            
            
            "tags": ["health","stress","investing"],
            
            "date_published": "2020-03-25T00:00:00-04:00",
            "date_modified": "2020-03-25T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/03/24/brief-history-scaling-linkedin",
            "title": "A Brief History of Scaling LinkedIn",
            "summary": null,
            "content_text": "  Started as a single monolithic application, Leo, that hosted various pages, handled business logic and connected to a handful of databases  Needed to manage a network of member connections and scale independent of Leo so built a new system for their member graph          Used Java RPC for communication, Apache Lucene for search capabilities        Introduced replica DBs as the site grew          To keep replica DBs in sync, built data capture system, Databus, then open-sourced it        Observed that Leo was often going down in production, difficult for the team to troubleshoot, recover, release new code          Killed Leo      Broke it up into many small services                  Frontend: fetch data models from different domains, presentation logic          Mid-tier: provide API access to data models and add more layer of cache (memcache/couchbase/Voldemort)          Backend: provide consistent access to its database                      Developed data pipelines for streaming and queueing data that later became Apache Kafka          Empowered Hadoop jobs      Built realtime analytics      Improved monitoring and alerting        In 2011, kicked off an internal initiative, Inversion          Paused on feature development      Focused on improving tooling and deployment, infrastructure, and developer productivity        Got rid of Jave RPC because it was inconsistent across team as well as tightly coupled and built Rest.li for a more scalable RESTful architecture  Since fetching many types of different data and making hundreds of downstream calls made the “call graph” difficult to manage, the team grouped multiple services together to allow a single access API          Had a specific team optimize the block        Scaled to 3 main data centers and multiple PoP around the globe in 2015  Developed an offline workflow using Hadoop to precompute data insights  Rethought frontend approach          Added client template, Dust.js, to the mix      Cached templates in CDNs and browsers      Adapted BigPipe and Play Framework for an async experience        Introduced multiple tiers of proxies, Apache Traffic Server, HAProxy, to handle load balancing, data center pinning, security, intelligent routing, server side rendering,…  Utilized optimized hardware, advanced memory and system tuning, and newer Java runtimesReferences:  https://engineering.linkedin.com/architecture/brief-history-scaling-linkedin",
            "content_html": "<ul>  <li>Started as a single monolithic application, Leo, that hosted various pages, handled business logic and connected to a handful of databases</li>  <li>Needed to manage a network of member connections and scale independent of Leo so built a new system for their member graph    <ul>      <li>Used Java RPC for communication, Apache Lucene for search capabilities</li>    </ul>  </li>  <li>Introduced replica DBs as the site grew    <ul>      <li>To keep replica DBs in sync, built data capture system, Databus, then open-sourced it</li>    </ul>  </li>  <li>Observed that Leo was often going down in production, difficult for the team to troubleshoot, recover, release new code    <ul>      <li>Killed Leo</li>      <li>Broke it up into many small services        <ul>          <li>Frontend: fetch data models from different domains, presentation logic</li>          <li>Mid-tier: provide API access to data models and add more layer of cache (memcache/couchbase/Voldemort)</li>          <li>Backend: provide consistent access to its database</li>        </ul>      </li>    </ul>  </li>  <li>Developed data pipelines for streaming and queueing data that later became Apache Kafka    <ul>      <li>Empowered Hadoop jobs</li>      <li>Built realtime analytics</li>      <li>Improved monitoring and alerting</li>    </ul>  </li>  <li>In 2011, kicked off an internal initiative, Inversion    <ul>      <li>Paused on feature development</li>      <li>Focused on improving tooling and deployment, infrastructure, and developer productivity</li>    </ul>  </li>  <li>Got rid of Jave RPC because it was inconsistent across team as well as tightly coupled and built Rest.li for a more scalable RESTful architecture</li>  <li>Since fetching many types of different data and making hundreds of downstream calls made the “call graph” difficult to manage, the team grouped multiple services together to allow a single access API    <ul>      <li>Had a specific team optimize the block</li>    </ul>  </li>  <li>Scaled to 3 main data centers and multiple PoP around the globe in 2015</li>  <li>Developed an offline workflow using Hadoop to precompute data insights</li>  <li>Rethought frontend approach    <ul>      <li>Added client template, Dust.js, to the mix</li>      <li>Cached templates in CDNs and browsers</li>      <li>Adapted BigPipe and Play Framework for an async experience</li>    </ul>  </li>  <li>Introduced multiple tiers of proxies, Apache Traffic Server, HAProxy, to handle load balancing, data center pinning, security, intelligent routing, server side rendering,…</li>  <li>Utilized optimized hardware, advanced memory and system tuning, and newer Java runtimes</li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://engineering.linkedin.com/architecture/brief-history-scaling-linkedin\">https://engineering.linkedin.com/architecture/brief-history-scaling-linkedin</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/03/24/brief-history-scaling-linkedin",
            
            
            
            "tags": ["microservices","linkedin"],
            
            "date_published": "2020-03-24T00:00:00-04:00",
            "date_modified": "2020-03-24T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/03/23/serverless-aws-lamda",
            "title": "Serverless architecture with AWS Lamda",
            "summary": null,
            "content_text": "  Basic:          Also called function-as-a-service      Let developers focus on writing function/business logic instead of focusing on managing server        Benefits          Shorter time to market for new features      Reduced operational costs        Notable services: AWS Lamda, Google Cloud Functions  Pricing model:          Pay for actual usage, not reserved capacity - pay none if use none      Depends on                  Maximum memory for a task          Time it spent executing one                      AWS Lamda technical constraints          No session affinity - don’t get to decide about starting up, shutting down instances, or managing states in-memory state between two functions      Non-deterministic latency - some requests will need to wait for a Lamda instance to start      Execution time-limited to 15 minutes      No direct control over processing power        When to use Lamda          Throughput is critical and tasks parallelize nicely                  Requests for dynamic content          Access to backend database          User data manipulation          Automatic email replies or chatbots                    Splittable long-running tasks                  File format conversion          Generating previews/thumbnails          Periodic reports                    High availability tasks                  Payment notifications from Stripe, PayPal,…                      When not to use          Latency guaranteed tasks                  High-frequency trading systems          Near-real-time control systems                    Long-running tasks                  Video transcoding for large files          Connecting to a socket and consuming continuous data                    Tasks demanding high processing power                  Video rendering                    Tasks requiring no on-demand computation                  Serving static web files                    References:  https://www.educative.io/courses/running-serverless-applications-aws-lambda",
            "content_html": "<ul>  <li>Basic:    <ul>      <li>Also called function-as-a-service</li>      <li>Let developers focus on writing function/business logic instead of focusing on managing server</li>    </ul>  </li>  <li>Benefits    <ul>      <li>Shorter time to market for new features</li>      <li>Reduced operational costs</li>    </ul>  </li>  <li>Notable services: AWS Lamda, Google Cloud Functions</li>  <li>Pricing model:    <ul>      <li>Pay for actual usage, not reserved capacity - pay none if use none</li>      <li>Depends on        <ul>          <li>Maximum memory for a task</li>          <li>Time it spent executing one</li>        </ul>      </li>    </ul>  </li>  <li>AWS Lamda technical constraints    <ul>      <li>No session affinity - don’t get to decide about starting up, shutting down instances, or managing states in-memory state between two functions</li>      <li>Non-deterministic latency - some requests will need to wait for a Lamda instance to start</li>      <li>Execution time-limited to 15 minutes</li>      <li>No direct control over processing power</li>    </ul>  </li>  <li>When to use Lamda    <ul>      <li>Throughput is critical and tasks parallelize nicely        <ul>          <li>Requests for dynamic content</li>          <li>Access to backend database</li>          <li>User data manipulation</li>          <li>Automatic email replies or chatbots</li>        </ul>      </li>      <li>Splittable long-running tasks        <ul>          <li>File format conversion</li>          <li>Generating previews/thumbnails</li>          <li>Periodic reports</li>        </ul>      </li>      <li>High availability tasks        <ul>          <li>Payment notifications from Stripe, PayPal,…</li>        </ul>      </li>    </ul>  </li>  <li>When not to use    <ul>      <li>Latency guaranteed tasks        <ul>          <li>High-frequency trading systems</li>          <li>Near-real-time control systems</li>        </ul>      </li>      <li>Long-running tasks        <ul>          <li>Video transcoding for large files</li>          <li>Connecting to a socket and consuming continuous data</li>        </ul>      </li>      <li>Tasks demanding high processing power        <ul>          <li>Video rendering</li>        </ul>      </li>      <li>Tasks requiring no on-demand computation        <ul>          <li>Serving static web files</li>        </ul>      </li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.educative.io/courses/running-serverless-applications-aws-lambda\">https://www.educative.io/courses/running-serverless-applications-aws-lambda</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/03/23/serverless-aws-lamda",
            
            
            
            "tags": ["serverless","aws","lamda"],
            
            "date_published": "2020-03-23T00:00:00-04:00",
            "date_modified": "2020-03-23T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/03/13/how-will-you-measure-your-life",
            "title": "Clayton Christensen, How Will You Measure Your Life?",
            "summary": null,
            "content_text": "  Find happiness in your career:          Motivation theory - hygiene factors vs motivation factors:                  Hygiene factors are status, compensation, job security, work condition, company policies,…                          Bad hygiene causes dissatisfaction - low salary, poor condition,…              Improving the hygience factors of your job won’t make you love it, instead just stop you from hating it.                                Motivation factors are challenging work, recognition, responsibility, and personal growth.                          Motivation is less about the external stimulation but more about what’s inside of you and your work.              It’s a job that truly meaningful to you, is challenging and intersting, allows you to grow professionally, provides you good oppoturnities,…                                One of the easiest mistake is to focus on over-satisfy the hygiene factors over the motivation factors.                          Better salaries, more prestigious title, nicer office are not gonna make you happy.              That said, ask yourself frequently:                                  Is this work meaningful to me?                  Is this job going to give me a chance to develop?                  Am I going to learn new things?                  Will I have an opportunity for recognition and achievement?                  Am I going to be given responsibility?                                                                        How to find a career that both motivates you and satisfies the hygiene factors?                  Before taking a job, ask yourself what assumptions have to prove true for you to be happy.                          Is this something that you enjoy doing?              What evidence do you have?                                Find ways to to test these assumptions.                    How to make sure you’re heading in the right decision on a daily basis?                  Look at how you manage your resources - time, energy, talent, wealth.          Prioritize on things that require long-term investment (building a good relationship with your family, building a business, raising a child,…)                          It’s often sad to see the same patterns happening over again in the personal lives of many ambituos people - though they believe that family is important, they actually allocate few resources for them.                                            Find happiness in your relationships:          Relationships with family and close friends are one the greatest sources of happiness in life.      It needs CONSISTENT attention and care, though it’s difficult because.                  You’ll be routinely tempted to invest your resources elsewhere that provide you a more immediate payoff.          Your family and friends rarely shout the loudest to demand your attention.                    The clock of building a fulfilling relationship is ticking from the start.      Understand what’s the most important to the other person by asking yourself “What job does one most need me to do?”.      Children need to do more than learning new skills.                  Allow them to be challenged, let them solve hard problems independently and develop values themselves.          Don’t afraid to let them fail.                      Live a life of integrity (or stay out of jail):          Integrity requires constant self-awareness.      The best way to avoid the consequences of uncomfortable moral concessions is to never start making one in the first place.      References:  https://www.goodreads.com/book/show/13425570-how-will-you-measure-your-life",
            "content_html": "<ul>  <li>Find happiness in your career:    <ul>      <li>Motivation theory - hygiene factors vs motivation factors:        <ul>          <li>Hygiene factors are status, compensation, job security, work condition, company policies,…            <ul>              <li>Bad hygiene causes dissatisfaction - low salary, poor condition,…</li>              <li>Improving the hygience factors of your job won’t make you love it, instead just stop you from hating it.</li>            </ul>          </li>          <li>Motivation factors are challenging work, recognition, responsibility, and personal growth.            <ul>              <li>Motivation is less about the external stimulation but more about what’s inside of you and your work.</li>              <li>It’s a job that truly meaningful to you, is challenging and intersting, allows you to grow professionally, provides you good oppoturnities,…</li>            </ul>          </li>          <li>One of the easiest mistake is to focus on over-satisfy the hygiene factors over the motivation factors.            <ul>              <li>Better salaries, more prestigious title, nicer office are not gonna make you happy.</li>              <li>That said, ask yourself frequently:                <ul>                  <li>Is this work meaningful to me?</li>                  <li>Is this job going to give me a chance to develop?</li>                  <li>Am I going to learn new things?</li>                  <li>Will I have an opportunity for recognition and achievement?</li>                  <li>Am I going to be given responsibility?</li>                </ul>              </li>            </ul>          </li>        </ul>      </li>      <li>How to find a career that both motivates you and satisfies the hygiene factors?        <ul>          <li>Before taking a job, ask yourself what assumptions have to prove true for you to be happy.            <ul>              <li>Is this something that you enjoy doing?</li>              <li>What evidence do you have?</li>            </ul>          </li>          <li>Find ways to to test these assumptions.</li>        </ul>      </li>      <li>How to make sure you’re heading in the right decision on a daily basis?        <ul>          <li>Look at how you manage your resources - time, energy, talent, wealth.</li>          <li>Prioritize on things that require long-term investment (building a good relationship with your family, building a business, raising a child,…)            <ul>              <li>It’s often sad to see the same patterns happening over again in the personal lives of many ambituos people - though they believe that family is important, they actually allocate few resources for them.</li>            </ul>          </li>        </ul>      </li>    </ul>  </li>  <li>Find happiness in your relationships:    <ul>      <li>Relationships with family and close friends are one the greatest sources of happiness in life.</li>      <li>It needs CONSISTENT attention and care, though it’s difficult because.        <ul>          <li>You’ll be routinely tempted to invest your resources elsewhere that provide you a more immediate payoff.</li>          <li>Your family and friends rarely shout the loudest to demand your attention.</li>        </ul>      </li>      <li>The clock of building a fulfilling relationship is ticking from the start.</li>      <li>Understand what’s the most important to the other person by asking yourself “What job does one most need me to do?”.</li>      <li>Children need to do more than learning new skills.        <ul>          <li>Allow them to be challenged, let them solve hard problems independently and develop values themselves.</li>          <li>Don’t afraid to let them fail.</li>        </ul>      </li>    </ul>  </li>  <li>Live a life of integrity (or stay out of jail):    <ul>      <li>Integrity requires constant self-awareness.</li>      <li>The best way to avoid the consequences of uncomfortable moral concessions is to never start making one in the first place.</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/13425570-how-will-you-measure-your-life\">https://www.goodreads.com/book/show/13425570-how-will-you-measure-your-life</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/03/13/how-will-you-measure-your-life",
            
            
            
            "tags": ["book","career","relationship"],
            
            "date_published": "2020-03-13T00:00:00-04:00",
            "date_modified": "2020-03-13T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/03/13/getting-real",
            "title": "Jason Fried, Getting Real",
            "summary": null,
            "content_text": "  The starting line:          Build less: less features, options, people, meetings, promises.      Solve your problem.                  You know what’s is important and what’s not for the product itself.          It’s likely people have the same problem so now you have a market too.                    Fund yourself                  Outside funding is plan B.          Investors want their money back quickly -&gt; overhead + other complicated things follow.          Money constraints force you to focus + allow creativity.                    Fix time and budget, flex scope: better to launch great thing, on time, on a budget in small scope than big ones with many holes.      Pick up an enemy and use it as an motivation to tell better story.      If your app doesn’t excite you, something’s wrong.        Stay lean.          Simplify + focus.      Lower the cost of change -&gt; change faster (huge advantage over big company).      Start with 3 people: a developer, a designer, and a sweeper who can roam between both world.      Work with your limited resources. Forget about VC, long release cycles, quick hires,…      Stay small and friendly -&gt; get closer to customer.        Priorities.          What is the app vision? Why does it exit? What makes it different?      Don’t get too deep in the details early one. Ship it first and optimize it later.      Don’t waste time on problems you don’t have yet:                  Scaling to millions of users? Stop dreaming! Majority of apps are never going to reach that phase. Worry about it later once it’s wildly successful.          Make decisions in time.                    Find the right audience.                  Narrow the market.          Focus on the nice or small group of people who wants the product the most.          Don’t try to please everyone.                    Make opinionated software, choose side, like every great companies (Apple, Google, Nitendo).        Feature selection.          What is the heart of the app?                  Forget milestone, TODO lists.          Just focus on the essential.          Let it gain traction. Then add to that foundation.                    Focus on what matters, REALLY. Cut off everything else.      Learn to say no because you have to do that a lot.      For every new feature, you need to:                  Say no.          Force the feature to provide its value.          If no, end. If yes, continue.          Sketch the UI.          Design the UI.          Code.          Test, tweak, repeat.          Document.          Market.          Revisit pricing options, term of service.          Launch.                    Build something that you can manage, organizationally, strategically, financially.      Don’t worry too much about feature requests. Customers will constantly remind you about that.      Ask customer what they don’t want too and simplify it if possible.        Process.          Get something real up and running quickly: it’s OK to do less, skip details, take shortcuts.                  Fail fast and learn.          Avoid unproductive scheduling and action faking (doing bullshit works that feel “productive” that doesn’t get you closer to launching).                    Idea-to-implementation cycle.                  What does the app need to do? What exactly are you going to make?          Sketch it out on paper.          Create mock-up html screens.          Code.                    Allowing options/preferences for customers is not necessarily helping them.                  If you make a bad call, they will complain, then you can fix it.                    Execute. Build momentum. Move on.      Test in the wild.                  Get it out there. Get real results + feedback.          Instead of having a beta version and a release version, have beta features in side the release one so you can have real data + workflow.          Break it down into smaller problems and solve it one by one.                      Organization.          Build a healthy organization.      Utilize your alone time to get work done.      Meetings are normally unproductive.      Have fewer meetings.      Only have it with a clear agenda.      Release something today. Celebrate small victories.        Staffing.          Hire less, only when it’s really needed.      Working with prospective employees on a real project can give a lot of insights. However, not everyone has time for that.      Look at people codes + contribution on open-source projects.      Go for quick learning generalists over ingrained specialists.      Go for happy one.      Hire good writers because they know how to communicate.        Interface.          Design the interface before you start coding.      Start from the core page and build outward. Focus on what matters.      For each page, consider these 3 states:                  Blank: the screen before data is entered (could insert quick tutorials, help blurbs, examples with mock data,…)          Regular: normal page          Error: when shit happens                    It’s OK to be inconsistent if your design makes more sense that way      Every letter matters.                  Don’t sound like an engineer talking to another engineer.          Keep it short and sweet.                    Incorporate admin function into public interfaces so you don’t need to manage 2 different versions.        Code.          Keep it simple. But be mindful about technical debt.      Less maintenance and support work.      Low cost of change.      Fewer bugs.      Choose the tools that everyone is happy and productive with.      Get data into the world via RSS, API,…        Words.          Document what is needed but nothing else.      Write stories, not details.                  Don’t get into the technical/design details, just a quick story.          Treat it as a normal conversation.                    Use real data if possible, not dummy text all the time -&gt; focus on the UX.      What is your product’s personality type?        Pricing and signup          Give something for free. Let  people experience and see its usefulness.      Make signup and cancellation easy.      Avoid long term contract, signup fee,…        Promotion.          Teaser (dropping hints), preview, launch.      Build a promo site: overview, tour, screenshots, videos, manifesto, case studies, buzz (customers, press reviews,…), forum, pricing and signup, blog,…      Blogging can be more effective (and cheaper) than advertising. Could write about advices, tips, tricks, links,…      Start collecting emails asap.      Share your knowledge. Teaching/educating is a great way to market yourself and your product too.                  Blog (as above).          Speak at conferences.          Conduct workshops.          Give interviews.          Write articles/books                    Track your online present. Leave comments, thank you notes, response to negative ones thoughtfully.      Promote upgrade, in-app purchases.      Pick an short, catchy, memorable name.        Support.          Feel the pain yourself. Don’t outsource. Learn from it.      Use inline help and FAQ instead of giving manual training.      Just response quickly even if you don’t have a perfect answer (during business hour).      Also thank them for their input.      Be willing to say no.      Use forum or chat to let customers help each other.      Be open, honest, transparent (yeah bad news).        Post launch.          Issue a major update 30 days after launch.      Don’t stop blogging: new FAQs, tutorials, news, features, updates, fixes, buzz/press.      Prioritize your bugs.      Wait before the storm, 1-2 days after releasing a new feature and hearing complaints, then take action.      Know your competitors.      More mature doesn’t mean more complicated, as long as you provide valuable services that’s fine.      Be open to new paths and changes in direction .      References:  https://basecamp.com/books/getting-real",
            "content_html": "<ul>  <li>The starting line:    <ul>      <li>Build less: less features, options, people, meetings, promises.</li>      <li>Solve your problem.        <ul>          <li>You know what’s is important and what’s not for the product itself.</li>          <li>It’s likely people have the same problem so now you have a market too.</li>        </ul>      </li>      <li>Fund yourself        <ul>          <li>Outside funding is plan B.</li>          <li>Investors want their money back quickly -&gt; overhead + other complicated things follow.</li>          <li>Money constraints force you to focus + allow creativity.</li>        </ul>      </li>      <li>Fix time and budget, flex scope: better to launch great thing, on time, on a budget in small scope than big ones with many holes.</li>      <li>Pick up an enemy and use it as an motivation to tell better story.</li>      <li>If your app doesn’t excite you, something’s wrong.</li>    </ul>  </li>  <li>Stay lean.    <ul>      <li>Simplify + focus.</li>      <li>Lower the cost of change -&gt; change faster (huge advantage over big company).</li>      <li>Start with 3 people: a developer, a designer, and a sweeper who can roam between both world.</li>      <li>Work with your limited resources. Forget about VC, long release cycles, quick hires,…</li>      <li>Stay small and friendly -&gt; get closer to customer.</li>    </ul>  </li>  <li>Priorities.    <ul>      <li>What is the app vision? Why does it exit? What makes it different?</li>      <li>Don’t get too deep in the details early one. Ship it first and optimize it later.</li>      <li>Don’t waste time on problems you don’t have yet:        <ul>          <li>Scaling to millions of users? Stop dreaming! Majority of apps are never going to reach that phase. Worry about it later once it’s wildly successful.</li>          <li>Make decisions in time.</li>        </ul>      </li>      <li>Find the right audience.        <ul>          <li>Narrow the market.</li>          <li>Focus on the nice or small group of people who wants the product the most.</li>          <li>Don’t try to please everyone.</li>        </ul>      </li>      <li>Make opinionated software, choose side, like every great companies (Apple, Google, Nitendo).</li>    </ul>  </li>  <li>Feature selection.    <ul>      <li>What is the heart of the app?        <ul>          <li>Forget milestone, TODO lists.</li>          <li>Just focus on the essential.</li>          <li>Let it gain traction. Then add to that foundation.</li>        </ul>      </li>      <li>Focus on what matters, REALLY. Cut off everything else.</li>      <li>Learn to say no because you have to do that a lot.</li>      <li>For every new feature, you need to:        <ul>          <li>Say no.</li>          <li>Force the feature to provide its value.</li>          <li>If no, end. If yes, continue.</li>          <li>Sketch the UI.</li>          <li>Design the UI.</li>          <li>Code.</li>          <li>Test, tweak, repeat.</li>          <li>Document.</li>          <li>Market.</li>          <li>Revisit pricing options, term of service.</li>          <li>Launch.</li>        </ul>      </li>      <li>Build something that you can manage, organizationally, strategically, financially.</li>      <li>Don’t worry too much about feature requests. Customers will constantly remind you about that.</li>      <li>Ask customer what they don’t want too and simplify it if possible.</li>    </ul>  </li>  <li>Process.    <ul>      <li>Get something real up and running quickly: it’s OK to do less, skip details, take shortcuts.        <ul>          <li>Fail fast and learn.</li>          <li>Avoid unproductive scheduling and action faking (doing bullshit works that feel “productive” that doesn’t get you closer to launching).</li>        </ul>      </li>      <li>Idea-to-implementation cycle.        <ul>          <li>What does the app need to do? What exactly are you going to make?</li>          <li>Sketch it out on paper.</li>          <li>Create mock-up html screens.</li>          <li>Code.</li>        </ul>      </li>      <li>Allowing options/preferences for customers is not necessarily helping them.        <ul>          <li>If you make a bad call, they will complain, then you can fix it.</li>        </ul>      </li>      <li>Execute. Build momentum. Move on.</li>      <li>Test in the wild.        <ul>          <li>Get it out there. Get real results + feedback.</li>          <li>Instead of having a beta version and a release version, have beta features in side the release one so you can have real data + workflow.</li>          <li>Break it down into smaller problems and solve it one by one.</li>        </ul>      </li>    </ul>  </li>  <li>Organization.    <ul>      <li>Build a healthy organization.</li>      <li>Utilize your alone time to get work done.</li>      <li>Meetings are normally unproductive.</li>      <li>Have fewer meetings.</li>      <li>Only have it with a clear agenda.</li>      <li>Release something today. Celebrate small victories.</li>    </ul>  </li>  <li>Staffing.    <ul>      <li>Hire less, only when it’s really needed.</li>      <li>Working with prospective employees on a real project can give a lot of insights. However, not everyone has time for that.</li>      <li>Look at people codes + contribution on open-source projects.</li>      <li>Go for quick learning generalists over ingrained specialists.</li>      <li>Go for happy one.</li>      <li>Hire good writers because they know how to communicate.</li>    </ul>  </li>  <li>Interface.    <ul>      <li>Design the interface before you start coding.</li>      <li>Start from the core page and build outward. Focus on what matters.</li>      <li>For each page, consider these 3 states:        <ul>          <li>Blank: the screen before data is entered (could insert quick tutorials, help blurbs, examples with mock data,…)</li>          <li>Regular: normal page</li>          <li>Error: when shit happens</li>        </ul>      </li>      <li>It’s OK to be inconsistent if your design makes more sense that way</li>      <li>Every letter matters.        <ul>          <li>Don’t sound like an engineer talking to another engineer.</li>          <li>Keep it short and sweet.</li>        </ul>      </li>      <li>Incorporate admin function into public interfaces so you don’t need to manage 2 different versions.</li>    </ul>  </li>  <li>Code.    <ul>      <li>Keep it simple. But be mindful about technical debt.</li>      <li>Less maintenance and support work.</li>      <li>Low cost of change.</li>      <li>Fewer bugs.</li>      <li>Choose the tools that everyone is happy and productive with.</li>      <li>Get data into the world via RSS, API,…</li>    </ul>  </li>  <li>Words.    <ul>      <li>Document what is needed but nothing else.</li>      <li>Write stories, not details.        <ul>          <li>Don’t get into the technical/design details, just a quick story.</li>          <li>Treat it as a normal conversation.</li>        </ul>      </li>      <li>Use real data if possible, not dummy text all the time -&gt; focus on the UX.</li>      <li>What is your product’s personality type?</li>    </ul>  </li>  <li>Pricing and signup    <ul>      <li>Give something for free. Let  people experience and see its usefulness.</li>      <li>Make signup and cancellation easy.</li>      <li>Avoid long term contract, signup fee,…</li>    </ul>  </li>  <li>Promotion.    <ul>      <li>Teaser (dropping hints), preview, launch.</li>      <li>Build a promo site: overview, tour, screenshots, videos, manifesto, case studies, buzz (customers, press reviews,…), forum, pricing and signup, blog,…</li>      <li>Blogging can be more effective (and cheaper) than advertising. Could write about advices, tips, tricks, links,…</li>      <li>Start collecting emails asap.</li>      <li>Share your knowledge. Teaching/educating is a great way to market yourself and your product too.        <ul>          <li>Blog (as above).</li>          <li>Speak at conferences.</li>          <li>Conduct workshops.</li>          <li>Give interviews.</li>          <li>Write articles/books</li>        </ul>      </li>      <li>Track your online present. Leave comments, thank you notes, response to negative ones thoughtfully.</li>      <li>Promote upgrade, in-app purchases.</li>      <li>Pick an short, catchy, memorable name.</li>    </ul>  </li>  <li>Support.    <ul>      <li>Feel the pain yourself. Don’t outsource. Learn from it.</li>      <li>Use inline help and FAQ instead of giving manual training.</li>      <li>Just response quickly even if you don’t have a perfect answer (during business hour).</li>      <li>Also thank them for their input.</li>      <li>Be willing to say no.</li>      <li>Use forum or chat to let customers help each other.</li>      <li>Be open, honest, transparent (yeah bad news).</li>    </ul>  </li>  <li>Post launch.    <ul>      <li>Issue a major update 30 days after launch.</li>      <li>Don’t stop blogging: new FAQs, tutorials, news, features, updates, fixes, buzz/press.</li>      <li>Prioritize your bugs.</li>      <li>Wait before the storm, 1-2 days after releasing a new feature and hearing complaints, then take action.</li>      <li>Know your competitors.</li>      <li>More mature doesn’t mean more complicated, as long as you provide valuable services that’s fine.</li>      <li>Be open to new paths and changes in direction .</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://basecamp.com/books/getting-real\">https://basecamp.com/books/getting-real</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/03/13/getting-real",
            
            
            
            "tags": ["book","productivity","business"],
            
            "date_published": "2020-03-13T00:00:00-04:00",
            "date_modified": "2020-03-13T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/03/12/the-effective-engineer",
            "title": "Edmond Lau, The Effective Engineer",
            "summary": null,
            "content_text": "  Focus on high-leverage activities.          Leverage: impact produced / time invested.      80/20 rule: 80% impact comes from 20% work.      Focus on not more hours but more value per limited time on the task.      Increase leverage by:                  Reduce the time it takes to complete the activity (default to half-hour meeting instead of one-hour one, automate manual dev process).          Increase the value produced (have a clear agenda beforehand, prioritize tasks based on launch date).          Shift to higher-leverage activities (use email instead of in-person discussion, talk to customer).                    Output can be measured by:                  Number of projects launched          Bug fixes          Users acquired          Engineers hired          Quality          Revenue generated                      Understand the power of compound interest.          Compounding leads to an exponential growth curve.      The earlier compounding starts, the sooner it hits the exponential growth, the faster you can reap its benefits.      Small deltas in the interest rate can make massive differences in the long run:                  Improving by 1% per day makes us 37x better at the end of year.          Google idea of 20% where engineers spend about 1 day a week on a side project to make the company better results in successful products such as Gmail , Google News, Adsense,…                      Optimize for learning because learning compounds.          Find fast growing work environment.      Take advantage of the resources at your work.                  Study code from best engineers.          Write more code.          Go through technical, educational material.          Send code views to the harshest critics.          Participate in design discussions - don’t wait for invitation.          Team with senior engineers.                    Invest in other skills too.                  Invest in skills that are in high demand.          Build strong relationships.          Read books.          Write to teach.          Pursue side projects.                      Prioritize regularly.          Track TODO list in a single list.      Sort the list frequently by asking yourself on a recurring basis:                  Is there anything else I could be doing that’s higher-leverage?                          Focus on what directly produce value (products shipped, user acquired, business metrics moved, sales made).              Focus on the important and non-urgent (planning career goals, building relationships, personal development, improving workflow).                                          Preserve larger blocks of focused time + learn to say no unimportant activities.      Limit the amount of work in progress + resist the urge to work on too many projects at once.      Make it a habit.        Iterate quickly to build more and learn faster.          Invest in time-saving tools.                  Bringing the release time down to several minutes helps the team deploy more frequently, 40-50 times a day - skyrockets growth.          If it saves you 1 hour a day, it saves 10 people 10 times as much.                    Measure the progress frequently.        Validate early and often.          A well tested, clean design, scalable product doesn’t deliver much value if users don’t engage or customers don’t buy it.      Bounce ideas off teammates.        Define measurable milestones.References:  https://www.effectiveengineer.com/book",
            "content_html": "<ul>  <li>Focus on high-leverage activities.    <ul>      <li>Leverage: impact produced / time invested.</li>      <li>80/20 rule: 80% impact comes from 20% work.</li>      <li>Focus on not more hours but more value per limited time on the task.</li>      <li>Increase leverage by:        <ul>          <li>Reduce the time it takes to complete the activity (default to half-hour meeting instead of one-hour one, automate manual dev process).</li>          <li>Increase the value produced (have a clear agenda beforehand, prioritize tasks based on launch date).</li>          <li>Shift to higher-leverage activities (use email instead of in-person discussion, talk to customer).</li>        </ul>      </li>      <li>Output can be measured by:        <ul>          <li>Number of projects launched</li>          <li>Bug fixes</li>          <li>Users acquired</li>          <li>Engineers hired</li>          <li>Quality</li>          <li>Revenue generated</li>        </ul>      </li>    </ul>  </li>  <li>Understand the power of compound interest.    <ul>      <li>Compounding leads to an exponential growth curve.</li>      <li>The earlier compounding starts, the sooner it hits the exponential growth, the faster you can reap its benefits.</li>      <li>Small deltas in the interest rate can make massive differences in the long run:        <ul>          <li>Improving by 1% per day makes us 37x better at the end of year.</li>          <li>Google idea of 20% where engineers spend about 1 day a week on a side project to make the company better results in successful products such as Gmail , Google News, Adsense,…</li>        </ul>      </li>    </ul>  </li>  <li>Optimize for learning because learning compounds.    <ul>      <li>Find fast growing work environment.</li>      <li>Take advantage of the resources at your work.        <ul>          <li>Study code from best engineers.</li>          <li>Write more code.</li>          <li>Go through technical, educational material.</li>          <li>Send code views to the harshest critics.</li>          <li>Participate in design discussions - don’t wait for invitation.</li>          <li>Team with senior engineers.</li>        </ul>      </li>      <li>Invest in other skills too.        <ul>          <li>Invest in skills that are in high demand.</li>          <li>Build strong relationships.</li>          <li>Read books.</li>          <li>Write to teach.</li>          <li>Pursue side projects.</li>        </ul>      </li>    </ul>  </li>  <li>Prioritize regularly.    <ul>      <li>Track TODO list in a single list.</li>      <li>Sort the list frequently by asking yourself on a recurring basis:        <ul>          <li>Is there anything else I could be doing that’s higher-leverage?            <ul>              <li>Focus on what directly produce value (products shipped, user acquired, business metrics moved, sales made).</li>              <li>Focus on the important and non-urgent (planning career goals, building relationships, personal development, improving workflow).</li>            </ul>          </li>        </ul>      </li>      <li>Preserve larger blocks of focused time + learn to say no unimportant activities.</li>      <li>Limit the amount of work in progress + resist the urge to work on too many projects at once.</li>      <li>Make it a habit.</li>    </ul>  </li>  <li>Iterate quickly to build more and learn faster.    <ul>      <li>Invest in time-saving tools.        <ul>          <li>Bringing the release time down to several minutes helps the team deploy more frequently, 40-50 times a day - skyrockets growth.</li>          <li>If it saves you 1 hour a day, it saves 10 people 10 times as much.</li>        </ul>      </li>      <li>Measure the progress frequently.</li>    </ul>  </li>  <li>Validate early and often.    <ul>      <li>A well tested, clean design, scalable product doesn’t deliver much value if users don’t engage or customers don’t buy it.</li>      <li>Bounce ideas off teammates.</li>    </ul>  </li>  <li>Define measurable milestones.</li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.effectiveengineer.com/book\">https://www.effectiveengineer.com/book</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/03/12/the-effective-engineer",
            
            
            
            "tags": ["book","productivity","impact","compound"],
            
            "date_published": "2020-03-12T00:00:00-04:00",
            "date_modified": "2020-03-12T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/03/12/dont-call-yourself-a-programmer",
            "title": "Patrick McKenzie, Don't Call Yourself A Programmer",
            "summary": null,
            "content_text": "  Software solves business problems. It doesn’t matter if your app has the most elegant architecture, it must create value for the company aka brings in revenue.  Engineers are hired to create business value.          Non-goals: produce the beautiful software, solve complex technical problems, use sexy frameworks.      Actual goals: add revenue, reduce costs - “wrote the backend billing code that 97% of Google’s revenue passes through”.      That’s why Quants makes more in bonuses in a good year than many talented engineers will earn in a lifetime.        Angel investor is a polite synonym for rich.  Most hiring happens privately.          Resume is not the primary way to get job interviews, but connections do.      Networking means:                  Meet people at some point can help you.          Make a favorable impression on them.                    Strive to help people first so it’s harder for them to refuse to help you later.        Academia is not like the real world.  People who are skilled in negotiation make more than those who are not.          Sell solution to a business need rather than your programming skill.      Learn to negotiate better. (Getting to Yes)        Working at a startup vs megacorp is more of a lifestyle choice.  Your most important professional skill is communication.  Engineers are not hired to create programs. They are hired to create business value. The dominant quality which gets you jobs is the ability to give people the perception that you will create value.  This is not necessarily coextensive with ability to create value.  Try for “It was a privilege to assist my team by leading their efforts with regards to $YOUR_SPECIALTY.” instead of “I owe it all to my team”.  Read Never Eat Alone for some social grooming hack.  Work to live, don’t live to work.References:  https://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/",
            "content_html": "<ul>  <li>Software solves business problems. It doesn’t matter if your app has the most elegant architecture, it must create value for the company aka brings in revenue.</li>  <li>Engineers are hired to create business value.    <ul>      <li>Non-goals: produce the beautiful software, solve complex technical problems, use sexy frameworks.</li>      <li>Actual goals: add revenue, reduce costs - “wrote the backend billing code that 97% of Google’s revenue passes through”.</li>      <li>That’s why Quants makes more in bonuses in a good year than many talented engineers will earn in a lifetime.</li>    </ul>  </li>  <li>Angel investor is a polite synonym for rich.</li>  <li>Most hiring happens privately.    <ul>      <li>Resume is not the primary way to get job interviews, but connections do.</li>      <li>Networking means:        <ul>          <li>Meet people at some point can help you.</li>          <li>Make a favorable impression on them.</li>        </ul>      </li>      <li>Strive to help people first so it’s harder for them to refuse to help you later.</li>    </ul>  </li>  <li>Academia is not like the real world.</li>  <li>People who are skilled in negotiation make more than those who are not.    <ul>      <li>Sell solution to a business need rather than your programming skill.</li>      <li>Learn to negotiate better. (Getting to Yes)</li>    </ul>  </li>  <li>Working at a startup vs megacorp is more of a lifestyle choice.</li>  <li>Your most important professional skill is communication.</li>  <li>Engineers are not hired to create programs. They are hired to create business value. The dominant quality which gets you jobs is the ability to give people the perception that you will create value.  This is not necessarily coextensive with ability to create value.</li>  <li>Try for “It was a privilege to assist my team by leading their efforts with regards to $YOUR_SPECIALTY.” instead of “I owe it all to my team”.</li>  <li>Read Never Eat Alone for some social grooming hack.</li>  <li>Work to live, don’t live to work.</li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/\">https://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/03/12/dont-call-yourself-a-programmer",
            
            
            
            "tags": ["blog","business","negotiation"],
            
            "date_published": "2020-03-12T00:00:00-04:00",
            "date_modified": "2020-03-12T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/02/10/object-oriented-design",
            "title": "Object Oriented Design Patterns",
            "summary": null,
            "content_text": "Facebook  Admin: add/modify members  Member: seach for other members, groups, pages, posts, as well as send friend requests, create posts  System: send notifications for new messages, friend requestsAmazon  Admin: add/modify products and users  Member: search the catalog, add/remove items to the shopping cart, options to pay  System: send notifications for orders and shipping updatesLinkedIn  Member: search for other members, companies or jobs, send requests for connection, create posts  System: send  notifications for new messages, connections invitesStack Overflow  Admin: add/modify members  Member: search/view/add/modify questions, answers, and comments  Moderator: same as member, in addition to which one can close/delete/undelete any question  System: send notifications, assign badges to membersLibrary Management System  Librarian: add/modify books and users  Member: search the catalog, check-out, reserve, renew, return books  System: send notifications for overdue books, cancel reservationsParking Lot  Admin: add/modify parking spots and attendants  Customer: have parking tickets, options to payMovie Ticket Booking  Admin: add/modify movies, tickets, customers  Customer: view movie schedules, book/cancel tickets  System: send notifications for new movies, bookings, cancellationsCard Game  Dealer: deal cards and game resolution  Player: places bets, accept/decline offered resolutionHotel Management System  Member: search the available rooms, make bookings  Receptionist: add/modify rooms, create room bookings, check-in, and check-out customers  System: send notifications for room booking, cancellation  Manager: add/modify housekeeping/service record of roomsRestaurant Management System  Receptionist: add/modify tables, layout, reservations  Waiter: take/modify orders  Manager: add/modify the menu  Chef: view/work on an order  Cashier: generate checks and process payments  System: sending notifications, table reservations, cancellationsStock Brokerage System  Admin: add/modify members  Member: search the stock inventory, buy/sell stocks  System: send notifications for stock ordersReferences:  https://www.educative.io/courses/grokking-the-object-oriented-design-interview",
            "content_html": "<h3 id=\"facebook\">Facebook</h3><ul>  <li>Admin: add/modify members</li>  <li>Member: seach for other members, groups, pages, posts, as well as send friend requests, create posts</li>  <li>System: send notifications for new messages, friend requests</li></ul><h3 id=\"amazon\">Amazon</h3><ul>  <li>Admin: add/modify products and users</li>  <li>Member: search the catalog, add/remove items to the shopping cart, options to pay</li>  <li>System: send notifications for orders and shipping updates</li></ul><h3 id=\"linkedin\">LinkedIn</h3><ul>  <li>Member: search for other members, companies or jobs, send requests for connection, create posts</li>  <li>System: send  notifications for new messages, connections invites</li></ul><h3 id=\"stack-overflow\">Stack Overflow</h3><ul>  <li>Admin: add/modify members</li>  <li>Member: search/view/add/modify questions, answers, and comments</li>  <li>Moderator: same as member, in addition to which one can close/delete/undelete any question</li>  <li>System: send notifications, assign badges to members</li></ul><h3 id=\"library-management-system\">Library Management System</h3><ul>  <li>Librarian: add/modify books and users</li>  <li>Member: search the catalog, check-out, reserve, renew, return books</li>  <li>System: send notifications for overdue books, cancel reservations</li></ul><h3 id=\"parking-lot\">Parking Lot</h3><ul>  <li>Admin: add/modify parking spots and attendants</li>  <li>Customer: have parking tickets, options to pay</li></ul><h3 id=\"movie-ticket-booking\">Movie Ticket Booking</h3><ul>  <li>Admin: add/modify movies, tickets, customers</li>  <li>Customer: view movie schedules, book/cancel tickets</li>  <li>System: send notifications for new movies, bookings, cancellations</li></ul><h3 id=\"card-game\">Card Game</h3><ul>  <li>Dealer: deal cards and game resolution</li>  <li>Player: places bets, accept/decline offered resolution</li></ul><h3 id=\"hotel-management-system\">Hotel Management System</h3><ul>  <li>Member: search the available rooms, make bookings</li>  <li>Receptionist: add/modify rooms, create room bookings, check-in, and check-out customers</li>  <li>System: send notifications for room booking, cancellation</li>  <li>Manager: add/modify housekeeping/service record of rooms</li></ul><h3 id=\"restaurant-management-system\">Restaurant Management System</h3><ul>  <li>Receptionist: add/modify tables, layout, reservations</li>  <li>Waiter: take/modify orders</li>  <li>Manager: add/modify the menu</li>  <li>Chef: view/work on an order</li>  <li>Cashier: generate checks and process payments</li>  <li>System: sending notifications, table reservations, cancellations</li></ul><h3 id=\"stock-brokerage-system\">Stock Brokerage System</h3><ul>  <li>Admin: add/modify members</li>  <li>Member: search the stock inventory, buy/sell stocks</li>  <li>System: send notifications for stock orders</li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.educative.io/courses/grokking-the-object-oriented-design-interview\">https://www.educative.io/courses/grokking-the-object-oriented-design-interview</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/02/10/object-oriented-design",
            
            
            
            
            
            "date_published": "2020-02-10T00:00:00-05:00",
            "date_modified": "2020-02-10T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/01/16/aom-testosterone-experiment",
            "title": "The Art of Manliness, Testosterone Experiment",
            "summary": null,
            "content_text": "  How testosterone is made:          Sub-types of testosterone:                  Free: purest form with no protein attached, has the most benefits though only makes up 2-3% of our total testosterone          SHBG-bound: help regulating the amount of free testosterone, biologically inactive (our bodies can’t use this type of testosterone to help build muscles or boost our mood), makes up 40-50% of our total testosterone          Albumin-bound: stabilize extra-cellular fluid volumes, also biologically inactive though can be easily broken in order to create free testosterone when needed                    A small percentage of testosterone is made in the adrenal glands on top of our kidneys, but 95% of it is made in our testicles.        Testosterone deficiency downsides:          Men suffering from depression typically have low T level.      As the T level decreases, the body’s ability to regulate insulin decreases, causes fat to accumulate, put one at higher risk for type 2 diabetes.      Low libido and erectile dysfunction are two of the first signs of low testosterone.      Low testosterone levels to an increased risk of Alzheimer’s disease as well as the cognitive ability issues (memory loss, trouble concentrating, fogginess).        The keys to increasing testosterone level naturally are eating better, exercising smarter, and getting more sleep.          Eat more high-fat foods.                  Higher fat and cholesterol consumption results in increased levels of total T.          High protein and low carb could cause the T level to decrease.          Broccoli, cauliflower, and cabbage remove estrogens that lower our T.          Author’s diet (40% carb, 30% protein, 30% fats):                          Breakfast: three slices of bacon and three whole eggs              Lunch: salad mix: meat (the fattier the better), Brazil nuts/walnuts, avocados/olives, spinach, broccoli              Dinner: whatever though try to get as much as carb from veggie and fruit                                          If you want to take supplements, consider vitamin D3 and omega3 fish oil, though they only help a bit.      Exercise regularly.                  Strength training: Starting Strength, 5/3/1 program.          HIIT training.          Don’t overtrai (3-4 times a week is good), move more instead.                    Get better sleep.                  If you don’t have “morning wood” on a consistent basis, you might have low T.          If you’re not getting enough quality sleep, your body can’t produce testosterone as efficiently or effectively.          Try to get 8 to 9 hours of sleep consistently.                    Manage stress.                  Go for long walk.          Practice deep breathing exercise.                    Avoid xenoestrogens chemicals by using organic products.      Have more sex.      Take cold bath.      References:  https://www.artofmanliness.com/articles/testosterone-benefits/  https://www.artofmanliness.com/articles/how-testosterone-is-made/  https://www.artofmanliness.com/articles/how-to-increase-testosterone-naturally/  https://www.artofmanliness.com/articles/an-update-on-my-testosterone-boosting-experiment-7-years-later/",
            "content_html": "<ul>  <li>How testosterone is made:    <ul>      <li>Sub-types of testosterone:        <ul>          <li>Free: purest form with no protein attached, has the most benefits though only makes up 2-3% of our total testosterone</li>          <li>SHBG-bound: help regulating the amount of free testosterone, biologically inactive (our bodies can’t use this type of testosterone to help build muscles or boost our mood), makes up 40-50% of our total testosterone</li>          <li>Albumin-bound: stabilize extra-cellular fluid volumes, also biologically inactive though can be easily broken in order to create free testosterone when needed</li>        </ul>      </li>      <li>A small percentage of testosterone is made in the adrenal glands on top of our kidneys, but 95% of it is made in our testicles.</li>    </ul>  </li>  <li>Testosterone deficiency downsides:    <ul>      <li>Men suffering from depression typically have low T level.</li>      <li>As the T level decreases, the body’s ability to regulate insulin decreases, causes fat to accumulate, put one at higher risk for type 2 diabetes.</li>      <li>Low libido and erectile dysfunction are two of the first signs of low testosterone.</li>      <li>Low testosterone levels to an increased risk of Alzheimer’s disease as well as the cognitive ability issues (memory loss, trouble concentrating, fogginess).</li>    </ul>  </li>  <li>The keys to increasing testosterone level naturally are eating better, exercising smarter, and getting more sleep.    <ul>      <li>Eat more high-fat foods.        <ul>          <li>Higher fat and cholesterol consumption results in increased levels of total T.</li>          <li>High protein and low carb could cause the T level to decrease.</li>          <li>Broccoli, cauliflower, and cabbage remove estrogens that lower our T.</li>          <li>Author’s diet (40% carb, 30% protein, 30% fats):            <ul>              <li>Breakfast: three slices of bacon and three whole eggs</li>              <li>Lunch: salad mix: meat (the fattier the better), Brazil nuts/walnuts, avocados/olives, spinach, broccoli</li>              <li>Dinner: whatever though try to get as much as carb from veggie and fruit</li>            </ul>          </li>        </ul>      </li>      <li>If you want to take supplements, consider vitamin D3 and omega3 fish oil, though they only help a bit.</li>      <li>Exercise regularly.        <ul>          <li>Strength training: Starting Strength, 5/3/1 program.</li>          <li>HIIT training.</li>          <li>Don’t overtrai (3-4 times a week is good), move more instead.</li>        </ul>      </li>      <li>Get better sleep.        <ul>          <li>If you don’t have “morning wood” on a consistent basis, you might have low T.</li>          <li>If you’re not getting enough quality sleep, your body can’t produce testosterone as efficiently or effectively.</li>          <li>Try to get 8 to 9 hours of sleep consistently.</li>        </ul>      </li>      <li>Manage stress.        <ul>          <li>Go for long walk.</li>          <li>Practice deep breathing exercise.</li>        </ul>      </li>      <li>Avoid xenoestrogens chemicals by using organic products.</li>      <li>Have more sex.</li>      <li>Take cold bath.</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.artofmanliness.com/articles/testosterone-benefits/\">https://www.artofmanliness.com/articles/testosterone-benefits/</a></li>  <li><a href=\"https://www.artofmanliness.com/articles/how-testosterone-is-made/\">https://www.artofmanliness.com/articles/how-testosterone-is-made/</a></li>  <li><a href=\"https://www.artofmanliness.com/articles/how-to-increase-testosterone-naturally/\">https://www.artofmanliness.com/articles/how-to-increase-testosterone-naturally/</a></li>  <li><a href=\"https://www.artofmanliness.com/articles/an-update-on-my-testosterone-boosting-experiment-7-years-later/\">https://www.artofmanliness.com/articles/an-update-on-my-testosterone-boosting-experiment-7-years-later/</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/01/16/aom-testosterone-experiment",
            
            
            
            "tags": ["health","testosterone"],
            
            "date_published": "2020-01-16T00:00:00-05:00",
            "date_modified": "2020-01-16T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/01/15/super-human",
            "title": "Dave Asprey, Super Human",
            "summary": null,
            "content_text": "  Don’t die.          The 4 killers are heart disease, diabetes, Alzheimer’s, and cancer. Maintaining a healthy diet and lifestyle lowers the risk of developing and dying from these.      Food is an anti-aging drug.                  Stop eating fried, grilled meat.          Avoid grains, produce and animal products. Instead, get:                          Organic vegetables.              Organic fruits.              Meat from pastured animals, eggs, wild fish.                                Eat enough protein for tissue repair - 0.5 gram per pound of body weight.                          Excess protein causes imflamation.                                Eat the right ratios of fat.                          50% saturated - fatty meat, lard, butter, cream, cocounuts)              25% monosaturated (olive oil, avocados, nuts)              15-20% undamaged omega-6              5-10% omega-3 (including EPA, DHA)                                Limit eating window to 8-10 hours a day.          Teach your metabolism to be flexible by practicing a ketogenic diet.                          Fasting (to clean out damaged cells, regenerate healthier cells).              Avoid carbs for a few days.              Add energy fats to your food (coffee).                                Consume more antioxidants to fight of free radicals.                          Berries.              Herbs.              Spices.              Coffee.              Tea.              Dark chocolate.                                          Manage stress.                  Mediate.          Practice yoga.          Get quality sleep.                    Aim for 15-20 minutes of natural sun exposure a day.      Supplement &amp; treatment.                  If you have joint pain or blood sugar issues, consider taking glucosamine because it helps.                          Control blood sugar.              Extends the life-span of mice (probably human too).                                Vitamin D.          Try Zona Plus to help with cardiovascular issues.                      Age backward.          Stop eating sugar, soy, excess omega-6 fats, refined carbs.                  Replace with saturated fat from grass-fed meat, pastured eggs, energy fats.                    Exercise intensely 3 times a week to boost testosterone levels.                  HIIT is real effective.          Make sure to recover fully in between sessions.          Get plenty of quality sleep.                    Consider taking L-tyrosine, vitamin D3, K2, A and zinc to achive healthy hormone levels.      Clean up your diet and your mouth.                  Eliminate sugar.          Try oil pulling.          Brush occasionally with activated charcoal.                    Up your intake of prebiotic fiber.        Heal like a deity.          Spend more time in nature to enhance your immune system.      Make sure your sexual function is that of a young person.                  Consider GAINSWave treatments.          Practice Kegel on a daily basis.                    References:  https://www.goodreads.com/en/book/show/43801612",
            "content_html": "<ul>  <li>Don’t die.    <ul>      <li>The 4 killers are heart disease, diabetes, Alzheimer’s, and cancer. Maintaining a healthy diet and lifestyle lowers the risk of developing and dying from these.</li>      <li>Food is an anti-aging drug.        <ul>          <li>Stop eating fried, grilled meat.</li>          <li>Avoid grains, produce and animal products. Instead, get:            <ul>              <li>Organic vegetables.</li>              <li>Organic fruits.</li>              <li>Meat from pastured animals, eggs, wild fish.</li>            </ul>          </li>          <li>Eat enough protein for tissue repair - 0.5 gram per pound of body weight.            <ul>              <li>Excess protein causes imflamation.</li>            </ul>          </li>          <li>Eat the right ratios of fat.            <ul>              <li>50% saturated - fatty meat, lard, butter, cream, cocounuts)</li>              <li>25% monosaturated (olive oil, avocados, nuts)</li>              <li>15-20% undamaged omega-6</li>              <li>5-10% omega-3 (including EPA, DHA)</li>            </ul>          </li>          <li>Limit eating window to 8-10 hours a day.</li>          <li>Teach your metabolism to be flexible by practicing a ketogenic diet.            <ul>              <li>Fasting (to clean out damaged cells, regenerate healthier cells).</li>              <li>Avoid carbs for a few days.</li>              <li>Add energy fats to your food (coffee).</li>            </ul>          </li>          <li>Consume more antioxidants to fight of free radicals.            <ul>              <li>Berries.</li>              <li>Herbs.</li>              <li>Spices.</li>              <li>Coffee.</li>              <li>Tea.</li>              <li>Dark chocolate.</li>            </ul>          </li>        </ul>      </li>      <li>Manage stress.        <ul>          <li>Mediate.</li>          <li>Practice yoga.</li>          <li>Get quality sleep.</li>        </ul>      </li>      <li>Aim for 15-20 minutes of natural sun exposure a day.</li>      <li>Supplement &amp; treatment.        <ul>          <li>If you have joint pain or blood sugar issues, consider taking glucosamine because it helps.            <ul>              <li>Control blood sugar.</li>              <li>Extends the life-span of mice (probably human too).</li>            </ul>          </li>          <li>Vitamin D.</li>          <li>Try Zona Plus to help with cardiovascular issues.</li>        </ul>      </li>    </ul>  </li>  <li>Age backward.    <ul>      <li>Stop eating sugar, soy, excess omega-6 fats, refined carbs.        <ul>          <li>Replace with saturated fat from grass-fed meat, pastured eggs, energy fats.</li>        </ul>      </li>      <li>Exercise intensely 3 times a week to boost testosterone levels.        <ul>          <li>HIIT is real effective.</li>          <li>Make sure to recover fully in between sessions.</li>          <li>Get plenty of quality sleep.</li>        </ul>      </li>      <li>Consider taking L-tyrosine, vitamin D3, K2, A and zinc to achive healthy hormone levels.</li>      <li>Clean up your diet and your mouth.        <ul>          <li>Eliminate sugar.</li>          <li>Try oil pulling.</li>          <li>Brush occasionally with activated charcoal.</li>        </ul>      </li>      <li>Up your intake of prebiotic fiber.</li>    </ul>  </li>  <li>Heal like a deity.    <ul>      <li>Spend more time in nature to enhance your immune system.</li>      <li>Make sure your sexual function is that of a young person.        <ul>          <li>Consider GAINSWave treatments.</li>          <li>Practice Kegel on a daily basis.</li>        </ul>      </li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/en/book/show/43801612\">https://www.goodreads.com/en/book/show/43801612</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/01/15/super-human",
            
            
            
            "tags": ["book","health","biohacking","diabetes"],
            
            "date_published": "2020-01-15T00:00:00-05:00",
            "date_modified": "2020-01-15T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/01/10/passivity-mediocrity-mental-illness",
            "title": "Why Passivity Breeds Mediocrity and Mental Illness",
            "summary": null,
            "content_text": "Most people spend their time passively consuming.  “Most people are, in the most ordinary sense, very limited. They pass theirtime, day after day, in idle, passive pursuits, just looking at things – atgames, television, whatever. Or they fill the hours talking, mostly aboutnothing of significance – of comings and goings, of who is doing what, of theweather, of things forgotten almost as soon as they are mentioned. They haveno aspirations for themselves beyond getting through another day doing moreor less what they did yesterday. They walk across the stage of life, leavingeverything about as it was when they entered, achieving nothing, aspiring tonothing, having never a profound or even original thought…This is what iscommon, usual, typical, indeed normal. Relatively few rise above such aplodding existence.” (Richard Taylor, Restoring Pride)According to Colin Wilson, too much inactivity, rather than promoting mental health, tends to breed unhappiness and a plethora of psychological problems.  “When he did not occupy his days with interesting tasks, challenges, andproblems to solve, he discovered that depressive moods would soon wash overhim, fog his perceptions, and cause him to become a pessimist of the humancondition.”Even though Wilson’s situation is not applicable to all, the struggle to cultivatean uncommon virtue or skill, produce work of exceptional worth, do something trulyoriginal and do it well is always worth the effort.  “Some people, no doubt, are born, and destined, to be common, to live outtheir lives to no significant purpose, but that is relatively rare…Mostpeople have the power to be creative, and some have it in a god-likedegree…But many people – perhaps even most – are content with the passingpleasures and satisfactions of the animal side of our nature. Indeed, manypeople will account their lives to be successful if they get through themwith only minimal pain, with pleasant divergence from moment to moment andday-to-day, and the general approval of those around them. And this,notwithstanding that they often have within them the ability to do somethingwhich perhaps no other human being has ever done. Merely to do what othershave done is often safe, and comfortable; but to do something truly original,and do it well, whether it is appreciated by others or not – that is whatbeing human is really all about, and it is alone what justifies the self-lovethat is pride.” (Richard Taylor, Restoring Pride)References:  https://academyofideas.com/2018/09/passivity-mediocrity-mental-illness/",
            "content_html": "<p>Most people spend their time passively consuming.</p><blockquote>  <p>“Most people are, in the most ordinary sense, very limited. They pass theirtime, day after day, in idle, passive pursuits, just looking at things – atgames, television, whatever. Or they fill the hours talking, mostly aboutnothing of significance – of comings and goings, of who is doing what, of theweather, of things forgotten almost as soon as they are mentioned. They haveno aspirations for themselves beyond getting through another day doing moreor less what they did yesterday. They walk across the stage of life, leavingeverything about as it was when they entered, achieving nothing, aspiring tonothing, having never a profound or even original thought…This is what iscommon, usual, typical, indeed normal. Relatively few rise above such aplodding existence.” (Richard Taylor, Restoring Pride)</p></blockquote><p>According to Colin Wilson, too much inactivity, rather than promoting mental health, tends to breed unhappiness and a plethora of psychological problems.</p><blockquote>  <p>“When he did not occupy his days with interesting tasks, challenges, andproblems to solve, he discovered that depressive moods would soon wash overhim, fog his perceptions, and cause him to become a pessimist of the humancondition.”</p></blockquote><p>Even though Wilson’s situation is not applicable to all, the struggle to cultivatean uncommon virtue or skill, produce work of exceptional worth, do something trulyoriginal and do it well is always worth the effort.</p><blockquote>  <p>“Some people, no doubt, are born, and destined, to be common, to live outtheir lives to no significant purpose, but that is relatively rare…Mostpeople have the power to be creative, and some have it in a god-likedegree…But many people – perhaps even most – are content with the passingpleasures and satisfactions of the animal side of our nature. Indeed, manypeople will account their lives to be successful if they get through themwith only minimal pain, with pleasant divergence from moment to moment andday-to-day, and the general approval of those around them. And this,notwithstanding that they often have within them the ability to do somethingwhich perhaps no other human being has ever done. Merely to do what othershave done is often safe, and comfortable; but to do something truly original,and do it well, whether it is appreciated by others or not – that is whatbeing human is really all about, and it is alone what justifies the self-lovethat is pride.” (Richard Taylor, Restoring Pride)</p></blockquote><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://academyofideas.com/2018/09/passivity-mediocrity-mental-illness/\">https://academyofideas.com/2018/09/passivity-mediocrity-mental-illness/</a></li></ul>",
            "url": "https://hoanhan101.github.io/2020/01/10/passivity-mediocrity-mental-illness",
            
            
            
            "tags": ["blog","passivity","mediocrity","health"],
            
            "date_published": "2020-01-10T00:00:00-05:00",
            "date_modified": "2020-01-10T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2020/01/06/101-challenges",
            "title": "101+ Coding Interview Problems with Detailed Solutions, Test Cases, and Program Analysis",
            "summary": null,
            "content_text": "Hi friends,4 months ago, I made a redditposton creating a newsletter that sends out 3-6 coding interview problems with detailssolutions every week. To my surprise, the post received a lot of attention andpositive feedback from the community.Since the total number of problems and solutions has just passed 101, I wouldlike to say another big thank you all again for all the support. It reallyhelps me keep going.Moving on, I am hoping to add more questions and then finally condense them into a list ofmost frequently appeared coding interview problems that I think are the mostvaluable and productive to spend time on. Again, my goal has always been tohelp you get good at algorithms and data structures so that you can prepare betterfor your next coding interviews.For those who don’t know, here is the link to all 101+ questions and solutions, sorted byresources →If you’re interested in getting updates for this, feel free to join my maillist here →Best,Hoanh",
            "content_html": "<p>Hi friends,</p><p>4 months ago, I made a <a href=\"https://www.reddit.com/r/learnprogramming/comments/ctyvbc/is_anyone_interested_in_weekly_coding_interview/\">redditpost</a>on creating a newsletter that sends out 3-6 coding interview problems with detailssolutions every week. To my surprise, the post received a lot of attention andpositive feedback from the community.</p><p><strong>Since the total number of problems and solutions has just passed 101, I wouldlike to say another big thank you all again for all the support. It reallyhelps me keep going.</strong></p><p>Moving on, I am hoping to add more questions and then finally condense them into a list ofmost frequently appeared coding interview problems that I think are the mostvaluable and productive to spend time on. Again, my goal has always been tohelp you get good at algorithms and data structures so that you can prepare betterfor your next coding interviews.</p><p>For those who don’t know, <a href=\"https://github.com/hoanhan101/algo\">here is the link to all 101+ questions and solutions, sorted byresources →</a></p><p>If you’re interested in getting updates for this, feel free to join my <a href=\"https://tinyletter.com/hoanhan\">maillist here →</a></p><p>Best,</p><p>Hoanh</p>",
            "url": "https://hoanhan101.github.io/2020/01/06/101-challenges",
            
            
            
            "tags": ["interviewcake","grokking-the-coding-interview","leetcode","cracking-the-coding-interviews","algorithm"],
            
            "date_published": "2020-01-06T00:00:00-05:00",
            "date_modified": "2020-01-06T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/12/24/gtci-tree-bfs",
            "title": "Grokking the Coding Interview's Tree Breath First Search",
            "summary": null,
            "content_text": "1. Given a binary tree, populate the values of all nodes of each level from left to right in separate sub-arrays.Example:- Input:      1\t2   3  4       5  Output: []interface{}{[]interface{}{1}, []interface{}{2, 3}, []interface{}{4, 5}}Approach:- Start by pushing the root node to the queue.- Keep iterating until the queue is empty.- At each step,  - send the front of the queue and dequeue it  - enqueue its left and right childCost:- O(n) time, O(n) space.Link to solution →2. Given a binary tree, populate the values of all nodes of each level in reverse order in separate sub-arrays.Example:- Input:      1\t2   3  4       5  Output: []interface{}{[]interface{}{4, 5}, []interface{}{2, 3}, []interface{}{1}}Approach:- Similar to level order reversal problem, except we append the current level's  value at the beginning of the output list.Cost:- O(n) time, O(n) space.Link to solution →3. Given a binary tree, populate the values of all nodes of each level in a zigzag order in separate sub-arrays.Example:- Input:      1\t2   3  4       5  Output: [][]interface{}{[]interface{}{1}, []interface{}{3, 2}, []interface{}{4, 5}}Approach:- Start by pushing the root node to a queue.- Keep iterating until the queue is empty.- At each step,  - use a linked list to push front or back depending on the zigzag direction  - enqueue its left and right childCost:- O(n) time, O(n) space.Link to solution →4. Given a binary tree, populate an array to represent the averages of all of its levels.Example:- Input:      1\t2   3  4       5  Output: []float64{1, 2.5, 4.5}Approach:- Similar to level order traversal problem, except we keep track of the sum  at each level and return the average in the end.Cost:- O(n) time, O(n) space.Link to solution →5. Given a binary tree, find the minimum depth, aka the number of nodes along the shortest path from the root node to the nearest leaf node.Example:- Input:      1\t2   3  4       5        6   7      8  Output: 3Approach:- Similar to level order traversal problem, except we keep track of the minimum  depth at each level- Return it immediately once we find the leaf node.Cost:- O(n) time, O(n) space.Link to solution →6. Given a binary tree, find the maximum depth.Example:- Input:      1\t2   3  4       5        6   7      8  Output: 5Approach:- Similar to minimum depth problem, we will keep traversing for all  levels, incrementing our maximum depth instead of returning as  soon as we find a leaf node.Cost:- O(n) time, O(n) space.Link to solution →7. Given a binary tree and a node, find the level order successor of the given node. The level order successor is the node that appears right after the given node in the level order traversal.Example:- Input: target=6, tree=      1\t2   3  4       5        6   7      8  Output: 6Approach:- Similar to level order traversal problem, except we will not keep  track of all the levels.- Instead, we keep inserting the child node to the queue and return  the next node as soon as we find the target.Cost:- O(n) time, O(n) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-binary-tree-populate-the-values-of-all-nodes-of-each-level-from-left-to-right-in-separate-sub-arrays\">1. Given a binary tree, populate the values of all nodes of each level from left to right in separate sub-arrays.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5  Output: []interface{}{[]interface{}{1}, []interface{}{2, 3}, []interface{}{4, 5}}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Start by pushing the root node to the queue.- Keep iterating until the queue is empty.- At each step,  - send the front of the queue and dequeue it  - enqueue its left and right child</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/level_order_traversal_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-binary-tree-populate-the-values-of-all-nodes-of-each-level-in-reverse-order-in-separate-sub-arrays\">2. Given a binary tree, populate the values of all nodes of each level in reverse order in separate sub-arrays.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5  Output: []interface{}{[]interface{}{4, 5}, []interface{}{2, 3}, []interface{}{1}}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to level order reversal problem, except we append the current level's  value at the beginning of the output list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/reverse_level_order_traversal_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-binary-tree-populate-the-values-of-all-nodes-of-each-level-in-a-zigzag-order-in-separate-sub-arrays\">3. Given a binary tree, populate the values of all nodes of each level in a zigzag order in separate sub-arrays.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5  Output: [][]interface{}{[]interface{}{1}, []interface{}{3, 2}, []interface{}{4, 5}}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Start by pushing the root node to a queue.- Keep iterating until the queue is empty.- At each step,  - use a linked list to push front or back depending on the zigzag direction  - enqueue its left and right child</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/zigzag_traversal_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-binary-tree-populate-an-array-to-represent-the-averages-of-all-of-its-levels\">4. Given a binary tree, populate an array to represent the averages of all of its levels.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5  Output: []float64{1, 2.5, 4.5}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to level order traversal problem, except we keep track of the sum  at each level and return the average in the end.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/level_avg_test.go\">Link to solution →</a></p><h3 id=\"5-given-a-binary-tree-find-the-minimum-depth-aka-the-number-of-nodes-along-the-shortest-path-from-the-root-node-to-the-nearest-leaf-node\">5. Given a binary tree, find the minimum depth, aka the number of nodes along the shortest path from the root node to the nearest leaf node.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5        6   7      8  Output: 3</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to level order traversal problem, except we keep track of the minimum  depth at each level- Return it immediately once we find the leaf node.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/min_depth_test.go\">Link to solution →</a></p><h3 id=\"6-given-a-binary-tree-find-the-maximum-depth\">6. Given a binary tree, find the maximum depth.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:      1\t2   3  4       5        6   7      8  Output: 5</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to minimum depth problem, we will keep traversing for all  levels, incrementing our maximum depth instead of returning as  soon as we find a leaf node.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/max_depth_test.go\">Link to solution →</a></p><h3 id=\"7-given-a-binary-tree-and-a-node-find-the-level-order-successor-of-the-given-node-the-level-order-successor-is-the-node-that-appears-right-after-the-given-node-in-the-level-order-traversal\">7. Given a binary tree and a node, find the level order successor of the given node. The level order successor is the node that appears right after the given node in the level order traversal.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: target=6, tree=      1\t2   3  4       5        6   7      8  Output: 6</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to level order traversal problem, except we will not keep  track of all the levels.- Instead, we keep inserting the child node to the queue and return  the next node as soon as we find the target.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/level_order_successor_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/12/24/gtci-tree-bfs",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-24T00:00:00-05:00",
            "date_modified": "2019-12-24T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/12/22/gtci-cyclic-sort",
            "title": "Grokking the Coding Interview's Cyclic Sort",
            "summary": null,
            "content_text": "1. Cyclic sortGiven an array containing n objects where each object, when created,was assigned a unique number from 1 to n based on their creation sequence.This means that the object with sequence number 3 was created just beforethe object with sequence number 4.Write a function to sort the objects in-place on their creation sequencenumber in O(n) and without any extra space.Example:- Input: []int{6, 3, 5, 2, 4, 1}  Output: []int{1, 2, 3, 4, 5, 6}Approach:- Use the fact that we are given a range of 1-n, can try placing each number at  its correct index in the array, say 1 at 0, 2 at 1, 3 at 2 and so on.- Iterate through the array and if the current number is not at the correct index,  swap it with the number at its correct index.Cost:- O(n) time, O(1) space.Link to solution →2. Given an array containing n numbers taken from the range 1 to n. It can have duplicates. Find all those missing numbers.Example:- Input: []int{2, 3, 1, 8, 2, 3, 5, 1}  Output: []int{4, 6, 7}Approach:- Similar to missing number problem, can rearrange the array using cyclic  sort.- Those that do not have the correct indices are the missing ones.Cost:- O(n) time and O(1) space.Link to solution →3. Given an array containing n distinct numbers taken from the range 0 to n. Since the array has only n numbers out of the total n+1 numbers, find the missing number.Example:- Input: []int{4, 0, 3, 1}  Output: 2Approach:- Sort the array using the cyclic sort first.- The one that does not have the correct index is the missing one.Cost:- O(n) time, O(1) space.Link to solution →4. Given an array containing n+1 numbers taken from the range 1 to n. It has only one duplicate number but can be repeated over time. Find that one.Example:- Input: []int{1, 4, 4, 3, 2}  Output: 4Approach:- Similar to missing number problem, can place each number on its correct  index.- If while swapping the number with its index both the numbers being swapped  are same, we have found the duplicate.Cost:- O(n) time, O(1) space.Link to solution →5. Given an array containing n numbers taken from the range 1 to n. It can have some duplicates. Find all those numbers.Example:- Input: []int{5, 4, 7, 2, 3, 5, 3}  Output: []int{3, 5}Approach:- Similar to missing number problem, can rearrange the array using cyclic  sort.- Those that do not have the correct indices are the duplicate ones.Cost:- O(n) time, O(1) space.Link to solution →6. Given an array containing n+1 numbers taken from the range 1 to n. One of the numbers got duplicated which also resulted in one number going missing. Find these numbers.Example:- Input: []int{3, 1, 2, 5, 2}  Output: []int{2, 4}Approach:- Similar to finding duplicates problem, can place each number on its correct  index.- The one is not at its correct index is the duplicate and its index itself  is the missing number.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-cyclic-sort\">1. Cyclic sort</h3><p>Given an array containing n objects where each object, when created,was assigned a unique number from 1 to n based on their creation sequence.This means that the object with sequence number 3 was created just beforethe object with sequence number 4.</p><p>Write a function to sort the objects in-place on their creation sequencenumber in O(n) and without any extra space.</p><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{6, 3, 5, 2, 4, 1}  Output: []int{1, 2, 3, 4, 5, 6}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use the fact that we are given a range of 1-n, can try placing each number at  its correct index in the array, say 1 at 0, 2 at 1, 3 at 2 and so on.- Iterate through the array and if the current number is not at the correct index,  swap it with the number at its correct index.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/cyclic_sort_test.go\">Link to solution →</a></p><h3 id=\"2-given-an-array-containing-n-numbers-taken-from-the-range-1-to-n-it-can-have-duplicates-find-all-those-missing-numbers\">2. Given an array containing n numbers taken from the range 1 to n. It can have duplicates. Find all those missing numbers.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{2, 3, 1, 8, 2, 3, 5, 1}  Output: []int{4, 6, 7}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to missing number problem, can rearrange the array using cyclic  sort.- Those that do not have the correct indices are the missing ones.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/missing_number_test.go\">Link to solution →</a></p><h3 id=\"3-given-an-array-containing-n-distinct-numbers-taken-from-the-range-0-to-n-since-the-array-has-only-n-numbers-out-of-the-total-n1-numbers-find-the-missing-number\">3. Given an array containing n distinct numbers taken from the range 0 to n. Since the array has only n numbers out of the total n+1 numbers, find the missing number.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{4, 0, 3, 1}  Output: 2</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Sort the array using the cyclic sort first.- The one that does not have the correct index is the missing one.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/missing_numbers_test.go\">Link to solution →</a></p><h3 id=\"4-given-an-array-containing-n1-numbers-taken-from-the-range-1-to-n-it-has-only-one-duplicate-number-but-can-be-repeated-over-time-find-that-one\">4. Given an array containing n+1 numbers taken from the range 1 to n. It has only one duplicate number but can be repeated over time. Find that one.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 4, 4, 3, 2}  Output: 4</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to missing number problem, can place each number on its correct  index.- If while swapping the number with its index both the numbers being swapped  are same, we have found the duplicate.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/duplicate_test.go\">Link to solution →</a></p><h3 id=\"5-given-an-array-containing-n-numbers-taken-from-the-range-1-to-n-it-can-have-some-duplicates-find-all-those-numbers\">5. Given an array containing n numbers taken from the range 1 to n. It can have some duplicates. Find all those numbers.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{5, 4, 7, 2, 3, 5, 3}  Output: []int{3, 5}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to missing number problem, can rearrange the array using cyclic  sort.- Those that do not have the correct indices are the duplicate ones.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/duplicates_test.go\">Link to solution →</a></p><h3 id=\"6-given-an-array-containing-n1-numbers-taken-from-the-range-1-to-n-one-of-the-numbers-got-duplicated-which-also-resulted-in-one-number-going-missing-find-these-numbers\">6. Given an array containing n+1 numbers taken from the range 1 to n. One of the numbers got duplicated which also resulted in one number going missing. Find these numbers.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{3, 1, 2, 5, 2}  Output: []int{2, 4}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to finding duplicates problem, can place each number on its correct  index.- The one is not at its correct index is the duplicate and its index itself  is the missing number.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/corrupt_pair_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/12/22/gtci-cyclic-sort",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-22T00:00:00-05:00",
            "date_modified": "2019-12-22T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/12/20/gtci-merge-intervals",
            "title": "Grokking the Coding Interview's Merge Intervals",
            "summary": null,
            "content_text": "1. Given a list of intervals, merge all the overlapping intervals to produce a list that has only mutually exclusive intervals.Example:- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }  Output: []interval{ {1, 3}, {4, 5} }- Input: []interval{ {1, 5}, {2, 3} }  Output: []interval{ {1, 5} }Approach:- Sort the list in ascending order so that intervals that might need to be  merged are next to each other.- Can merge two intervals together if the first one's end time is greater or  or equal than the second one's start time.Cost:- O(nlogn) time, O(n) space.- Because we sort all intervals first, the runtime is O(nlogn). We create a new  list of merged interval times, so the space cost is O(n).Link to solution →2. Given a list of non-overlapping intervals sorted by their start time, insert a given interval at the correct position and merge all necessary intervals to produce a list that has only mutually exclusive intervals.Example:- Input: []interval{ {1, 3}, {5, 7}, {8, 12} }, interval{4, 6}  Output: []interval{ {1, 3}, {4, 7}, {8, 12} }Approach:- Since the list is sorted, can skip all the intervals where their end time is  less than the new interval's start time.- The merging process is similar to the one in merge interval problem.Cost:- O(n) time, O(n) space.Link to solution →3. Given two sorted lists of intervals, find the intersection between them.Example:- Input: []interval{ {1, 3}, {5, 6}, {7, 9} }, []interval{ {2, 3}, {5, 7} }  Output: []interval{ {2, 3}, {5, 6}, {7, 7} }Approach:- Iterate through both list at the same time and check if two intervals  are overlapping at each step.- Opposite to the merging process, an overlapped interval has:  - a bigger start between the two intervals  - a smaller end between the two intervalsCost:- O(n) time, O(n) space.Link to solution →4. Given a list of intervals, check if any of them is conflicting.Example:- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }  Output: false- Input: []interval{ {1, 5}, {2, 3} }  Output: trueApproach:- Similar to merge intervals problem, need to return the true  immediately if any of them is conflicting.Cost:- O(nlogn) time, O(n) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-list-of-intervals-merge-all-the-overlapping-intervals-to-produce-a-list-that-has-only-mutually-exclusive-intervals\">1. Given a list of intervals, merge all the overlapping intervals to produce a list that has only mutually exclusive intervals.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }  Output: []interval{ {1, 3}, {4, 5} }- Input: []interval{ {1, 5}, {2, 3} }  Output: []interval{ {1, 5} }</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Sort the list in ascending order so that intervals that might need to be  merged are next to each other.- Can merge two intervals together if the first one's end time is greater or  or equal than the second one's start time.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(nlogn) time, O(n) space.- Because we sort all intervals first, the runtime is O(nlogn). We create a new  list of merged interval times, so the space cost is O(n).</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/merge_intervals_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-list-of-non-overlapping-intervals-sorted-by-their-start-time-insert-a-given-interval-at-the-correct-position-and-merge-all-necessary-intervals-to-produce-a-list-that-has-only-mutually-exclusive-intervals\">2. Given a list of non-overlapping intervals sorted by their start time, insert a given interval at the correct position and merge all necessary intervals to produce a list that has only mutually exclusive intervals.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []interval{ {1, 3}, {5, 7}, {8, 12} }, interval{4, 6}  Output: []interval{ {1, 3}, {4, 7}, {8, 12} }</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Since the list is sorted, can skip all the intervals where their end time is  less than the new interval's start time.- The merging process is similar to the one in merge interval problem.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/insert_interval_test.go\">Link to solution →</a></p><h3 id=\"3-given-two-sorted-lists-of-intervals-find-the-intersection-between-them\">3. Given two sorted lists of intervals, find the intersection between them.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []interval{ {1, 3}, {5, 6}, {7, 9} }, []interval{ {2, 3}, {5, 7} }  Output: []interval{ {2, 3}, {5, 6}, {7, 7} }</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through both list at the same time and check if two intervals  are overlapping at each step.- Opposite to the merging process, an overlapped interval has:  - a bigger start between the two intervals  - a smaller end between the two intervals</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/intervals_intersection_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-list-of-intervals-check-if-any-of-them-is-conflicting\">4. Given a list of intervals, check if any of them is conflicting.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }  Output: false- Input: []interval{ {1, 5}, {2, 3} }  Output: true</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to merge intervals problem, need to return the true  immediately if any of them is conflicting.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(nlogn) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/conflict_appointment_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/12/20/gtci-merge-intervals",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-20T00:00:00-05:00",
            "date_modified": "2019-12-20T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/12/18/gtci-fast-slow-pointers",
            "title": "Grokking the Coding Interview's Fast and Slow Pointers",
            "summary": null,
            "content_text": "1. Given the head of a singly linked list, write a function to determine if it contains a cycle.Approach:- Have a slow pointer move one step at a time while the fast one move  2 steps at a time.- If the linked list has a cycle, the fast pointer will catch the slow one.Cost:- O(n) time, O(1) space.Link to solution →2. Given the head of a singly linked list, write a function to find the starting node of the cycle.Approach:- Similar to finding a cycle in a linked list problem, can also determine  the start of its cycle and calculate length k of the cycle.- Have one pointer at the beginning and one at kth node of the linked list.- Move both of them until they meet at the start.of the cycle.Cost:- O(n) time and O(1) space.Link to solution →3. Write an algorithm to determine if a number is happy.Any number will be called a happy number if, after repeatedly replacingit with a number equal to the sum of the square of all of its digits,leads us to 1.Example:- Input: 19  Output: true  Explanation:\t  1^2 + 9^2 = 82\t  8^2 + 2^2 = 68\t  6^2 + 8^2 = 100\t  1^2 + 0^2 + 0^2 = 1Approach:- Since the process always end in a cycle, we can use a similar approach to  finding a cycle in linked list problem.- Once is cycle is found, check if it is stuck on 1.Cost:- O(n) time, O(1) space.Link to solution →4. Given the head of a singly linked list, write a function to return the middle value.Approach:- Have a slow pointer move one step at a time while the fast one move  2 steps at a time.- Once the fast one reaches the end, the slow is in the middle.Cost:- O(n) time, O(1) space.Link to solution →5. Given the head of a singly linked list, write a function to determine if it is a palindrome in constant space.Approach:- Find the middle of the linked list and reverse a half list- After comparing the first half with the reversed half to check if it's  a palindrome, revert to the half to original form.Cost:- O(n) time, O(1) space.Link to solution →6. Given the head of a singly linked list, write a function to reorder it such that nodes from the second half are inserted alternately to the nodes from the first half in reverse order.Approach:- Similar to palindrome linked list problem, can also use a trick to  reverse the second half and rearrange them in the required order  using fast and slow pointers.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-the-head-of-a-singly-linked-list-write-a-function-to-determine-if-it-contains-a-cycle\">1. Given the head of a singly linked list, write a function to determine if it contains a cycle.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have a slow pointer move one step at a time while the fast one move  2 steps at a time.- If the linked list has a cycle, the fast pointer will catch the slow one.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/linked_list_cycle_test.go\">Link to solution →</a></p><h3 id=\"2-given-the-head-of-a-singly-linked-list-write-a-function-to-find-the-starting-node-of-the-cycle\">2. Given the head of a singly linked list, write a function to find the starting node of the cycle.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to finding a cycle in a linked list problem, can also determine  the start of its cycle and calculate length k of the cycle.- Have one pointer at the beginning and one at kth node of the linked list.- Move both of them until they meet at the start.of the cycle.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/cycle_start_test.go\">Link to solution →</a></p><h3 id=\"3-write-an-algorithm-to-determine-if-a-number-is-happy\">3. Write an algorithm to determine if a number is happy.</h3><p>Any number will be called a happy number if, after repeatedly replacingit with a number equal to the sum of the square of all of its digits,leads us to 1.</p><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: 19  Output: true  Explanation:\t  1^2 + 9^2 = 82\t  8^2 + 2^2 = 68\t  6^2 + 8^2 = 100\t  1^2 + 0^2 + 0^2 = 1</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Since the process always end in a cycle, we can use a similar approach to  finding a cycle in linked list problem.- Once is cycle is found, check if it is stuck on 1.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/happy_number_test.go\">Link to solution →</a></p><h3 id=\"4-given-the-head-of-a-singly-linked-list-write-a-function-to-return-the-middle-value\">4. Given the head of a singly linked list, write a function to return the middle value.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have a slow pointer move one step at a time while the fast one move  2 steps at a time.- Once the fast one reaches the end, the slow is in the middle.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/middle_list_test.go\">Link to solution →</a></p><h3 id=\"5-given-the-head-of-a-singly-linked-list-write-a-function-to-determine-if-it-is-a-palindrome-in-constant-space\">5. Given the head of a singly linked list, write a function to determine if it is a palindrome in constant space.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Find the middle of the linked list and reverse a half list- After comparing the first half with the reversed half to check if it's  a palindrome, revert to the half to original form.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/palindrome_list_test.go\">Link to solution →</a></p><h3 id=\"6-given-the-head-of-a-singly-linked-list-write-a-function-to-reorder-it-such-that-nodes-from-the-second-half-are-inserted-alternately-to-the-nodes-from-the-first-half-in-reverse-order\">6. Given the head of a singly linked list, write a function to reorder it such that nodes from the second half are inserted alternately to the nodes from the first half in reverse order.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to palindrome linked list problem, can also use a trick to  reverse the second half and rearrange them in the required order  using fast and slow pointers.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/reorder_list_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/12/18/gtci-fast-slow-pointers",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-18T00:00:00-05:00",
            "date_modified": "2019-12-18T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/12/16/gtci-two-pointers",
            "title": "Grokking the Coding Interview's Two Pointers",
            "summary": null,
            "content_text": "1. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.Example:- Input: []int{1, 2, 6, 8, 16, 26}, target=14  Output: []int{2, 3}  Explanation: 6 (index 2) + 8 (index 3) = 14Approach:- Have one pointer start at the beginning and one at the end of the array.- At each step, see if the two pointers add up to the target sum and move  them toward each other accordingly.Cost:- O(n) time, O(n) space.Link to solution →2. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.Example:- Input: []int{1, 2, 6, 8, 16, 26}, target=14  Output: []int{2, 3}  Explanation: 6 (index 2) + 8 (index 3) = 14Approach:- Have one pointer iterate the array and one placing non-duplicate number.Cost:- O(n) time, O(1) space.Link to solution →3. Given a sorted array, create a new array containing squares of all the number of the input array in the sorted order.Assumption:- The input can have negative numbers.Example:- Input: []int{-2, -1, 0, 1, 2}  Output: []int{0, 1, 1, 4, 4}Approach:- The difficult part is to generate the output array with squares in sorted order because we have negative numbers and their squares are positive.- Have one pointer start at the beginning and one at the end and let them  move toward each other.- At each step, whichever bigger will be added to the output array, from  right to left.Cost:- O(n) time, O(n) space.Link to solution →4. Given an array containing 0s, 1s and 2s, sort the array in-place.Example:- Input: []int{1, 0, 2, 1, 0}  Output: []int{0, 0, 1, 1, 2}Approach:- Have one pointer start at the beginning and the other at the end  while iterating through the array.- We will move all 0s before that start pointer and 2s after the end  pointer so that all 1s would be between in the end.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-an-array-of-sorted-numbers-and-a-target-sum-find-a-pair-in-the-array-whose-sum-is-equal-to-the-given-target\">1. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 2, 6, 8, 16, 26}, target=14  Output: []int{2, 3}  Explanation: 6 (index 2) + 8 (index 3) = 14</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have one pointer start at the beginning and one at the end of the array.- At each step, see if the two pointers add up to the target sum and move  them toward each other accordingly.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/pair_target_sum_test.go\">Link to solution →</a></p><h3 id=\"2-given-an-array-of-sorted-numbers-and-a-target-sum-find-a-pair-in-the-array-whose-sum-is-equal-to-the-given-target\">2. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 2, 6, 8, 16, 26}, target=14  Output: []int{2, 3}  Explanation: 6 (index 2) + 8 (index 3) = 14</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have one pointer iterate the array and one placing non-duplicate number.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/remove_duplicates_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-sorted-array-create-a-new-array-containing-squares-of-all-the-number-of-the-input-array-in-the-sorted-order\">3. Given a sorted array, create a new array containing squares of all the number of the input array in the sorted order.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The input can have negative numbers.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{-2, -1, 0, 1, 2}  Output: []int{0, 1, 1, 4, 4}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The difficult part is to generate the output array with squares in sorted order because we have negative numbers and their squares are positive.- Have one pointer start at the beginning and one at the end and let them  move toward each other.- At each step, whichever bigger will be added to the output array, from  right to left.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/square_sorted_array_test.go\">Link to solution →</a></p><h3 id=\"4-given-an-array-containing-0s-1s-and-2s-sort-the-array-in-place\">4. Given an array containing 0s, 1s and 2s, sort the array in-place.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 0, 2, 1, 0}  Output: []int{0, 0, 1, 1, 2}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Have one pointer start at the beginning and the other at the end  while iterating through the array.- We will move all 0s before that start pointer and 2s after the end  pointer so that all 1s would be between in the end.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/dutch_flag_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/12/16/gtci-two-pointers",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-16T00:00:00-05:00",
            "date_modified": "2019-12-16T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/12/15/gtci-sliding-window",
            "title": "Grokking the Coding Interview's Sliding Window",
            "summary": null,
            "content_text": "1. Given an array, find the average of all contiguous subarrays of size k.Example:- Input: []int{1, 3, 2, 6, -1, 4, 1, 8, 2}, k=5  Output: []int{2.2, 2.8, 2.4, 3.6, 2.8}Approach:- View each contiguous subarray as a sliding window of k elements.- As we move to the next subarray, slide the window by one element to  reuse the sum from previous array.Cost:- O(n) time, O(k) space.Link to solution →2. Given an array of positive numbers and a positive number k, find the maximum sum of any contiguous subarray of size k.Example:- Input: int{2, 1, 5, 1, 3, 2}, k=3  Output: 9  Explanation: Subarray with maximum sum is [5, 1, 3].Approach:- View each contiguous subarray as a sliding window of k elements.- As we move to the next subarray, slide the window by one element to  reuse the sum from previous array and update the maximum sum.Cost:- O(n) time and O(1) space.Link to solution →3. Given an array of positive numbers and a positive number s, find the length of the smallest contiguous subarray whose sum is greater than or equal to s.Example:- Input: array=int{2, 1, 5, 2, 3, 2}, s=7  Output: 2  Explanation: Smallest subarray with a sum great than or equal to 7 is [5, 2]  with length=2.Approach:- The difference between the previous problem and this one is that the size of  the sliding window is not fixed.- Can still use the similar strategy to add up elements until their sum is greater  than equal to s and view them as our sliding window.- Shrink the window until the window's sum is smaller than s again while keep  updating the minimum length.Cost:- O(n) time, O(1) space.Link to solution →4. Given a string, find the length of the longest substring in it with no more than k distinct characters.Example:- Input: string=\"araaci\", k=1  Output: 2  Explanation: Longest substring with no more than 1 distinct characters is \"aa\".- Input: string=\"araaci\", k=2  Output: 4  Explanation: Longest substring with no more than 2 distinct characters is \"araa\".- Input: string=\"araaci\", k=3  Output: 5  Explanation: Longest substring with no more than 3 distinct characters is \"araac\".Approach:- Use a hashmap to remember the frequency of each character we have seen.- Insert characters until we have k distinct characters in the map to be consider a  window.- Shrink the window until there is no more k distinct characters in the map and keep  updating the maximum window length at each step.Cost:- O(n) time, O(k) space where k is the number of characters in the map.Link to solution →5. Given an array of characters where each character represents a fruit tree, you are given two baskets and your goal is to put maximum number of fruits in each basket.Constraints:- Each basket can have only one type of fruit.- You can start with any tree, but once you have started you can’t skip a tree.  You will pick one fruit from each tree until you cannot, i.e., you will stop  when you have to pick from a third fruit type.Example:- Input: fruits=[\"apple\", \"orange\", \"coconut\", \"apple\", \"coconut\"]  Output: 3  Explanation: Can put 2 \"cocunut\" in 1 basket and 1 \"apple\" in other from  subarray [\"coconut\", \"apple\", \"coconut\"]Approach:- Similar to \"longest substring with k distinct characters\" with k=2.Cost:- O(n) time, O(k) space where k is the number of characters in the map.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-an-array-find-the-average-of-all-contiguous-subarrays-of-size-k\">1. Given an array, find the average of all contiguous subarrays of size k.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 3, 2, 6, -1, 4, 1, 8, 2}, k=5  Output: []int{2.2, 2.8, 2.4, 3.6, 2.8}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- View each contiguous subarray as a sliding window of k elements.- As we move to the next subarray, slide the window by one element to  reuse the sum from previous array.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(k) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/avg_subarray_test.go\">Link to solution →</a></p><h3 id=\"2-given-an-array-of-positive-numbers-and-a-positive-number-k-find-the-maximum-sum-of-any-contiguous-subarray-of-size-k\">2. Given an array of positive numbers and a positive number k, find the maximum sum of any contiguous subarray of size k.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: int{2, 1, 5, 1, 3, 2}, k=3  Output: 9  Explanation: Subarray with maximum sum is [5, 1, 3].</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- View each contiguous subarray as a sliding window of k elements.- As we move to the next subarray, slide the window by one element to  reuse the sum from previous array and update the maximum sum.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/max_subarray_test.go\">Link to solution →</a></p><h3 id=\"3-given-an-array-of-positive-numbers-and-a-positive-number-s-find-the-length-of-the-smallest-contiguous-subarray-whose-sum-is-greater-than-or-equal-to-s\">3. Given an array of positive numbers and a positive number s, find the length of the smallest contiguous subarray whose sum is greater than or equal to s.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: array=int{2, 1, 5, 2, 3, 2}, s=7  Output: 2  Explanation: Smallest subarray with a sum great than or equal to 7 is [5, 2]  with length=2.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The difference between the previous problem and this one is that the size of  the sliding window is not fixed.- Can still use the similar strategy to add up elements until their sum is greater  than equal to s and view them as our sliding window.- Shrink the window until the window's sum is smaller than s again while keep  updating the minimum length.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/valid_palindrome_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-string-find-the-length-of-the-longest-substring-in-it-with-no-more-than-k-distinct-characters\">4. Given a string, find the length of the longest substring in it with no more than k distinct characters.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: string=\"araaci\", k=1  Output: 2  Explanation: Longest substring with no more than 1 distinct characters is \"aa\".- Input: string=\"araaci\", k=2  Output: 4  Explanation: Longest substring with no more than 2 distinct characters is \"araa\".- Input: string=\"araaci\", k=3  Output: 5  Explanation: Longest substring with no more than 3 distinct characters is \"araac\".</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a hashmap to remember the frequency of each character we have seen.- Insert characters until we have k distinct characters in the map to be consider a  window.- Shrink the window until there is no more k distinct characters in the map and keep  updating the maximum window length at each step.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(k) space where k is the number of characters in the map.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/longest_substring_k_distinct_test.go\">Link to solution →</a></p><h3 id=\"5-given-an-array-of-characters-where-each-character-represents-a-fruit-tree-you-are-given-two-baskets-and-your-goal-is-to-put-maximum-number-of-fruits-in-each-basket\">5. Given an array of characters where each character represents a fruit tree, you are given two baskets and your goal is to put maximum number of fruits in each basket.</h3><p>Constraints:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Each basket can have only one type of fruit.- You can start with any tree, but once you have started you can’t skip a tree.  You will pick one fruit from each tree until you cannot, i.e., you will stop  when you have to pick from a third fruit type.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: fruits=[\"apple\", \"orange\", \"coconut\", \"apple\", \"coconut\"]  Output: 3  Explanation: Can put 2 \"cocunut\" in 1 basket and 1 \"apple\" in other from  subarray [\"coconut\", \"apple\", \"coconut\"]</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to \"longest substring with k distinct characters\" with k=2.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(k) space where k is the number of characters in the map.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/gtci/fruits_baskets_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/12/15/gtci-sliding-window",
            
            
            
            "tags": ["grokking-the-coding-interview","algorithm"],
            
            "date_published": "2019-12-15T00:00:00-05:00",
            "date_modified": "2019-12-15T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/12/05/leetcode-binary-tree",
            "title": "LeetCode's Binary tree",
            "summary": null,
            "content_text": "1. Given a binary tree, determine if it is a valid binary search tree.Approach:- Traverse the tree and apply recursion to check at each step if:  - the current node's value is greater than the lower bound  - the current node's value is smaller than the upper bound  - the current node's left child follows  - the current node's left child followsCost:- O(n) time and O(n) stack space.Link to solution →2. Given a binary tree, find its maximum depth.Approach:- The maximum depth of the current node is the greater of the max height of the left  subtree and the right subtree plus one.Cost:- O(n) time, O(n) space.Link to solution →3. Given a binary tree, find its minimum depth.Approach:- Similar to finding maximum depth, the minimum depth of the current node is  the smaller of the min height of the left subtree and the right subtree plus one.Cost:- O(n) time, O(1) space where n is the length of a linked list.Link to solution →4. Given a binary tree, determine if it is height-balanced.Approach:- Calculate max depth for the left subtree and right subtree.- If either the left subtree or right subtree is unbalanced, return right away.Cost:- O(n) time, O(n) stack space.Link to solution →5. Given a binary tree, find the maximum path sum.Assumption:- The path might start and end at any node in the tree.- Assume the tree is non-empty.- The node can contain negative number.- The maximum path does not have to go though the root node.Approach:- At each node, the potential maximum path could be one of these cases:  - max(left subtree) + node  - max(right subtree) + node  - max(left subtree) + max(right subtree) + node  - the node itselfCost:- O(n) time, O(n) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-binary-tree-determine-if-it-is-a-valid-binary-search-tree\">1. Given a binary tree, determine if it is a valid binary search tree.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Traverse the tree and apply recursion to check at each step if:  - the current node's value is greater than the lower bound  - the current node's value is smaller than the upper bound  - the current node's left child follows  - the current node's left child follows</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(n) stack space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/valid_bst_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-binary-tree-find-its-maximum-depth\">2. Given a binary tree, find its maximum depth.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The maximum depth of the current node is the greater of the max height of the left  subtree and the right subtree plus one.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/max_depth_binary_tree_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-binary-tree-find-its-minimum-depth\">3. Given a binary tree, find its minimum depth.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to finding maximum depth, the minimum depth of the current node is  the smaller of the min height of the left subtree and the right subtree plus one.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space where n is the length of a linked list.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/min_depth_binary_tree_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-binary-tree-determine-if-it-is-height-balanced\">4. Given a binary tree, determine if it is height-balanced.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Calculate max depth for the left subtree and right subtree.- If either the left subtree or right subtree is unbalanced, return right away.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) stack space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/balanced_binary_tree_test.go\">Link to solution →</a></p><h3 id=\"5-given-a-binary-tree-find-the-maximum-path-sum\">5. Given a binary tree, find the maximum path sum.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The path might start and end at any node in the tree.- Assume the tree is non-empty.- The node can contain negative number.- The maximum path does not have to go though the root node.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- At each node, the potential maximum path could be one of these cases:  - max(left subtree) + node  - max(right subtree) + node  - max(left subtree) + max(right subtree) + node  - the node itself</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/binary_tree_max_path_sum_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/12/05/leetcode-binary-tree",
            
            
            
            "tags": ["leetcode","algorithm"],
            
            "date_published": "2019-12-05T00:00:00-05:00",
            "date_modified": "2019-12-05T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/11/16/leetcode-linked-list",
            "title": "LeetCode's Linked List",
            "summary": null,
            "content_text": "1. Merge two sorted linked lists and return it as a new list.Example:- Input: 1 -&gt; 3-&gt; 5 &amp; 2 -&gt; 4-&gt; 6  Output: 1 -&gt; 2-&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6Approach:- Traverse both list at the same time, compare their values at each step and  add the smaller one to a new list.Cost:- O(n|m) time, O(n+m) space where n and m are lengths of these two linked lists.Link to solution →2. Given two linked lists representing two non-negative number, add them together and return it as a linked list.Assumption:- The digits are stored in reverse order.- Each node contains a single digit.Example:- Input: (1 -&gt; 6 -&gt; 4) + (2 -&gt; 4-&gt; 1)  Output: (3 -&gt; 0 -&gt; 6)Approach:- Traverse both lists and keep track of the sum and carry for each  digit.Cost:- O(n|m) time, O(m|n) space where m and m are lengths of these two lists.Link to solution →3. Given a linked list, swap every two adjacent nodes and return its head.Assumption:- If the length of the linked list is odd, the last node should not be swapped.- The solution should use constant space.Example:- Input: 1 -&gt; 3-&gt; 5 -&gt; 2 -&gt; 4-&gt; 6  Output: 3 -&gt; 1-&gt; 2 -&gt; 5 -&gt; 6 -&gt; 4- Input: 1 -&gt; 3-&gt; 5 -&gt; 2 -&gt; 4  Output: 3 -&gt; 1-&gt; 2 -&gt; 5 -&gt; 4Approach:- Traverse the list and swap the nodes pairwise by adjusting where it's pointing next.Cost:- O(n) time, O(1) space where n is the length of a linked list.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-merge-two-sorted-linked-lists-and-return-it-as-a-new-list\">1. Merge two sorted linked lists and return it as a new list.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: 1 -&gt; 3-&gt; 5 &amp; 2 -&gt; 4-&gt; 6  Output: 1 -&gt; 2-&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Traverse both list at the same time, compare their values at each step and  add the smaller one to a new list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n|m) time, O(n+m) space where n and m are lengths of these two linked lists.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/merge_sorted_linked_list_test.go\">Link to solution →</a></p><h3 id=\"2-given-two-linked-lists-representing-two-non-negative-number-add-them-together-and-return-it-as-a-linked-list\">2. Given two linked lists representing two non-negative number, add them together and return it as a linked list.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The digits are stored in reverse order.- Each node contains a single digit.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: (1 -&gt; 6 -&gt; 4) + (2 -&gt; 4-&gt; 1)  Output: (3 -&gt; 0 -&gt; 6)</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Traverse both lists and keep track of the sum and carry for each  digit.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n|m) time, O(m|n) space where m and m are lengths of these two lists.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/add_two_numbers_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-linked-list-swap-every-two-adjacent-nodes-and-return-its-head\">3. Given a linked list, swap every two adjacent nodes and return its head.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- If the length of the linked list is odd, the last node should not be swapped.- The solution should use constant space.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: 1 -&gt; 3-&gt; 5 -&gt; 2 -&gt; 4-&gt; 6  Output: 3 -&gt; 1-&gt; 2 -&gt; 5 -&gt; 6 -&gt; 4- Input: 1 -&gt; 3-&gt; 5 -&gt; 2 -&gt; 4  Output: 3 -&gt; 1-&gt; 2 -&gt; 5 -&gt; 4</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Traverse the list and swap the nodes pairwise by adjusting where it's pointing next.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space where n is the length of a linked list.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/swap_nodes_in_pairs_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/11/16/leetcode-linked-list",
            
            
            
            "tags": ["leetcode","algorithm"],
            
            "date_published": "2019-11-16T00:00:00-05:00",
            "date_modified": "2019-11-16T00:00:00-05:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/10/20/augmenting-long-term-memory",
            "title": "Michael Nielsen, Augmenting Long-term Memory",
            "summary": null,
            "content_text": "  Anki like a flashcard app but able to manage the review schedule.          If you answer a question correctly, the review time expands.      The better you master the material, the less frequent it appears        Memories are maximally strengthened if tested when we’re on the verge of forgetting them.  Used to learn anything: papers, books, talks, conversations, facts, plans,…  Have desktop client for entering new card, mobile client for reviewing.  Read a research paper in an unfamiliar field - AlphaGo paper.          Read quickly first, come up with questions that:                  Identify the most important ideas.          Look for basics fact that I could understand easily.                    Make several passes this way, each time try to get deeper, continue to ask questions.        Make better use of Anki:          Make the question more atomic so I could focus on the hard-to-memory details -&gt; asking good questions is very important.      Construct your own decks instead of using shared ones -&gt; constructing a card forces you to think through the questions and its answer.      Avoid yes/no questions.        Procedural vs declarative memory.          Procedural (implicit, unconscious, automatic): habits such as walking, talking,…      Declarative (explicit): know your phone number, a fact,…      Basically, there is a difference between remembering a fact and master a process.                  Just because you remember a Unix command doesn’t mean you can recognize or apply it in a real-world situation.          Remembering is not enough. Need to carry out the process. Solve problem with it.                      If Anki is so great, why isn’t it widely used?          People prefer last-minute cramming and believe it produces better results, though many studies show it does not.      The act if recalling something while we’re on the verge of forgetting is hard, unless one is strongly motivated.      Anki is challenging to use well, easy to use poorly.        The importance of long-term memory.          A study shows that chess grandmaster has higher memory capacity.                  Beginner see a series of individual pieces.          Master see see a “chunk”-combinations of pieces recognized as a unit -&gt; able to reason much easier at a higher level of abstraction (25k-100k).                    A study shows that the better working memory one has, the higher their IQ and vice versa.      Having more chunks memorized in some domain is somewhat like an effective boost to a person’s IQ in that domain.        Distribute practice - why Anki works?          Memory decays through time - we will forget things eventually.      Retest/recall will slow the decay - meaning it takes longer after subsequent recalls.      References:  http://augmentingcognition.com/ltm.html",
            "content_html": "<ul>  <li>Anki like a flashcard app but able to manage the review schedule.    <ul>      <li>If you answer a question correctly, the review time expands.</li>      <li>The better you master the material, the less frequent it appears</li>    </ul>  </li>  <li>Memories are maximally strengthened if tested when we’re on the verge of forgetting them.</li>  <li>Used to learn anything: papers, books, talks, conversations, facts, plans,…</li>  <li>Have desktop client for entering new card, mobile client for reviewing.</li>  <li>Read a research paper in an unfamiliar field - AlphaGo paper.    <ul>      <li>Read quickly first, come up with questions that:        <ul>          <li>Identify the most important ideas.</li>          <li>Look for basics fact that I could understand easily.</li>        </ul>      </li>      <li>Make several passes this way, each time try to get deeper, continue to ask questions.</li>    </ul>  </li>  <li>Make better use of Anki:    <ul>      <li>Make the question more atomic so I could focus on the hard-to-memory details -&gt; asking good questions is very important.</li>      <li>Construct your own decks instead of using shared ones -&gt; constructing a card forces you to think through the questions and its answer.</li>      <li>Avoid yes/no questions.</li>    </ul>  </li>  <li>Procedural vs declarative memory.    <ul>      <li>Procedural (implicit, unconscious, automatic): habits such as walking, talking,…</li>      <li>Declarative (explicit): know your phone number, a fact,…</li>      <li>Basically, there is a difference between remembering a fact and master a process.        <ul>          <li>Just because you remember a Unix command doesn’t mean you can recognize or apply it in a real-world situation.</li>          <li>Remembering is not enough. Need to carry out the process. Solve problem with it.</li>        </ul>      </li>    </ul>  </li>  <li>If Anki is so great, why isn’t it widely used?    <ul>      <li>People prefer last-minute cramming and believe it produces better results, though many studies show it does not.</li>      <li>The act if recalling something while we’re on the verge of forgetting is hard, unless one is strongly motivated.</li>      <li>Anki is challenging to use well, easy to use poorly.</li>    </ul>  </li>  <li>The importance of long-term memory.    <ul>      <li>A study shows that chess grandmaster has higher memory capacity.        <ul>          <li>Beginner see a series of individual pieces.</li>          <li>Master see see a “chunk”-combinations of pieces recognized as a unit -&gt; able to reason much easier at a higher level of abstraction (25k-100k).</li>        </ul>      </li>      <li>A study shows that the better working memory one has, the higher their IQ and vice versa.</li>      <li>Having more chunks memorized in some domain is somewhat like an effective boost to a person’s IQ in that domain.</li>    </ul>  </li>  <li>Distribute practice - why Anki works?    <ul>      <li>Memory decays through time - we will forget things eventually.</li>      <li>Retest/recall will slow the decay - meaning it takes longer after subsequent recalls.</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"http://augmentingcognition.com/ltm.html\">http://augmentingcognition.com/ltm.html</a></li></ul>",
            "url": "https://hoanhan101.github.io/2019/10/20/augmenting-long-term-memory",
            
            
            
            "tags": ["blog","memory"],
            
            "date_published": "2019-10-20T00:00:00-04:00",
            "date_modified": "2019-10-20T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/10/18/leetcode-math",
            "title": "LeetCode's Math",
            "summary": null,
            "content_text": "1. Given a 64-bit integer, reverse its digits.Assumption:- Negative numbers are also valid.- Must handle the case where the reversed integer is overflow.Example:- Input: 123  Output: 321- Input: -123  Output: -321- Input: 8085774586302733229 Output: 0  Explanation: The reversed integer 9223372036854775808 overflows by 1 so we return 0.Approach:- Use modulo by 10 to get a digit at ones' place of the input and  dividing by 10 to shift it to the right (eliminate the ones' place).Cost:- O(m) time, O(1) space, where m is log10 of the input.Link to solution →2. Given a number represented as an array of digits, plus one to the number.Assumption:- The input are non-negative.- The digits are stored such that the most significant digit is at the head of the list.- The number does not contain leading zeros.Example:- Input: []int{1, 2, 5}  Output: []int{1, 2, 6}- Input: []int{1, 2, 9}  Output: []int{1, 3, 0}- Input: []int{1, 9, 9}  Output: []int{2, 0, 0}Approach:- Iterate through the list from right to left and add 1 to the current digit accordingly.  - If the current digit is less than 9, add 1 and update it.  - Otherwise, set it to 0.- If all the digits are 9, append an 0 in the end and update the first digit to 1.Cost:- O(n) time, O(1) space, where n is the length of the list.Link to solution →3. Determine whether an integer is a palindrome.Assumption:- Do this without extra space.- Define negative integers as non-palindrome.Example:- Input: 101  Output: true- Input: 106  Output: falseApproach:- Use two-pointer approach where one starts at the first digit and one starts  at the last digit, have them walk toward the middle and compare them at each  step.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-64-bit-integer-reverse-its-digits\">1. Given a 64-bit integer, reverse its digits.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Negative numbers are also valid.- Must handle the case where the reversed integer is overflow.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: 123  Output: 321- Input: -123  Output: -321- Input: 8085774586302733229 Output: 0  Explanation: The reversed integer 9223372036854775808 overflows by 1 so we return 0.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use modulo by 10 to get a digit at ones' place of the input and  dividing by 10 to shift it to the right (eliminate the ones' place).</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(m) time, O(1) space, where m is log10 of the input.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/reverse_integer_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-number-represented-as-an-array-of-digits-plus-one-to-the-number\">2. Given a number represented as an array of digits, plus one to the number.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The input are non-negative.- The digits are stored such that the most significant digit is at the head of the list.- The number does not contain leading zeros.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 2, 5}  Output: []int{1, 2, 6}- Input: []int{1, 2, 9}  Output: []int{1, 3, 0}- Input: []int{1, 9, 9}  Output: []int{2, 0, 0}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through the list from right to left and add 1 to the current digit accordingly.  - If the current digit is less than 9, add 1 and update it.  - Otherwise, set it to 0.- If all the digits are 9, append an 0 in the end and update the first digit to 1.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space, where n is the length of the list.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/plus_one_test.go\">Link to solution →</a></p><h3 id=\"3-determine-whether-an-integer-is-a-palindrome\">3. Determine whether an integer is a palindrome.</h3><p>Assumption:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Do this without extra space.- Define negative integers as non-palindrome.</code></pre></div></div><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: 101  Output: true- Input: 106  Output: false</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use two-pointer approach where one starts at the first digit and one starts  at the last digit, have them walk toward the middle and compare them at each  step.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/palindrome_number_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/10/18/leetcode-math",
            
            
            
            "tags": ["leetcode","algorithm"],
            
            "date_published": "2019-10-18T00:00:00-04:00",
            "date_modified": "2019-10-18T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/10/08/leetcode-array-string",
            "title": "LeetCode's Array/String",
            "summary": null,
            "content_text": "1. Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that each input would have exactly one solution, and you may not use the same element twice.Example:- Input: nums = []int{2, 5, 4}, target = 6  Output: [0, 2] since nums[0] + nums[2] = 2 + 4 = 6Approach:- Use a hash map to store the value and its index as we iterate through the  list.- Within each iteration, look up the difference of target and the current  value to see if we have seen that number.- Simply return two cached indices once that condition meets.Cost:- O(n) time, O(n) space.Link to solution →2. Given a sorted array of integers, return indices of the two numbers such that they add up to a specific target.Example:- Input: nums = []int{2, 3, 4}, target = 6  Output: [0, 2] since nums[0] + nums[2] = 2 + 4 = 6Approach:- Since the array is sorted, can use two-pointer approach that has one point  to the start of the list while the other point at the end and move the  toward each other.Cost:- O(n) time and O(1) space.Link to solution →3. Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.Example:- Input: \"A man, a plan, a canal: Panama\"  Output: true- Input: \"race a car\"  Output: falseApproach:- Use two pointers approach that have one point to the start of the string and  the other point at the end.- Move them toward each other and compare if they're the same characters while  skipping non-alphanumeric characters and ignoring cases.Cost:- O(n) time, O(1) space.Link to solution →4. Implement strstr() that finds the first occurrence of the substring needle in the string haystack. It returns -1 if needle is not part of the haystack.Example:- Input: haystack = \"aaabacd\", needle = \"ba\"  Output: 3, because needle \"ba\" starts at index 3 in the haystack.Approach:- Scan the needle with the haystack from its first position and start matching  all subsequent letters one by one.- If one letter does not match, start again with the next position in the  haystack.Cost:- O(nm) time, O(1) space, where n is the length of haystack while m is the  length of needle.Link to solution →5. Given a string, reverse it word by word.Example:- Input: \"hard so be to have not does interview coding\"  Output: \"coding interview does not have to be so hard\"Approach:- Approach with a two-pass solution.- The first pass is to split the string into an array of words separated by  spaces.- The second pass is to reverse the order of words in the array by using  two-pointer approach: swap two values on both ends as we move toward the  middle.- Concatenate the values of ordered array to create a final string.Cost:- O(n) time, O(n) space.Link to solution →6. Given a string, find the length of the longest substring without repeating characters.Example:- Input: \"abcabcbb\"  Output: 3  Explanation: The longest substring is \"abc\" with the length of 3.- Input: \"bbbbb\"  Output: 1  Explanation: The longest substring is \"b\" with the length of 1.Approach:- Iterate through the string and keep track of the maximum length of non-repeating  characters using a hashmap that maps characters to their indices.- Could skip characters immediately if we found a repeating character.Cost:- O(n) time, O(m) cost where m &lt; n and  n is the length of the string.Link to solution →7. Given a sorted integer array where the range of elements are [0, 99] inclusive, return its missing ranges.Example:- Input: []int{0, 1, 6, 16, 66, 99}  Output: []string{\"2-5\", \"7-15\", \"17-65\", \"67-98\"}- Input: []int{6, 16, 66}  Output: []string{\"0-5\", \"7-15\", \"17-65\", \"67-99\"}Approach:- Keep two pointers where one is ahead of the other by 1 index.- Iterate through the list, calculate the difference of two consecutive numbers  in the list at each step and append it to a new list.Cost:- O(n) time, O(m) space, where m &lt; n and n is the size of the input.Link to solution →8. Given two strings, determine if they are both one edit distance apart.Example:- Input: \"abcde\", \"abXde\"  Output: true  Explanation: Only \"c\" in S is replaced by \"X\" in T.- Input: \"abcde\", \"abcXde\"  Output: true  Explanation: \"X\" is inserted between \"c\" and \"d\" in S to get T.Approach:- Use two-pointer approach to traverse both strings at the same time and  keep track of count of difference characters.Cost:- O(n) time, O(1) spaceLink to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-an-array-of-integers-return-indices-of-the-two-numbers-such-that-they-add-up-to-a-specific-target\">1. Given an array of integers, return indices of the two numbers such that they add up to a specific target.</h3><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: nums = []int{2, 5, 4}, target = 6  Output: [0, 2] since nums[0] + nums[2] = 2 + 4 = 6</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a hash map to store the value and its index as we iterate through the  list.- Within each iteration, look up the difference of target and the current  value to see if we have seen that number.- Simply return two cached indices once that condition meets.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/two_sum_i_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-sorted-array-of-integers-return-indices-of-the-two-numbers-such-that-they-add-up-to-a-specific-target\">2. Given a sorted array of integers, return indices of the two numbers such that they add up to a specific target.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: nums = []int{2, 3, 4}, target = 6  Output: [0, 2] since nums[0] + nums[2] = 2 + 4 = 6</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Since the array is sorted, can use two-pointer approach that has one point  to the start of the list while the other point at the end and move the  toward each other.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/two_sum_ii_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-string-determine-if-it-is-a-palindrome-considering-only-alphanumeric-characters-and-ignoring-cases\">3. Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"A man, a plan, a canal: Panama\"  Output: true- Input: \"race a car\"  Output: false</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use two pointers approach that have one point to the start of the string and  the other point at the end.- Move them toward each other and compare if they're the same characters while  skipping non-alphanumeric characters and ignoring cases.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/valid_palindrome_test.go\">Link to solution →</a></p><h3 id=\"4-implement-strstr-that-finds-the-first-occurrence-of-the-substring-needle-in-the-string-haystack-it-returns--1-if-needle-is-not-part-of-the-haystack\">4. Implement strstr() that finds the first occurrence of the substring needle in the string haystack. It returns -1 if needle is not part of the haystack.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: haystack = \"aaabacd\", needle = \"ba\"  Output: 3, because needle \"ba\" starts at index 3 in the haystack.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Scan the needle with the haystack from its first position and start matching  all subsequent letters one by one.- If one letter does not match, start again with the next position in the  haystack.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(nm) time, O(1) space, where n is the length of haystack while m is the  length of needle.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/strstr_test.go\">Link to solution →</a></p><h3 id=\"5-given-a-string-reverse-it-word-by-word\">5. Given a string, reverse it word by word.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"hard so be to have not does interview coding\"  Output: \"coding interview does not have to be so hard\"</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Approach with a two-pass solution.- The first pass is to split the string into an array of words separated by  spaces.- The second pass is to reverse the order of words in the array by using  two-pointer approach: swap two values on both ends as we move toward the  middle.- Concatenate the values of ordered array to create a final string.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/reverse_words_string_test.go\">Link to solution →</a></p><h3 id=\"6-given-a-string-find-the-length-of-the-longest-substring-without-repeating-characters\">6. Given a string, find the length of the longest substring without repeating characters.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"abcabcbb\"  Output: 3  Explanation: The longest substring is \"abc\" with the length of 3.- Input: \"bbbbb\"  Output: 1  Explanation: The longest substring is \"b\" with the length of 1.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through the string and keep track of the maximum length of non-repeating  characters using a hashmap that maps characters to their indices.- Could skip characters immediately if we found a repeating character.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(m) cost where m &lt; n and  n is the length of the string.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/longest_substring_test.go\">Link to solution →</a></p><h3 id=\"7-given-a-sorted-integer-array-where-the-range-of-elements-are-0-99-inclusive-return-its-missing-ranges\">7. Given a sorted integer array where the range of elements are [0, 99] inclusive, return its missing ranges.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{0, 1, 6, 16, 66, 99}  Output: []string{\"2-5\", \"7-15\", \"17-65\", \"67-98\"}- Input: []int{6, 16, 66}  Output: []string{\"0-5\", \"7-15\", \"17-65\", \"67-99\"}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Keep two pointers where one is ahead of the other by 1 index.- Iterate through the list, calculate the difference of two consecutive numbers  in the list at each step and append it to a new list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(m) space, where m &lt; n and n is the size of the input.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/missing_ranges_test.go\">Link to solution →</a></p><h3 id=\"8-given-two-strings-determine-if-they-are-both-one-edit-distance-apart\">8. Given two strings, determine if they are both one edit distance apart.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"abcde\", \"abXde\"  Output: true  Explanation: Only \"c\" in S is replaced by \"X\" in T.- Input: \"abcde\", \"abcXde\"  Output: true  Explanation: \"X\" is inserted between \"c\" and \"d\" in S to get T.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use two-pointer approach to traverse both strings at the same time and  keep track of count of difference characters.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/leetcode/one_edit_distance_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/10/08/leetcode-array-string",
            
            
            
            "tags": ["leetcode","algorithm"],
            
            "date_published": "2019-10-08T00:00:00-04:00",
            "date_modified": "2019-10-08T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/10/01/interviewcake-linked-list",
            "title": "Interview Cake's Linked Lists",
            "summary": null,
            "content_text": "1. Delete a node from a singly-linked list, given only a pointer to that node.Approach:- Since we don't have access to the previous node, simply copy the value and  pointer of the next node and copy them into the current node.Cost:- O(1) time and O(1) space.Link to solution →2. Determine if a singly-linked list has a cycle.Approach:- Keep two pointers starting at the first node such that: every time one moves  one node ahead, the other moves 2 nodes ahead.- If the linked list has a cycle, the faster one will catch up with the slow  one. Otherwise, the faster one will each the end.Cost:- O(n) time and O(1) space.Link to solution →3. Reverse a linked list in-place.Approach:- Iterate through the list and point each node's next pointer to the previous item.Cost:- O(n) time, O(1) space.Link to solution →4. Find the kth to last node in a linked list.Example:- Input: list = 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6, k = 2  Output: 5, because 5 is the 2nd to the last node (6)Approach:- Use two pointers such that one starts at the beginning and the other one  starts at k distance apart.- Walk both at the same speed toward the end.- When one hits the tail, the other one is on the target node.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-delete-a-node-from-a-singly-linked-list-given-only-a-pointer-to-that-node\">1. Delete a node from a singly-linked list, given only a pointer to that node.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Since we don't have access to the previous node, simply copy the value and  pointer of the next node and copy them into the current node.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(1) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/delete_node_test.go\">Link to solution →</a></p><h3 id=\"2-determine-if-a-singly-linked-list-has-a-cycle\">2. Determine if a singly-linked list has a cycle.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Keep two pointers starting at the first node such that: every time one moves  one node ahead, the other moves 2 nodes ahead.- If the linked list has a cycle, the faster one will catch up with the slow  one. Otherwise, the faster one will each the end.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/linked_list_cycle_test.go\">Link to solution →</a></p><h3 id=\"3-reverse-a-linked-list-in-place\">3. Reverse a linked list in-place.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through the list and point each node's next pointer to the previous item.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/reverse_linked_list_test.go\">Link to solution →</a></p><h3 id=\"4-find-the-kth-to-last-node-in-a-linked-list\">4. Find the kth to last node in a linked list.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: list = 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6, k = 2  Output: 5, because 5 is the 2nd to the last node (6)</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use two pointers such that one starts at the beginning and the other one  starts at k distance apart.- Walk both at the same speed toward the end.- When one hits the tail, the other one is on the target node.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/kth_to_last_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/10/01/interviewcake-linked-list",
            
            
            
            "tags": ["interviewcake","algorithm"],
            
            "date_published": "2019-10-01T00:00:00-04:00",
            "date_modified": "2019-10-01T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/09/24/7-sorting-algorithms",
            "title": "7 sorting algorithms",
            "summary": null,
            "content_text": "Here are 7 sorting algorithms implementations in Go that we are going to cover in this post:  Bubble Sort  Selection Sort  Insertion Sort  Merge Sort  Quicksort  Heapsort  Counting SortBubble SortApproach:Repeatedly swap the adjacent elements if they are in the wrong order in thearray, one item at a time.Cost:O(n^2) time and O(1) space.Solution:func bubbleSort(in []int) {\tlength := len(in)\t// for each element in the list, check it with almost every other element.\tfor i := 0; i &lt; length; i++ {\t\t// since the last i element is already in place, only iterate through\t\t// the item before the last one.\t\tfor j := 0; j &lt; length-i-1; j++ {\t\t\t// swap the adjacent elements if they are not in ascending order.\t\t\tif in[j] &gt; in[j+1] {\t\t\t\tcommon.Swap(in, j, j+1)\t\t\t}\t\t}\t}}Selection SortApproach:Repeatedly select the next smallest element from the unsorted array and move itto the front.Cost:O(n^2) time and O(1) space.Solution:func selectionSort(in []int) {\tminIndex := 0\tfor i := 0; i &lt; len(in)-1; i++ {\t\tminIndex = i\t\t// find the minimum in the rest of the array.\t\tfor j := i + 1; j &lt; len(in); j++ {\t\t\tif in[j] &lt; in[minIndex] {\t\t\t\tminIndex = j\t\t\t}\t\t}\t\t// swap the minimum value with the first value.\t\tcommon.Swap(in, i, minIndex)\t}}Insertion SortApproach:Insert elements from an unsorted array into a sorted subsection of thearray, one item at a time.Cost:O(n^2) time and O(1) space.Solution:func insertionSort(in []int) {\t// iterate through the list from position 1.\tfor i := 1; i &lt; len(in); i++ {\t\t// shift each one to the left by swapping it with the one before until\t\t// it's in the right spot.\t\tcurrent := in[i]\t\tj := i - 1\t\tfor j &gt;= 0 &amp;&amp; current &lt; in[j] {\t\t\tin[j+1] = in[j]\t\t\tj--\t\t}\t\tin[j+1] = current\t}}Merge SortApproach:Split the input in half, recursively sorts each half, then merge thesorted halves back together.Cost:O(nlogn) time and O(n) space.Solution:func mergeSort(in []int) []int {\t// base case\tif len(in) &lt;= 1 {\t\treturn in\t}\t// split the input in half.\tmiddleIndex := len(in) / 2\tleft := in[:middleIndex]\tright := in[middleIndex:]\t// sort each half.\tleftSorted := mergeSort(left)\trightSorted := mergeSort(right)\t// merge the sorted halves.\treturn mergeSortedArray(leftSorted, rightSorted)}func mergeSortedArray(a1, a2 []int) []int {\tout := []int{}\t// keep two \"pointer\" at index 0 and move up accordingly as one get\t// merged in.\ti, j := 0, 0\tfor i &lt; len(a1) &amp;&amp; j &lt; len(a2) {\t\tif a1[i] &lt; a2[j] {\t\t\tout = append(out, a1[i])\t\t\ti++\t\t} else {\t\t\tout = append(out, a2[j])\t\t\tj++\t\t}\t}\t// if we get here, one array must have bigger size than the other. could\t// figure out which one is it then copy the rest of its to our final one.\tif i &lt; len(a1) {\t\tout = append(out, a1[i:]...)\t}\tif j &lt; len(a2) {\t\tout = append(out, a2[j:]...)\t}\treturn out}QuicksortApproach:Recursively divide the input into two smaller arrays around a pivot, whereone half has items smaller than the pivot, other half has items bigger thanthe pivot.Cost:O(nlogn) time and O(nlogn) space.Solution:func quicksort(in []int, start, end int) {\tif start &lt; end {\t\t// pi is the pivot/partition index.\t\tpi := partition(in, start, end)\t\t// sort the items before and after partition.\t\tquicksort(in, start, pi-1)\t\tquicksort(in, pi+1, end)\t}}func partition(in []int, start, end int) int {\tpivot := in[end]\tleft := start\tright := end - 1\tfor left &lt;= right {\t\t// keep going until we find something on the left that belongs to the\t\t// right.\t\tfor left &lt;= end &amp;&amp; in[left] &lt; pivot {\t\t\tleft++\t\t}\t\t// keep going until we find something on the right that belongs to the\t\t// left.\t\tfor right &gt;= start &amp;&amp; in[right] &gt;= pivot {\t\t\tright--\t\t}\t\t// by swapping the item at left and right index, we move the item that\t\t// is smaller than the pivot to the left half and vice versa.\t\tif left &lt; right {\t\t\tcommon.Swap(in, left, right)\t\t} else {\t\t\t// once the partition is finished, move the pivot back to its final\t\t\t// position by swapping the item at left and end index.\t\t\tcommon.Swap(in, left, end)\t\t}\t}\treturn left}HeapsortApproach:Similar to selection sort, repeatedly choose the largest item and move it tothe end of the array using a max heap.Cost:O(nlogn) time and O(1) space.Solution:func heapsort(in []int) {\theapify(in)\tsize := len(in)\tfor size &gt; 0 {\t\t// repeatedly remove the largest item.\t\tlargest := removeLargest(in, size)\t\t// update the heap size.\t\tsize--\t\t// store the removed value at the end of the list.\t\tin[size] = largest\t}}// heapify transform the input into a max heap.func heapify(in []int) {\tfor i := len(in) - 1; i &gt; -1; i-- {\t\tbubbleDown(in, len(in), i)\t}}// bubbleDown allow larger values to reach the top.func bubbleDown(heap []int, heapSize int, index int) {\tfor index &lt; heapSize {\t\t// fast-calculate the children left and right index.\t\tleft := index*2 + 1\t\tright := index*2 + 2\t\t// stop if there is no child node.\t\tif left &gt;= heapSize {\t\t\tbreak\t\t}\t\t// find the larger index\t\tlarger := left\t\tif right &lt; heapSize &amp;&amp; heap[left] &lt; heap[right] {\t\t\tlarger = right\t\t}\t\t// if the current item is larger than both children, we're done.\t\t// if not, swap with the larger child.\t\tif heap[index] &lt; heap[larger] {\t\t\tcommon.Swap(heap, index, larger)\t\t} else {\t\t\tbreak\t\t}\t}}// removeLargest remove and return the largest item from the heap.func removeLargest(heap []int, heapSize int) int {\t// largest item is at the top of our max heap.\tlargest := heap[0]\t// move the last item into the root position.\theap[0] = heap[heapSize-1]\t// bubble down from the root to restore the heap.\tbubbleDown(heap, heapSize-1, 0)\treturn largest}Counting SortApproach:Iterate through the input, count the number of times each item occurs, usethese counts to compute each item's index in the final sorted array.Cost:O(n) time and O(n) space.Solution:func countingSort(in []int, max int) []int {\t// utilize max value to create a fix-sized list of item counts.\tcounts := make([]int, max+1)\tout := make([]int, 0)\t// populate the array where its indices represent items themselves and\t// its values represent how many time the item appears.\tfor _, item := range in {\t\tcounts[item]++\t}\t// iterate through the counts and add the item to the output list.\tfor i := 0; i &lt; len(counts); i++ {\t\tcount := counts[i]\t\tfor j := 0; j &lt; count; j++ {\t\t\tout = append(out, i)\t\t}\t}\treturn out}  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<p>Here are 7 sorting algorithms implementations in Go that we are going to cover in this post:</p><ol>  <li>Bubble Sort</li>  <li>Selection Sort</li>  <li>Insertion Sort</li>  <li>Merge Sort</li>  <li>Quicksort</li>  <li>Heapsort</li>  <li>Counting Sort</li></ol><h2 id=\"bubble-sort\">Bubble Sort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Repeatedly swap the adjacent elements if they are in the wrong order in thearray, one item at a time.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(n^2) time and O(1) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">bubbleSort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span>\t<span class=\"c\">// for each element in the list, check it with almost every other element.</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">length</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// since the last i element is already in place, only iterate through</span>\t\t<span class=\"c\">// the item before the last one.</span>\t\t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">length</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t\t<span class=\"c\">// swap the adjacent elements if they are not in ascending order.</span>\t\t\t<span class=\"k\">if</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"p\">{</span>\t\t\t\t<span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"p\">)</span>\t\t\t<span class=\"p\">}</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"selection-sort\">Selection Sort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Repeatedly select the next smallest element from the unsorted array and move itto the front.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(n^2) time and O(1) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">selectionSort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">minIndex</span> <span class=\"o\">:=</span> <span class=\"m\">0</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t<span class=\"n\">minIndex</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\t\t<span class=\"c\">// find the minimum in the rest of the array.</span>\t\t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">);</span> <span class=\"n\">j</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t\t<span class=\"k\">if</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">minIndex</span><span class=\"p\">]</span> <span class=\"p\">{</span>\t\t\t\t<span class=\"n\">minIndex</span> <span class=\"o\">=</span> <span class=\"n\">j</span>\t\t\t<span class=\"p\">}</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"c\">// swap the minimum value with the first value.</span>\t\t<span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">minIndex</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"insertion-sort\">Insertion Sort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Insert elements from an unsorted array into a sorted subsection of thearray, one item at a time.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(n^2) time and O(1) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">insertionSort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"c\">// iterate through the list from position 1.</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">);</span> <span class=\"n\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// shift each one to the left by swapping it with the one before until</span>\t\t<span class=\"c\">// it's in the right spot.</span>\t\t<span class=\"n\">current</span> <span class=\"o\">:=</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\t\t<span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"m\">1</span>\t\t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"m\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">current</span> <span class=\"o\">&lt;</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\t\t\t<span class=\"n\">j</span><span class=\"o\">--</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">current</span>\t<span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"merge-sort\">Merge Sort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Split the input in half, recursively sorts each half, then merge thesorted halves back together.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(nlogn) time and O(n) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">mergeSort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">[]</span><span class=\"kt\">int</span> <span class=\"p\">{</span>\t<span class=\"c\">// base case</span>\t<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"m\">1</span> <span class=\"p\">{</span>\t\t<span class=\"k\">return</span> <span class=\"n\">in</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// split the input in half.</span>\t<span class=\"n\">middleIndex</span> <span class=\"o\">:=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"m\">2</span>\t<span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"n\">middleIndex</span><span class=\"p\">]</span>\t<span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">middleIndex</span><span class=\"o\">:</span><span class=\"p\">]</span>\t<span class=\"c\">// sort each half.</span>\t<span class=\"n\">leftSorted</span> <span class=\"o\">:=</span> <span class=\"n\">mergeSort</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">)</span>\t<span class=\"n\">rightSorted</span> <span class=\"o\">:=</span> <span class=\"n\">mergeSort</span><span class=\"p\">(</span><span class=\"n\">right</span><span class=\"p\">)</span>\t<span class=\"c\">// merge the sorted halves.</span>\t<span class=\"k\">return</span> <span class=\"n\">mergeSortedArray</span><span class=\"p\">(</span><span class=\"n\">leftSorted</span><span class=\"p\">,</span> <span class=\"n\">rightSorted</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">mergeSortedArray</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">[]</span><span class=\"kt\">int</span> <span class=\"p\">{</span>\t<span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">{}</span>\t<span class=\"c\">// keep two \"pointer\" at index 0 and move up accordingly as one get</span>\t<span class=\"c\">// merged in.</span>\t<span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">0</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"k\">if</span> <span class=\"n\">a1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">a2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\t\t\t<span class=\"n\">i</span><span class=\"o\">++</span>\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span>\t\t\t<span class=\"n\">j</span><span class=\"o\">++</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// if we get here, one array must have bigger size than the other. could</span>\t<span class=\"c\">// figure out which one is it then copy the rest of its to our final one.</span>\t<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">a1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"p\">]</span><span class=\"o\">...</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"p\">]</span><span class=\"o\">...</span><span class=\"p\">)</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">out</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"quicksort\">Quicksort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Recursively divide the input into two smaller arrays around a pivot, whereone half has items smaller than the pivot, other half has items bigger thanthe pivot.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(nlogn) time and O(nlogn) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">quicksort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">if</span> <span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">end</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// pi is the pivot/partition index.</span>\t\t<span class=\"n\">pi</span> <span class=\"o\">:=</span> <span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span>\t\t<span class=\"c\">// sort the items before and after partition.</span>\t\t<span class=\"n\">quicksort</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">pi</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">)</span>\t\t<span class=\"n\">quicksort</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">pi</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">func</span> <span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>\t<span class=\"n\">pivot</span> <span class=\"o\">:=</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">end</span><span class=\"p\">]</span>\t<span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">start</span>\t<span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"m\">1</span>\t<span class=\"k\">for</span> <span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">right</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// keep going until we find something on the left that belongs to the</span>\t\t<span class=\"c\">// right.</span>\t\t<span class=\"k\">for</span> <span class=\"n\">left</span> <span class=\"o\">&lt;=</span> <span class=\"n\">end</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pivot</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">left</span><span class=\"o\">++</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"c\">// keep going until we find something on the right that belongs to the</span>\t\t<span class=\"c\">// left.</span>\t\t<span class=\"k\">for</span> <span class=\"n\">right</span> <span class=\"o\">&gt;=</span> <span class=\"n\">start</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">pivot</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">right</span><span class=\"o\">--</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"c\">// by swapping the item at left and right index, we move the item that</span>\t\t<span class=\"c\">// is smaller than the pivot to the left half and vice versa.</span>\t\t<span class=\"k\">if</span> <span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\t\t\t<span class=\"c\">// once the partition is finished, move the pivot back to its final</span>\t\t\t<span class=\"c\">// position by swapping the item at left and end index.</span>\t\t\t<span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">left</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"heapsort\">Heapsort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Similar to selection sort, repeatedly choose the largest item and move it tothe end of the array using a max heap.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(nlogn) time and O(1) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">heapsort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">heapify</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span>\t<span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span>\t<span class=\"k\">for</span> <span class=\"n\">size</span> <span class=\"o\">&gt;</span> <span class=\"m\">0</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// repeatedly remove the largest item.</span>\t\t<span class=\"n\">largest</span> <span class=\"o\">:=</span> <span class=\"n\">removeLargest</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">)</span>\t\t<span class=\"c\">// update the heap size.</span>\t\t<span class=\"n\">size</span><span class=\"o\">--</span>\t\t<span class=\"c\">// store the removed value at the end of the list.</span>\t\t<span class=\"n\">in</span><span class=\"p\">[</span><span class=\"n\">size</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">largest</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"c\">// heapify transform the input into a max heap.</span><span class=\"k\">func</span> <span class=\"n\">heapify</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">--</span> <span class=\"p\">{</span>\t\t<span class=\"n\">bubbleDown</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">in</span><span class=\"p\">),</span> <span class=\"n\">i</span><span class=\"p\">)</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"c\">// bubbleDown allow larger values to reach the top.</span><span class=\"k\">func</span> <span class=\"n\">bubbleDown</span><span class=\"p\">(</span><span class=\"n\">heap</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">heapSize</span> <span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">index</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"n\">heapSize</span> <span class=\"p\">{</span>\t\t<span class=\"c\">// fast-calculate the children left and right index.</span>\t\t<span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">index</span><span class=\"o\">*</span><span class=\"m\">2</span> <span class=\"o\">+</span> <span class=\"m\">1</span>\t\t<span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">index</span><span class=\"o\">*</span><span class=\"m\">2</span> <span class=\"o\">+</span> <span class=\"m\">2</span>\t\t<span class=\"c\">// stop if there is no child node.</span>\t\t<span class=\"k\">if</span> <span class=\"n\">left</span> <span class=\"o\">&gt;=</span> <span class=\"n\">heapSize</span> <span class=\"p\">{</span>\t\t\t<span class=\"k\">break</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"c\">// find the larger index</span>\t\t<span class=\"n\">larger</span> <span class=\"o\">:=</span> <span class=\"n\">left</span>\t\t<span class=\"k\">if</span> <span class=\"n\">right</span> <span class=\"o\">&lt;</span> <span class=\"n\">heapSize</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"n\">right</span><span class=\"p\">]</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">larger</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\t\t<span class=\"p\">}</span>\t\t<span class=\"c\">// if the current item is larger than both children, we're done.</span>\t\t<span class=\"c\">// if not, swap with the larger child.</span>\t\t<span class=\"k\">if</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"n\">larger</span><span class=\"p\">]</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">Swap</span><span class=\"p\">(</span><span class=\"n\">heap</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">larger</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\t\t\t<span class=\"k\">break</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span><span class=\"p\">}</span><span class=\"c\">// removeLargest remove and return the largest item from the heap.</span><span class=\"k\">func</span> <span class=\"n\">removeLargest</span><span class=\"p\">(</span><span class=\"n\">heap</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">heapSize</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"kt\">int</span> <span class=\"p\">{</span>\t<span class=\"c\">// largest item is at the top of our max heap.</span>\t<span class=\"n\">largest</span> <span class=\"o\">:=</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">]</span>\t<span class=\"c\">// move the last item into the root position.</span>\t<span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">heap</span><span class=\"p\">[</span><span class=\"n\">heapSize</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">]</span>\t<span class=\"c\">// bubble down from the root to restore the heap.</span>\t<span class=\"n\">bubbleDown</span><span class=\"p\">(</span><span class=\"n\">heap</span><span class=\"p\">,</span> <span class=\"n\">heapSize</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">)</span>\t<span class=\"k\">return</span> <span class=\"n\">largest</span><span class=\"p\">}</span></code></pre></div></div><h2 id=\"counting-sort\">Counting Sort</h2><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Iterate through the input, count the number of times each item occurs, usethese counts to compute each item's index in the final sorted array.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>O(n) time and O(n) space.</code></pre></div></div><p>Solution:</p><div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">func</span> <span class=\"n\">countingSort</span><span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"p\">[]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">max</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">[]</span><span class=\"kt\">int</span> <span class=\"p\">{</span>\t<span class=\"c\">// utilize max value to create a fix-sized list of item counts.</span>\t<span class=\"n\">counts</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">max</span><span class=\"o\">+</span><span class=\"m\">1</span><span class=\"p\">)</span>\t<span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">)</span>\t<span class=\"c\">// populate the array where its indices represent items themselves and</span>\t<span class=\"c\">// its values represent how many time the item appears.</span>\t<span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">in</span> <span class=\"p\">{</span>\t\t<span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span><span class=\"o\">++</span>\t<span class=\"p\">}</span>\t<span class=\"c\">// iterate through the counts and add the item to the output list.</span>\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">counts</span><span class=\"p\">);</span> <span class=\"n\">i</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t<span class=\"n\">count</span> <span class=\"o\">:=</span> <span class=\"n\">counts</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\t\t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">count</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span> <span class=\"p\">{</span>\t\t\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\t\t<span class=\"p\">}</span>\t<span class=\"p\">}</span>\t<span class=\"k\">return</span> <span class=\"n\">out</span><span class=\"p\">}</span></code></pre></div></div><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/09/24/7-sorting-algorithms",
            
            
            
            "tags": ["algorithm","sorting"],
            
            "date_published": "2019-09-24T00:00:00-04:00",
            "date_modified": "2019-09-24T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/09/17/interviewcake-queue-stack",
            "title": "Interview Cake's Queues and Stacks",
            "summary": null,
            "content_text": "1. Implement a stack with a method getMax() that returns the largest element in the stack in O(1) time.Approach:- We use two stack implementation themselves: one holds all the items and the  other holds all the maximum values after each push() and pop().- That way, we could keep track of your maximum value up to date in constant  time.Cost:- O(1) time, O(m) space where m is the number of operations performed on the  stack.Link to solution →2. Implement a queue with 2 stacks.Approach:- Use one stack for enqueuing item and the other to reverse the order them for  dequeuing/popping item.Cost:- O(1) time, O(m) space m is the number of operations.Link to solution →3. Given a sentence as string, and the position of an opening parenthesis position, find the matching closing one position.Example:- Input: \"I ((like) (nesting) parenthesis)\", opening parenthesis position = 2  Output: 31, because the matching parenthesis of the one in position 2 is at  index 31.Approach:- Iterate through the string and keep a count of matching parenthesis at each  step.Cost:- O(n) time, O(1) space.Link to solution →4. Given a string, determine if its brackets are properly nested.Example:- Input: \"{[]()}\"  Output: true- Input: \"{[(])}\"  Output: false- Input: \"{[}\"  Output: falseApproach:- Use a stack to keep track of matching parenthesis as we iterate  through the string.Cost:- O(n) time and O(n) space, where n is the number of operations.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-implement-a-stack-with-a-method-getmax-that-returns-the-largest-element-in-the-stack-in-o1-time\">1. Implement a stack with a method getMax() that returns the largest element in the stack in O(1) time.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- We use two stack implementation themselves: one holds all the items and the  other holds all the maximum values after each push() and pop().- That way, we could keep track of your maximum value up to date in constant  time.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(1) time, O(m) space where m is the number of operations performed on the  stack.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/largest_stack_test.go\">Link to solution →</a></p><h3 id=\"2-implement-a-queue-with-2-stacks\">2. Implement a queue with 2 stacks.</h3><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use one stack for enqueuing item and the other to reverse the order them for  dequeuing/popping item.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(1) time, O(m) space m is the number of operations.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/queue_two_stacks_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-sentence-as-string-and-the-position-of-an-opening-parenthesis-position-find-the-matching-closing-one-position\">3. Given a sentence as string, and the position of an opening parenthesis position, find the matching closing one position.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"I ((like) (nesting) parenthesis)\", opening parenthesis position = 2  Output: 31, because the matching parenthesis of the one in position 2 is at  index 31.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through the string and keep a count of matching parenthesis at each  step.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/parenthesis_matching_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-string-determine-if-its-brackets-are-properly-nested\">4. Given a string, determine if its brackets are properly nested.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"{[]()}\"  Output: true- Input: \"{[(])}\"  Output: false- Input: \"{[}\"  Output: false</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a stack to keep track of matching parenthesis as we iterate  through the string.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time and O(n) space, where n is the number of operations.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/bracket_validator_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/09/17/interviewcake-queue-stack",
            
            
            
            "tags": ["interviewcake","algorithm"],
            
            "date_published": "2019-09-17T00:00:00-04:00",
            "date_modified": "2019-09-17T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/08/31/interviewcake-tree-graph",
            "title": "Interview Cake's Trees and Graphs",
            "summary": null,
            "content_text": "1. Given a binary tree, determine if it is “superbalanced” - the difference between the depths of any two leaf nodes is no greater than 1.Example:- Input:         1      2     3    4   5      7          6  8   9                   10  Output: false  Even though this tree is balanced by definition, it is not \"superbalanced\".Approach:- Use a depth-first walk through the tree and keep track of the depth as we  go.- Every time we found a leaf with a new depth, there are two ways that the  tree could be unbalanced:   - There are more than 2 different leaf depths.   - There are exactly 2 depths but they are more than 1 apart.Cost:- O(n) time, O(n) space.- The worst case is that we have to iterate all nodes in the tree so the time  complexity is O(n). For space complexity, we have to keep track of the all  the nodes at every depth. Hence, it is O(n).Link to solution →2. Given a binary tree, determine if it is a binary search tree.Example:- Input:          5      3       8    2   4   7   9  1               11  Output: true, because for each node, its value is greater than all values in  the left subtree and less than all values in the right one.Approach:- Use a depth-first walk through the tree and validate each node as we go.- If a node appears in the left subtree, it must be less than its ancestor and  vice versa.- Instead of keeping track of every ancestor to check the inequalities, just  need to check the largest number it must be greater than and the smallest one  it must be less than, aka lower bound and upper bound.Cost:- O(n) time, O(n) space.- The worst case is that we have to iterate all nodes in the tree so the time  complexity is O(n). For space complexity, we have to keep track of the lower  bound and upper bound as we traverse the tree via a stack. Hence, the worst  case is O(n).Link to solution →3. Given a binary search tree, find the 2nd largest item.Example:- Input:          5      3       8    2   4   7   9  1               11  Output: 9- Input:           5      3        8    2   4   7     16                11              9   12  Output: 12Approach:- The largest item in a binary search tree is the rightmost item. Can  simply traverse down the tree recursively to find one.- The 2nd largest item could be the parent of the largest but it's not  necessary since the largest could have a left subtree and there might exist  one there.- Still, the second largest one when the largest has a left subtree is basically  the largest one in that left subtree.Cost:- O(h) time, O(1) space, where h is the height of the tree.- If the tree is balanced, the time complexity is (Olgn). Otherwise, it's O(n).Link to solution →4. Given an undirected graph, with maximum degree d, find a graph coloring using at most d + 1 colors. Assume that there is no node with a loop.Example:- For a graph with degree 3, we could use at most 4 colors.Approach:- Use a greedy approach to iterate over the graph and assign each node the  first non-taken color that we found.Cost:- O(m) time and O(d) space, where m is sum of all the nodes and edges, d is  the number of all colors.- Even though it seems like we have an outer and inner loop, we carefully walk  through the graph one node at a time and stop checking for colors as soon as  we found one that is non-taken.- About the space complexity, it makes sense that we have to store all  available colors in the worst case. Hence it takes up O(d) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-binary-tree-determine-if-it-is-superbalanced---the-difference-between-the-depths-of-any-two-leaf-nodes-is-no-greater-than-1\">1. Given a binary tree, determine if it is “superbalanced” - the difference between the depths of any two leaf nodes is no greater than 1.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:         1      2     3    4   5      7          6  8   9                   10  Output: false  Even though this tree is balanced by definition, it is not \"superbalanced\".</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a depth-first walk through the tree and keep track of the depth as we  go.- Every time we found a leaf with a new depth, there are two ways that the  tree could be unbalanced:   - There are more than 2 different leaf depths.   - There are exactly 2 depths but they are more than 1 apart.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.- The worst case is that we have to iterate all nodes in the tree so the time  complexity is O(n). For space complexity, we have to keep track of the all  the nodes at every depth. Hence, it is O(n).</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/balanced_binary_tree_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-binary-tree-determine-if-it-is-a-binary-search-tree\">2. Given a binary tree, determine if it is a binary search tree.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:          5      3       8    2   4   7   9  1               11  Output: true, because for each node, its value is greater than all values in  the left subtree and less than all values in the right one.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a depth-first walk through the tree and validate each node as we go.- If a node appears in the left subtree, it must be less than its ancestor and  vice versa.- Instead of keeping track of every ancestor to check the inequalities, just  need to check the largest number it must be greater than and the smallest one  it must be less than, aka lower bound and upper bound.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.- The worst case is that we have to iterate all nodes in the tree so the time  complexity is O(n). For space complexity, we have to keep track of the lower  bound and upper bound as we traverse the tree via a stack. Hence, the worst  case is O(n).</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/binary_search_tree_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-binary-search-tree-find-the-2nd-largest-item\">3. Given a binary search tree, find the 2nd largest item.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input:          5      3       8    2   4   7   9  1               11  Output: 9- Input:           5      3        8    2   4   7     16                11              9   12  Output: 12</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- The largest item in a binary search tree is the rightmost item. Can  simply traverse down the tree recursively to find one.- The 2nd largest item could be the parent of the largest but it's not  necessary since the largest could have a left subtree and there might exist  one there.- Still, the second largest one when the largest has a left subtree is basically  the largest one in that left subtree.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(h) time, O(1) space, where h is the height of the tree.- If the tree is balanced, the time complexity is (Olgn). Otherwise, it's O(n).</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/2nd_largest_item_bst_test.go\">Link to solution →</a></p><h3 id=\"4-given-an-undirected-graph-with-maximum-degree-d-find-a-graph-coloring-using-at-most-d--1-colors-assume-that-there-is-no-node-with-a-loop\">4. Given an undirected graph, with maximum degree d, find a graph coloring using at most d + 1 colors. Assume that there is no node with a loop.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- For a graph with degree 3, we could use at most 4 colors.</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a greedy approach to iterate over the graph and assign each node the  first non-taken color that we found.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(m) time and O(d) space, where m is sum of all the nodes and edges, d is  the number of all colors.- Even though it seems like we have an outer and inner loop, we carefully walk  through the graph one node at a time and stop checking for colors as soon as  we found one that is non-taken.- About the space complexity, it makes sense that we have to store all  available colors in the worst case. Hence it takes up O(d) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/graph_coloring_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/08/31/interviewcake-tree-graph",
            
            
            
            "tags": ["interviewcake","algorithm"],
            
            "date_published": "2019-08-31T00:00:00-04:00",
            "date_modified": "2019-08-31T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/08/26/simple-path-to-wealth",
            "title": "JL Collins, The Simple Path to Wealth",
            "summary": null,
            "content_text": "  The pursuit of financial independence is not about retirement, but about having options, having enough money and the freedom it provides.  Save at least 50% of your income.          Avoid debts.      Optimize travelling cost by living close to work or doing remote work.      Don’t buy expensive car.                  If you don’t even have the money invested somewhere to allow you to pay for a car in cash, you are obviously far too poor to buy that car.          Buy good used ones.                    Cook at home.        Invest in low cost index fund.          The market always go up.                  Never time the market.          While you are in wealth accumulation phase, celebrate market drops since each dollar will buy you more share.                    Once 4% of your assets can cover your expenses, consider yourself financially independent.                  If you are living on $25,000 you have reached financial independence with $600,000 invested.                      Once you’ve reached financial dependent,          Begin expending your lifestyle still keep your spending level at 4% of your holding.      Consider having children or buying a house.      References:  https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth  https://www.mrmoneymustache.com/2013/02/22/getting-rich-from-zero-to-hero-in-one-blog-post/",
            "content_html": "<ul>  <li>The pursuit of financial independence is not about retirement, but about having options, having enough money and the freedom it provides.</li>  <li>Save at least 50% of your income.    <ul>      <li>Avoid debts.</li>      <li>Optimize travelling cost by living close to work or doing remote work.</li>      <li>Don’t buy expensive car.        <ul>          <li><a href=\"https://www.mrmoneymustache.com/2011/11/28/new-cars-and-auto-financing-stupid-or-sensible/\">If you don’t even have the money invested somewhere to allow you to pay for a car in cash, you are obviously far too poor to buy that car.</a></li>          <li><a href=\"https://www.mrmoneymustache.com/2012/03/19/top-10-cars-for-smart-people/\">Buy good used ones.</a></li>        </ul>      </li>      <li>Cook at home.</li>    </ul>  </li>  <li>Invest in low cost index fund.    <ul>      <li>The market always go up.        <ul>          <li>Never time the market.</li>          <li>While you are in wealth accumulation phase, celebrate market drops since each dollar will buy you more share.</li>        </ul>      </li>      <li>Once 4% of your assets can cover your expenses, consider yourself financially independent.        <ul>          <li>If you are living on $25,000 you have reached financial independence with $600,000 invested.</li>        </ul>      </li>    </ul>  </li>  <li>Once you’ve reached financial dependent,    <ul>      <li>Begin expending your lifestyle still keep your spending level at 4% of your holding.</li>      <li>Consider having children or buying a house.</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth\">https://www.goodreads.com/book/show/30646587-the-simple-path-to-wealth</a></li>  <li><a href=\"https://www.mrmoneymustache.com/2013/02/22/getting-rich-from-zero-to-hero-in-one-blog-post/\">https://www.mrmoneymustache.com/2013/02/22/getting-rich-from-zero-to-hero-in-one-blog-post/</a></li></ul>",
            "url": "https://hoanhan101.github.io/2019/08/26/simple-path-to-wealth",
            
            
            
            "tags": ["book","spending","saving","investing","rich","wealth","compound"],
            
            "date_published": "2019-08-26T00:00:00-04:00",
            "date_modified": "2019-08-26T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/08/24/interviewcake-greedy-algorithms",
            "title": "Interview Cake's Greedy algorithms",
            "summary": null,
            "content_text": "1. Given a list of stock prices (integer) in chronological order, return the max profit from buying at earlier time and selling at later time.Example:- Input: []int{10, 7, 5, 8, 11, 9}  Output: 6, because one can buy at 5 and sell at 11Approach:- Use a greedy approach to keep track of the minimum price and the maximum  profit for each value while iterating through the list.Cost:- O(n) time, O(1) space.Link to solution →2. Given a list of integers, return the highest product of three numbers.Example:- Input: []int{-10, -10, 1, 3, 2}  Output: 300, because -10.-10.3 gives the highest productApproach:- Use a greedy approach to keep track of the current highest, current lowest,  highest of three, highest of two and lowest of two for every value as we  iterate through the list.Cost:- O(n) time, O(1) space.Link to solution →3. Given a list of integers, return a corresponding list where every index holds the product of every other values except the value in that index. And, you can’t use division!Example:- Input: []int{1, 7, 3, 4}  Output: []int{84, 12, 28, 21}Approach:- Iterate through the list and at each step, calculate the product of all  the integers before each index and the product of all the integers after  each index.Cost:- O(n) time, O(n) space.Link to solution →4. Given a list of integers, shuffle its location in-place.Example:- Input: []int{1, 2, 3, 4, 5}  Output: []int{2, 1, 4, 3, 5}Approach:- Iterate through the list, swap current value with a value in a randomized  index that is between the current and last index.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-list-of-stock-prices-integer-in-chronological-order-return-the-max-profit-from-buying-at-earlier-time-and-selling-at-later-time\">1. Given a list of stock prices (integer) in chronological order, return the max profit from buying at earlier time and selling at later time.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{10, 7, 5, 8, 11, 9}  Output: 6, because one can buy at 5 and sell at 11</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a greedy approach to keep track of the minimum price and the maximum  profit for each value while iterating through the list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/apple_stocks_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-list-of-integers-return-the-highest-product-of-three-numbers\">2. Given a list of integers, return the highest product of three numbers.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{-10, -10, 1, 3, 2}  Output: 300, because -10.-10.3 gives the highest product</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use a greedy approach to keep track of the current highest, current lowest,  highest of three, highest of two and lowest of two for every value as we  iterate through the list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/highest_product_of_three_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-list-of-integers-return-a-corresponding-list-where-every-index-holds-the-product-of-every-other-values-except-the-value-in-that-index-and-you-cant-use-division\">3. Given a list of integers, return a corresponding list where every index holds the product of every other values except the value in that index. And, you can’t use division!</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 7, 3, 4}  Output: []int{84, 12, 28, 21}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through the list and at each step, calculate the product of all  the integers before each index and the product of all the integers after  each index.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/product_of_others_test.go\">Link to solution →</a></p><h3 id=\"4-given-a-list-of-integers-shuffle-its-location-in-place\">4. Given a list of integers, shuffle its location in-place.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 2, 3, 4, 5}  Output: []int{2, 1, 4, 3, 5}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Iterate through the list, swap current value with a value in a randomized  index that is between the current and last index.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/inplace_shuffle_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/08/24/interviewcake-greedy-algorithms",
            
            
            
            "tags": ["interviewcake","algorithm"],
            
            "date_published": "2019-08-24T00:00:00-04:00",
            "date_modified": "2019-08-24T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/08/23/interview-cake-hashing-problems",
            "title": "Interview Cake's Hashing problems",
            "summary": null,
            "content_text": "1. Given a list of movie lengths and a total flight length, determine if there exist two movies that add up to the total length.Example:- Input: list=[]int{2, 3, 4}, length=6  Output: true, because there exists 2 and 4 that add up to 6Approach:- Could use hashmap to keep track of movie lengths that we've seen so far and  look it up as we iterate through the list.Cost:- O(n) time, O(n) space.Link to solution →2. Given a string, check if its permutation is a palindrome.Example:- Input: \"ivicc\"  Output: true- Input: \"civic\"  Output: trueApproach:- To determine if a permutation is a palindrome, need to check if each  character in the string appears an even number of times, allowing for  only one character to appear an odd time, that is the middle one.- Could use a hashmap store the characters and their number of occurrences.Cost:- O(n) time, O(1) space.Link to solution →3. Given a sentence (string), return its word count map.Example:- Input: \"Cliff finished his cake and paid the bill. Bill finished his cake at the edge of the cliff.\"  Output: map[string]int{\"cliff\": 1, \"Cliff\": 1, \"finished\": 2, \"his\": 2, \"cake\": 2, \"and\": 1, \"paid\": 1, \"the\": 3, \"bill\": 1, \"Bill\": 1, \"at\": 1, \"edge\": 1, \"of\": 1}Approach:- First get rid of special characters, then use a hashmap to keep counts of words  as we iterate through the string.Cost:- O(n) time, O(n) space.Link to solution →4. Given an unsorted list scores (integer) and a highest possible score (integer), return a sorted list utilizing that fact.Example:- Input: []int{37, 89, 41, 65, 91, 53}, 100  Output: []int{91, 89, 65, 53, 41, 37}Approach:- Utilize the highest score to allocate a fix-sized list ahead of time where  where its indices represent the scores themselves and its values represent  how many time these scores appear in the list.Cost:- O(n) time, O(n) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-list-of-movie-lengths-and-a-total-flight-length-determine-if-there-exist-two-movies-that-add-up-to-the-total-length\">1. Given a list of movie lengths and a total flight length, determine if there exist two movies that add up to the total length.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: list=[]int{2, 3, 4}, length=6  Output: true, because there exists 2 and 4 that add up to 6</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Could use hashmap to keep track of movie lengths that we've seen so far and  look it up as we iterate through the list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/inflight_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-string-check-if-its-permutation-is-a-palindrome\">2. Given a string, check if its permutation is a palindrome.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"ivicc\"  Output: true- Input: \"civic\"  Output: true</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- To determine if a permutation is a palindrome, need to check if each  character in the string appears an even number of times, allowing for  only one character to appear an odd time, that is the middle one.- Could use a hashmap store the characters and their number of occurrences.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/permutation_palindrome_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-sentence-string-return-its-word-count-map\">3. Given a sentence (string), return its word count map.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: \"Cliff finished his cake and paid the bill. Bill finished his cake at the edge of the cliff.\"  Output: map[string]int{\"cliff\": 1, \"Cliff\": 1, \"finished\": 2, \"his\": 2, \"cake\": 2, \"and\": 1, \"paid\": 1, \"the\": 3, \"bill\": 1, \"Bill\": 1, \"at\": 1, \"edge\": 1, \"of\": 1}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- First get rid of special characters, then use a hashmap to keep counts of words  as we iterate through the string.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/word_cloud_test.go\">Link to solution →</a></p><h3 id=\"4-given-an-unsorted-list-scores-integer-and-a-highest-possible-score-integer-return-a-sorted-list-utilizing-that-fact\">4. Given an unsorted list scores (integer) and a highest possible score (integer), return a sorted list utilizing that fact.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{37, 89, 41, 65, 91, 53}, 100  Output: []int{91, 89, 65, 53, 41, 37}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Utilize the highest score to allocate a fix-sized list ahead of time where  where its indices represent the scores themselves and its values represent  how many time these scores appear in the list.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(n) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/top_scores_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/08/23/interview-cake-hashing-problems",
            
            
            
            "tags": ["interviewcake","algorithm"],
            
            "date_published": "2019-08-23T00:00:00-04:00",
            "date_modified": "2019-08-23T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/08/23/i-will-teach-you-to-be-rich",
            "title": "Ramit Sethi, I Will Teach You to Be Rich",
            "summary": null,
            "content_text": "  When it comes to weight loss, the keys are to eat less and exercise more. But instead of focusing on these 2 fundamental things, we discuss trans fat, supplements,…  It’s the same with personal finance. There are only 3 key points:          Cut costs      Earn more      Optimize your existing spending        Spend consciously:          Define your rich life standard.                  What being rich means to you since it’s different for everyone because we value things differently.          What is important and what not.                    Spend extravagantly on these you value, ruthlessly cut down the cost for everything else. For example:                  Rather spending money on expensive car and big houses, spend them on experiences with friends and people I love.          Can also spend money on different hobbies such as making movies, opening restaurants, universities…                    4 major spending buckets:                  Fixed costs (50-60%): rent, utilities, cell phones, medical insurance, car payment, public transportation, groceries, clothes, internet/cable          Investment (10%): 401k, Roth IRA          Savings (5-10%): house down payment, vacations, gifts, emergency          Guilt-free spending money (20 - 35%): dining out, drinking, movies, clothes, shoes                    Credit cards are worth having as long as you manage them well.                  Completely pay off your bill at the end of the money - own nothing, no interests - like free short-term loan but better because of perks and rewards.          Large purchases are almost made by credits. If you have a good credit score, the interest rates is low, you can save a lot of money.          Increase the credit line every 6-12 months.                      Negotiate a raise:          Getting a raise is not about you - nobody cares if your expenses are higher. It’s about demonstrating your value.      3-6 months before your review: become top performer, exceed every expectations      1-2 months before: prepare evidences      1-2 weeks before: practice the conversations      It’s important that you regularly communicate your process - update every week or two        Saving is not enough. Make money works for you.          Open a high-interest saving bank account and set up automatic transaction.      Invest early.                  Think about the big picture.          Compound interests are huge in the long run.          “Compounding is mankind’s greatest invention because it allows for the reliable, systematic accumulation of wealth.” - Albert Einstein                    Investment isn’t about being sexy, aka picking stocks. It’s about making money.      Everyday you don’t invest, you actually lose money due to inflation. You will not realize this until you are old. That said, think long-term, start invest early.                  Take full advantage of 401k by contributing enough to get 100% of the match - this is free money.          Contribute as much as possible to Roth IRA (check current limits).          If there’s money left over, keep contributing to 401k (check current limits).          Then, Health saving account (HSA).          Then, Non-retirement investment account.                      401k vs Roth IRA.          401k                  Pros:                          Money is not taxed until you withdraw years later. Have more for compound grow.              Employer match - free money              Make 60k, contribute 3k, match 5% -&gt; 6k, start at age 25, earn 8%, earn 1.6 mil when you retire.              Automatic - don’t have to care about it.                                Cons:                          Cause it’s a retirement account. Withdrawing before results in 10% penalty.              Have to pay taxes afterward!              Burden when switching job.                                          Roth IRA - pay taxes on the amounts you contribute.      Conclusion:                  Both of them are for long-term investment&gt;          It’s kind of lock-in because it’s your retirement money but                          You can withdraw your money you contribute penalty free              Access your money in certain cases - hardship distribution.                                            Other investing advices:          Rich people tend to become more conservative when it comes to investing because 2-3% of millions is a lot already!      Stocks has highest risk, brings the best return - 11.5% on average.      Bond has lower risk, 5.2%.      Cash/saving account is the safest, 2-4%.      The rule of thumb is that: when you’re young, invest aggressively on stocks and bonds.      References:  https://www.iwillteachyoutoberich.com/book",
            "content_html": "<ul>  <li>When it comes to weight loss, the keys are to eat less and exercise more. But instead of focusing on these 2 fundamental things, we discuss trans fat, supplements,…</li>  <li>It’s the same with personal finance. There are only 3 key points:    <ul>      <li>Cut costs</li>      <li>Earn more</li>      <li>Optimize your existing spending</li>    </ul>  </li>  <li>Spend consciously:    <ul>      <li>Define your rich life standard.        <ul>          <li>What being rich means to you since it’s different for everyone because we value things differently.</li>          <li>What is important and what not.</li>        </ul>      </li>      <li>Spend extravagantly on these you value, ruthlessly cut down the cost for everything else. For example:        <ul>          <li>Rather spending money on expensive car and big houses, spend them on experiences with friends and people I love.</li>          <li>Can also spend money on different hobbies such as making movies, opening restaurants, universities…</li>        </ul>      </li>      <li>4 major spending buckets:        <ul>          <li>Fixed costs (50-60%): rent, utilities, cell phones, medical insurance, car payment, public transportation, groceries, clothes, internet/cable</li>          <li>Investment (10%): 401k, Roth IRA</li>          <li>Savings (5-10%): house down payment, vacations, gifts, emergency</li>          <li>Guilt-free spending money (20 - 35%): dining out, drinking, movies, clothes, shoes</li>        </ul>      </li>      <li>Credit cards are worth having as long as you manage them well.        <ul>          <li>Completely pay off your bill at the end of the money - own nothing, no interests - like free short-term loan but better because of perks and rewards.</li>          <li>Large purchases are almost made by credits. If you have a good credit score, the interest rates is low, you can save a lot of money.</li>          <li>Increase the credit line every 6-12 months.</li>        </ul>      </li>    </ul>  </li>  <li>Negotiate a raise:    <ul>      <li>Getting a raise is not about you - nobody cares if your expenses are higher. It’s about demonstrating your value.</li>      <li>3-6 months before your review: become top performer, exceed every expectations</li>      <li>1-2 months before: prepare evidences</li>      <li>1-2 weeks before: practice the conversations</li>      <li>It’s important that you regularly communicate your process - update every week or two</li>    </ul>  </li>  <li>Saving is not enough. Make money works for you.    <ul>      <li>Open a high-interest saving bank account and set up automatic transaction.</li>      <li>Invest early.        <ul>          <li>Think about the big picture.</li>          <li>Compound interests are huge in the long run.</li>          <li>“Compounding is mankind’s greatest invention because it allows for the reliable, systematic accumulation of wealth.” - Albert Einstein</li>        </ul>      </li>      <li>Investment isn’t about being sexy, aka picking stocks. It’s about making money.</li>      <li>Everyday you don’t invest, you actually lose money due to inflation. You will not realize this until you are old. That said, think long-term, start invest early.        <ul>          <li>Take full advantage of 401k by contributing enough to get 100% of the match - this is free money.</li>          <li>Contribute as much as possible to Roth IRA (check current limits).</li>          <li>If there’s money left over, keep contributing to 401k (check current limits).</li>          <li>Then, Health saving account (HSA).</li>          <li>Then, Non-retirement investment account.</li>        </ul>      </li>    </ul>  </li>  <li>401k vs Roth IRA.    <ul>      <li>401k        <ul>          <li>Pros:            <ul>              <li>Money is not taxed until you withdraw years later. Have more for compound grow.</li>              <li>Employer match - free money</li>              <li>Make 60k, contribute 3k, match 5% -&gt; 6k, start at age 25, earn 8%, earn 1.6 mil when you retire.</li>              <li>Automatic - don’t have to care about it.</li>            </ul>          </li>          <li>Cons:            <ul>              <li>Cause it’s a retirement account. Withdrawing before results in 10% penalty.</li>              <li>Have to pay taxes afterward!</li>              <li>Burden when switching job.</li>            </ul>          </li>        </ul>      </li>      <li>Roth IRA - pay taxes on the amounts you contribute.</li>      <li>Conclusion:        <ul>          <li>Both of them are for long-term investment&gt;</li>          <li>It’s kind of lock-in because it’s your retirement money but            <ul>              <li>You can withdraw your money you contribute penalty free</li>              <li>Access your money in certain cases - hardship distribution.</li>            </ul>          </li>        </ul>      </li>    </ul>  </li>  <li>Other investing advices:    <ul>      <li>Rich people tend to become more conservative when it comes to investing because 2-3% of millions is a lot already!</li>      <li>Stocks has highest risk, brings the best return - 11.5% on average.</li>      <li>Bond has lower risk, 5.2%.</li>      <li>Cash/saving account is the safest, 2-4%.</li>      <li>The rule of thumb is that: when you’re young, invest aggressively on stocks and bonds.</li>    </ul>  </li></ul><hr /><p><strong>References:</strong></p><ul>  <li><a href=\"https://www.iwillteachyoutoberich.com/book\">https://www.iwillteachyoutoberich.com/book</a></li></ul>",
            "url": "https://hoanhan101.github.io/2019/08/23/i-will-teach-you-to-be-rich",
            
            
            
            "tags": ["book","spending","saving","investing","wealth","rich","compound"],
            
            "date_published": "2019-08-23T00:00:00-04:00",
            "date_modified": "2019-08-23T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://hoanhan101.github.io/2019/08/21/interviewcake-array-string-manipulation",
            "title": "Interview Cake's Array and string manipulation",
            "summary": null,
            "content_text": "1. Given a list of unsorted, independent meetings, returns a list of a merged one.Example:- Input: []meeting{ {1, 2}, {2, 3}, {4, 5} }  Output: []meeting{ {1, 3}, {4, 5} }- Input: []meeting{ {1, 5}, {2, 3} }  Output: []meeting{ {1, 5} }Approach:- Sort the list in ascending order so that meetings that might need to be  merged are next to each other.- Can merge two meetings together if the first one's end time is greater or  or equal than the second one's start time.Cost:- O(nlogn) time, O(n) space.- Because we sort all meeting first, the runtime is O(nlogn). We create a new  list of merged meeting times, so the space cost is O(n).Link to solution →2. Given a list of string, reverse its order.Example:- Input: []string{\"a\", \"b\", \"c\", \"d\"}  Output: []string{\"d\", \"c\", \"b\", \"a\"}Approach:- Use two pointers approach to swap two values on both ends as we move toward  the middle.Cost:- O(n) time, O(1) space.Link to solution →3. Given a list of string that is made up of word but in reverse, return the correct order in-place.Example:- Input: []string{\"w\", \"o\", \"r\", \"l\", \"d\", \"\", \"h\", \"e\", \"l\", \"l\", \"o\", \"\", \"s\", \"a\", \"y\"}  Output: []string{\"s\", \"a\", \"y\", \"\", \"h\", \"e\", \"l\", \"l\", \"o\", \"\", \"w\", \"o\", \"r\", \"l\", \"d\"}Approach:- Similar to reversing string, use the same idea to reverse all the characters  in the list first so that we could have a list of words in the right order, not  its characters.- Iterate through the list again and reverse its characters.Cost:- O(n) time, O(1) space.Link to solution →4. Merge two sorted arrays.Example:- Input: []int{1, 3, 5}, []int{2, 4, 6}  Output: []int{1, 2, 3, 4, 5, 6}- Input: []int{1, 3, 5}, []int{2, 4, 6, 7}  Output: []int{1, 2, 3, 4, 5, 6, 7}Approach:- Since these arrays are sorted, can use two pointers approach to iterate  through both of them and append the smaller value to a new merged list at  each step.Cost:- O(n) time, O(1) space.Link to solution →  For more coding problems, please visit  https://github.com/hoanhan101/algo.  If you’re interested in getting updates for such content like these, consider  joining my mailing list here →",
            "content_html": "<h3 id=\"1-given-a-list-of-unsorted-independent-meetings-returns-a-list-of-a-merged-one\">1. Given a list of unsorted, independent meetings, returns a list of a merged one.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []meeting{ {1, 2}, {2, 3}, {4, 5} }  Output: []meeting{ {1, 3}, {4, 5} }- Input: []meeting{ {1, 5}, {2, 3} }  Output: []meeting{ {1, 5} }</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Sort the list in ascending order so that meetings that might need to be  merged are next to each other.- Can merge two meetings together if the first one's end time is greater or  or equal than the second one's start time.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(nlogn) time, O(n) space.- Because we sort all meeting first, the runtime is O(nlogn). We create a new  list of merged meeting times, so the space cost is O(n).</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/merge_meetings_test.go\">Link to solution →</a></p><h3 id=\"2-given-a-list-of-string-reverse-its-order\">2. Given a list of string, reverse its order.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []string{\"a\", \"b\", \"c\", \"d\"}  Output: []string{\"d\", \"c\", \"b\", \"a\"}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Use two pointers approach to swap two values on both ends as we move toward  the middle.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/reverse_string_test.go\">Link to solution →</a></p><h3 id=\"3-given-a-list-of-string-that-is-made-up-of-word-but-in-reverse-return-the-correct-order-in-place\">3. Given a list of string that is made up of word but in reverse, return the correct order in-place.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []string{\"w\", \"o\", \"r\", \"l\", \"d\", \"\", \"h\", \"e\", \"l\", \"l\", \"o\", \"\", \"s\", \"a\", \"y\"}  Output: []string{\"s\", \"a\", \"y\", \"\", \"h\", \"e\", \"l\", \"l\", \"o\", \"\", \"w\", \"o\", \"r\", \"l\", \"d\"}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Similar to reversing string, use the same idea to reverse all the characters  in the list first so that we could have a list of words in the right order, not  its characters.- Iterate through the list again and reverse its characters.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/reverse_word_test.go\">Link to solution →</a></p><h3 id=\"4-merge-two-sorted-arrays\">4. Merge two sorted arrays.</h3><p>Example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Input: []int{1, 3, 5}, []int{2, 4, 6}  Output: []int{1, 2, 3, 4, 5, 6}- Input: []int{1, 3, 5}, []int{2, 4, 6, 7}  Output: []int{1, 2, 3, 4, 5, 6, 7}</code></pre></div></div><p>Approach:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- Since these arrays are sorted, can use two pointers approach to iterate  through both of them and append the smaller value to a new merged list at  each step.</code></pre></div></div><p>Cost:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>- O(n) time, O(1) space.</code></pre></div></div><p><a href=\"https://github.com/hoanhan101/algo/blob/master/interviewcake/merge_sorted_arrays_test.go\">Link to solution →</a></p><blockquote>  <p>For more coding problems, please visit  <a href=\"https://github.com/hoanhan101/algo\">https://github.com/hoanhan101/algo</a>.</p></blockquote><blockquote>  <p>If you’re interested in getting updates for such content like these, consider  joining my <a href=\"https://tinyletter.com/hoanhan\">mailing list here →</a></p></blockquote>",
            "url": "https://hoanhan101.github.io/2019/08/21/interviewcake-array-string-manipulation",
            
            
            
            "tags": ["interviewcake","algorithm"],
            
            "date_published": "2019-08-21T00:00:00-04:00",
            "date_modified": "2019-08-21T00:00:00-04:00",
            
                "author":  {
                "name": "Hoanh An",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}