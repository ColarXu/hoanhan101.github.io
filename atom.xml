<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Hoanh An</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2020-03-15T17:37:22-04:00</updated>
 <id></id>
 <author>
   <name>Hoanh An</name>
   <email>hoanhan101@gmai.com</email>
 </author>

 
 <entry>
   <title>Clayton Christensen, How Will You Measure Your Life?</title>
   <link href="/2020/03/13/how-will-you-measure-your-life"/>
   <updated>2020-03-13T00:00:00-04:00</updated>
   <id>/2020/03/13/how-will-you-measure-your-life</id>
   <content type="html">&lt;p&gt;How to be successful and happy in your career, find happiness in relationships, live a life of integrity:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Find happiness in your career
    &lt;ul&gt;
      &lt;li&gt;Motivation theory - hygiene factors vs motivation factors
        &lt;ul&gt;
          &lt;li&gt;Hygiene factors are status, compensation, job security, work condition, company policies,…
            &lt;ul&gt;
              &lt;li&gt;Bad hygiene causes dissatisfaction - low salary, poor condition,…&lt;/li&gt;
              &lt;li&gt;Improving the hygience factors of your job won’t make you love it, instead just stop you from hating it&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Motivation factors are challenging work, recognition, responsibility, and personal growth
            &lt;ul&gt;
              &lt;li&gt;Motivation is less about the external stimulation but more about what’s inside of you and your work&lt;/li&gt;
              &lt;li&gt;It’s a job that tryly meaningful to you, is challenging and intersting, allows you to grow professionally, provides you good oppoturnities,…&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;One of the easiest mistake is to focus on over-satisfy the hygiene factors over the motivation factors
            &lt;ul&gt;
              &lt;li&gt;Better salaries, more prestigious title, nicer office are not gonna make you happy&lt;/li&gt;
              &lt;li&gt;That said, ask yourself frequently
                &lt;ul&gt;
                  &lt;li&gt;Is this work meaningful to me?&lt;/li&gt;
                  &lt;li&gt;Is this job going to give me a chance to develop?&lt;/li&gt;
                  &lt;li&gt;Am I going to learn new things?&lt;/li&gt;
                  &lt;li&gt;Will I have an opportunity for recognition and achievement?&lt;/li&gt;
                  &lt;li&gt;Am I going to be given responsibility?&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;How to find a career that both motivates you and satisfies the hygiene factors?
        &lt;ul&gt;
          &lt;li&gt;Before taking a job, ask yourself what assumptions have to prove true for you to be happy
            &lt;ul&gt;
              &lt;li&gt;Is this something that you enjoy doing?&lt;/li&gt;
              &lt;li&gt;What evidence do you have?&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Find ways to to test these assumptions&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;How to make sure you’re heading in the right decision on a daily basis?
        &lt;ul&gt;
          &lt;li&gt;Look at how you manage your resources - time, energy, talent, wealth&lt;/li&gt;
          &lt;li&gt;Prioritize on things that require long-term investment (building a good relationship with your family, building a business, raising a child,…)
            &lt;ul&gt;
              &lt;li&gt;It’s often sad to see the same patterns happening over again in the personal lives of many ambituos people - though they believe that family is important, they actually allocate few resources for them&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Find happiness in your relationships
    &lt;ul&gt;
      &lt;li&gt;Relationships with family and close friends are one the greatest sources of happiness in life&lt;/li&gt;
      &lt;li&gt;It needs CONSISTENT attention and care, though it’s difficult because
        &lt;ul&gt;
          &lt;li&gt;You’ll be routinely tempted to invest your resources elsewhere that provide you a more immediate payoff&lt;/li&gt;
          &lt;li&gt;Your family and friends rarely shout the loudest to demand your attention&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;The clock of building a fullfilling relationship is ticking from the start&lt;/li&gt;
      &lt;li&gt;Understand what’s the most important to the other person by asking yourself “What job does one most need me to do?”&lt;/li&gt;
      &lt;li&gt;Children need to do more than learning new skills - they need to be challenged, solve hard problems and develope values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stay out of jail
    &lt;ul&gt;
      &lt;li&gt;The best way to avoid the consequences of uncomfortable moral concessions is to never start making in the first place&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/How-Will-Measure-Your-Life/dp/0062102419&quot;&gt;https://www.amazon.com/How-Will-Measure-Your-Life/dp/0062102419&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Jason Fried, Getting Real</title>
   <link href="/2020/03/13/getting-real"/>
   <updated>2020-03-13T00:00:00-04:00</updated>
   <id>/2020/03/13/getting-real</id>
   <content type="html">&lt;p&gt;The Smarter, Faster, Easier Way to Build a Successful Web Application:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The starting line
    &lt;ul&gt;
      &lt;li&gt;Build less: less features, options, people, meetings, promises&lt;/li&gt;
      &lt;li&gt;Solve your problem
        &lt;ul&gt;
          &lt;li&gt;You know what’s is important and what’s not for the product itself&lt;/li&gt;
          &lt;li&gt;It’s likely people have the same problem so now you have a market too&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Fund yourself - outside funding is plan B
        &lt;ul&gt;
          &lt;li&gt;Investors want their money back quickly -&amp;gt; overhead + other complicated things follow&lt;/li&gt;
          &lt;li&gt;Money constraints force you to focus + allow creativity&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Fix time and budget, flex scope: better to launch great thing, on time, on a budget in small scope than big ones with many holes&lt;/li&gt;
      &lt;li&gt;Pick up an enemy and use it as an motivation to tell better story&lt;/li&gt;
      &lt;li&gt;If your app doesn’t excite you, something’s wrong&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stay lean
    &lt;ul&gt;
      &lt;li&gt;Simplify + focus&lt;/li&gt;
      &lt;li&gt;Lower the cost of change -&amp;gt; change faster (huge advantage over big company)&lt;/li&gt;
      &lt;li&gt;Start with 3 people: a developer, a designer, and a sweeper who can roam between both world&lt;/li&gt;
      &lt;li&gt;Work with your limited resources. Forget about VC, long release cycles, quick hires,…&lt;/li&gt;
      &lt;li&gt;Stay small and friendly -&amp;gt; get closer to customer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Priorities
    &lt;ul&gt;
      &lt;li&gt;What is the app vision? Why does it exit? What makes it different?&lt;/li&gt;
      &lt;li&gt;Don’t get too deep in the details early one. Ship it first and optimize it later&lt;/li&gt;
      &lt;li&gt;don’t waste time on problems you don’t have yet:
        &lt;ul&gt;
          &lt;li&gt;Scaling to millions of users? Stop dreaming! Majority of apps are never going to reach that phase. Worry about it later once it’s wildly successful.&lt;/li&gt;
          &lt;li&gt;Make decisions in time&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Find the right audience
        &lt;ul&gt;
          &lt;li&gt;Narrow the market&lt;/li&gt;
          &lt;li&gt;Focus on the nice or small group of people who wants the product the most&lt;/li&gt;
          &lt;li&gt;Don’t try to please everyone&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Make opinionated software, choose side, like every great companies: Google, Apple,…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Feature selection
    &lt;ul&gt;
      &lt;li&gt;What is the heart of the app?
        &lt;ul&gt;
          &lt;li&gt;Forget milestone, TODO lists.&lt;/li&gt;
          &lt;li&gt;Just focus on the essential.&lt;/li&gt;
          &lt;li&gt;Let it gain traction. Then add to that foundation.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Focus on what matters, REALLY. Cut off everything else.&lt;/li&gt;
      &lt;li&gt;Learn to say no because you have to do that a lot.&lt;/li&gt;
      &lt;li&gt;For every new feature, you need to
        &lt;ul&gt;
          &lt;li&gt;Say no&lt;/li&gt;
          &lt;li&gt;Force the feature to provide its value&lt;/li&gt;
          &lt;li&gt;If no, end. If yes, continue&lt;/li&gt;
          &lt;li&gt;Sketch the UI&lt;/li&gt;
          &lt;li&gt;Design the UI&lt;/li&gt;
          &lt;li&gt;Code&lt;/li&gt;
          &lt;li&gt;Test, tweak, repeat&lt;/li&gt;
          &lt;li&gt;Document&lt;/li&gt;
          &lt;li&gt;Market&lt;/li&gt;
          &lt;li&gt;Revisit pricing options, term of service,&lt;/li&gt;
          &lt;li&gt;Launch&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Build something that you can manage, organizationally, strategically, financially&lt;/li&gt;
      &lt;li&gt;Don’t worry too much about feature requests. Customers will constantly remind you about that.&lt;/li&gt;
      &lt;li&gt;Ask customer what they don’t want too and simplify it if possible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Process
    &lt;ul&gt;
      &lt;li&gt;Get something real up and running quickly: it’s ok to do less, skip details, take shortcuts
        &lt;ul&gt;
          &lt;li&gt;Fail fast and learn&lt;/li&gt;
          &lt;li&gt;Avoid unproductive scheduling and action faking (doing bullshit works that feel “productive” that doesn’t get you closer to launching)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Idea-to-implementation cycle
        &lt;ul&gt;
          &lt;li&gt;What does the app need to do? What exactly are you going to make?&lt;/li&gt;
          &lt;li&gt;Sketch it out on paper&lt;/li&gt;
          &lt;li&gt;Create mock-up html screens&lt;/li&gt;
          &lt;li&gt;Code&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Allowing options/preferences for customers is not necessarily helping them.
        &lt;ul&gt;
          &lt;li&gt;If you make a bad call, they will complain, then you can fix it.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Execute. Build momentum. Move on.&lt;/li&gt;
      &lt;li&gt;Test in the wild.
        &lt;ul&gt;
          &lt;li&gt;Get it out there. Get real results + feedback&lt;/li&gt;
          &lt;li&gt;Instead of having a beta version and a release version, have beta features in side the release one so you can have real data + workflow&lt;/li&gt;
          &lt;li&gt;Break it down into smaller problems and solve it one by one.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Organization
    &lt;ul&gt;
      &lt;li&gt;Build a healthy organization&lt;/li&gt;
      &lt;li&gt;Utilize your alone time to get work done&lt;/li&gt;
      &lt;li&gt;Meetings are normally unproductive.&lt;/li&gt;
      &lt;li&gt;Have fewer meetings&lt;/li&gt;
      &lt;li&gt;Only have it with a clear agenda&lt;/li&gt;
      &lt;li&gt;Release something today. Celebrate small victories.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Staffing
    &lt;ul&gt;
      &lt;li&gt;Hire less, only when it’s really needed.&lt;/li&gt;
      &lt;li&gt;Working with prospective employees on a real project can give a lot of insights. However, not everyone has time for that.&lt;/li&gt;
      &lt;li&gt;Look at people codes + contribution on open-source projects&lt;/li&gt;
      &lt;li&gt;Go for quick learning generalists over ingrained specialists&lt;/li&gt;
      &lt;li&gt;Go for happy one&lt;/li&gt;
      &lt;li&gt;Hire good writers because they know how to communicate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Interface
    &lt;ul&gt;
      &lt;li&gt;Design the interface before you start coding&lt;/li&gt;
      &lt;li&gt;Start from the core page and build outward. Focus on what matters.&lt;/li&gt;
      &lt;li&gt;For each page, consider these 3 states
        &lt;ul&gt;
          &lt;li&gt;Blank: the screen before data is entered // could insert quick tutorials, help blurbs, examples with mock data…&lt;/li&gt;
          &lt;li&gt;Regular: normal page&lt;/li&gt;
          &lt;li&gt;Error: when shit happens&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;It’s ok to be inconsistent if your design makes more sense that way&lt;/li&gt;
      &lt;li&gt;Every letter matters.
        &lt;ul&gt;
          &lt;li&gt;Don’t sound like an engineer talking to another engineer&lt;/li&gt;
          &lt;li&gt;Keep it short and sweet&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Incorporate admin function into public interfaces so you don’t need to manage 2 different versions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Code
    &lt;ul&gt;
      &lt;li&gt;Keep it simple. But be mindful about technical debt.&lt;/li&gt;
      &lt;li&gt;Less maintenance and support work&lt;/li&gt;
      &lt;li&gt;Low cost of change&lt;/li&gt;
      &lt;li&gt;Fewer bugs&lt;/li&gt;
      &lt;li&gt;Choose the tools that everyone is happy and productive with&lt;/li&gt;
      &lt;li&gt;Get data into the world via RSS, API,…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Words
    &lt;ul&gt;
      &lt;li&gt;Document what is needed but nothing else.&lt;/li&gt;
      &lt;li&gt;Write stories, not details.
        &lt;ul&gt;
          &lt;li&gt;Don’t get into the technical/design details, just a quick story&lt;/li&gt;
          &lt;li&gt;Treat it as a normal conversation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Use real data if possible, not dummy text all the time -&amp;gt; focus on the UX&lt;/li&gt;
      &lt;li&gt;What is your product’s personality type?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pricing and signup
    &lt;ul&gt;
      &lt;li&gt;Give something for free. Let  people experience and see its usefulness.&lt;/li&gt;
      &lt;li&gt;Make signup and cancellation easy&lt;/li&gt;
      &lt;li&gt;Avoid long term contract, signup fee,…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Promotion
    &lt;ul&gt;
      &lt;li&gt;Teaser (dropping hints), preview, launch&lt;/li&gt;
      &lt;li&gt;Build a promo site: overview, tour, screenshots, videos, manifesto, case studies, buzz (customers, press reviews,…), forum, pricing and signup, blog,…&lt;/li&gt;
      &lt;li&gt;Blogging can be more effective (and cheaper) than advertising. Could write about advices, tips, tricks, links,…&lt;/li&gt;
      &lt;li&gt;Start collecting emails asap&lt;/li&gt;
      &lt;li&gt;Share your knowledge. Teaching/educating is a great way to market yourself and your product too.
        &lt;ul&gt;
          &lt;li&gt;Blog (as above)&lt;/li&gt;
          &lt;li&gt;Speak at conferences&lt;/li&gt;
          &lt;li&gt;Conduct workshops&lt;/li&gt;
          &lt;li&gt;Give interviews.&lt;/li&gt;
          &lt;li&gt;Write articles/books&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Track your online present. Leave comments, thank you notes, response to negative ones thoughtfully&lt;/li&gt;
      &lt;li&gt;Promote upgrade, in-app purchases&lt;/li&gt;
      &lt;li&gt;Pick an short, catchy, memorable name&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Support
    &lt;ul&gt;
      &lt;li&gt;Feel the pain yourself. Don’t outsource. Learn from it.&lt;/li&gt;
      &lt;li&gt;Use inline help and FAQ instead of giving manual training&lt;/li&gt;
      &lt;li&gt;Just response quickly even if you don’t have a perfect answer (during business hour)&lt;/li&gt;
      &lt;li&gt;Also thank them for their input&lt;/li&gt;
      &lt;li&gt;Be willing to say no&lt;/li&gt;
      &lt;li&gt;Use forum or chat to let customers help each other&lt;/li&gt;
      &lt;li&gt;Be open, honest, transparent (yeah bad news)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Post launch
    &lt;ul&gt;
      &lt;li&gt;Issue a major update 30 days after launch&lt;/li&gt;
      &lt;li&gt;Don’t stop blogging: new FAQs, tutorials, news, features, updates, fixes, buzz/pres&lt;/li&gt;
      &lt;li&gt;Prioritize your bugs&lt;/li&gt;
      &lt;li&gt;Wait before the storm, 1-2 days after releasing a new feature and hearing complaints, then take action&lt;/li&gt;
      &lt;li&gt;Know your competitors&lt;/li&gt;
      &lt;li&gt;More mature doesn’t mean more complicated, as long as you provide valuable services that’s fine.&lt;/li&gt;
      &lt;li&gt;Be open to new paths and changes in direction&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://basecamp.com/books/getting-real&quot;&gt;https://basecamp.com/books/getting-real&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Edmond Lau, The Effective Engineer</title>
   <link href="/2020/03/12/the-effective-engineer"/>
   <updated>2020-03-12T00:00:00-04:00</updated>
   <id>/2020/03/12/the-effective-engineer</id>
   <content type="html">&lt;p&gt;How to Leverage Your Efforts In Software Engineering to Make a Disproportionate and Meaningful Impact:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Focus on high-leverage activities
    &lt;ul&gt;
      &lt;li&gt;Leverage = impact produced / time invested&lt;/li&gt;
      &lt;li&gt;80/20 rule - 80% impact comes from 20% work&lt;/li&gt;
      &lt;li&gt;Focus on not more hours but more value per limited time on the task&lt;/li&gt;
      &lt;li&gt;Increase leverage by
        &lt;ul&gt;
          &lt;li&gt;Reduce the time it takes to complete the activity (default to half-hour meeting instead of one-hour one, automate manual dev process)&lt;/li&gt;
          &lt;li&gt;Increase the value produced (have a clear agenda beforehand, prioritize tasks based on launch date)&lt;/li&gt;
          &lt;li&gt;Shift to higher-leverage activities (use email instead of in-person discussion, talk to customer)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Output can be measured by:
        &lt;ul&gt;
          &lt;li&gt;Number of projects launched&lt;/li&gt;
          &lt;li&gt;Bug fixes&lt;/li&gt;
          &lt;li&gt;Users acquired&lt;/li&gt;
          &lt;li&gt;Engineers hired&lt;/li&gt;
          &lt;li&gt;Quality&lt;/li&gt;
          &lt;li&gt;Revenue generated&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand the power of compound interest
    &lt;ul&gt;
      &lt;li&gt;Compounding leads to an exponential growth curve&lt;/li&gt;
      &lt;li&gt;The earlier compounding starts, the sooner it hits the exponential growth, the faster you can reap its benefits&lt;/li&gt;
      &lt;li&gt;Small deltas in the interest rate can make massive differences in the long run:
        &lt;ul&gt;
          &lt;li&gt;Improving by 1% per day makes us 37x better at the end of year&lt;/li&gt;
          &lt;li&gt;Google idea of 20% where engineers spend about 1 day a week on a side project to make the company better results in successful products such as Gmail , Google News, Adsense,…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Optimize for learning because learning compounds
    &lt;ul&gt;
      &lt;li&gt;Find fast growing work environment&lt;/li&gt;
      &lt;li&gt;Take advantage of the resources at your work
        &lt;ul&gt;
          &lt;li&gt;Study code from best engineers&lt;/li&gt;
          &lt;li&gt;Write more code&lt;/li&gt;
          &lt;li&gt;Go through technical, educational material&lt;/li&gt;
          &lt;li&gt;Send code views to the harshest critics&lt;/li&gt;
          &lt;li&gt;Participate in design discussions - don’t wait for invitation&lt;/li&gt;
          &lt;li&gt;Team with senior engineers&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Invest in other skills too
        &lt;ul&gt;
          &lt;li&gt;Invest in skills that are in high demand&lt;/li&gt;
          &lt;li&gt;Build strong relationships&lt;/li&gt;
          &lt;li&gt;Read books&lt;/li&gt;
          &lt;li&gt;Write to teach&lt;/li&gt;
          &lt;li&gt;Pursue side projects&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Prioritize regularly
    &lt;ul&gt;
      &lt;li&gt;Track TODO list in a single list&lt;/li&gt;
      &lt;li&gt;Sort the list frequently by asking yourself on a recurring basis:
        &lt;ul&gt;
          &lt;li&gt;Is there anything else I could be doing that’s higher-leverage
            &lt;ul&gt;
              &lt;li&gt;Focus on what directly produce value (products shipped, user acquired, business metrics moved, sales made)&lt;/li&gt;
              &lt;li&gt;Focus on the important and non-urgent (planning career goals, building relationships, personal development, improving workflow)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Preserve larger blocks of focused time + learn to say no unimportant activities&lt;/li&gt;
      &lt;li&gt;Limit the amount of work in progress + resist the urge to work on too many projects at once&lt;/li&gt;
      &lt;li&gt;Make it a habit&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Iterate quickly to build more and learn faster
    &lt;ul&gt;
      &lt;li&gt;Invest in time-saving tools
        &lt;ul&gt;
          &lt;li&gt;Bringing the release time down to several minutes helps the team deploy more frequently, 40-50 times a day - skyrockets growth&lt;/li&gt;
          &lt;li&gt;If it saves you 1 hour a day, it saves 10 people 10 times as much&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Measure the progress frequently&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Validate early and often
    &lt;ul&gt;
      &lt;li&gt;A well tested, clean design, scalable product doesn’t deliver much value if users don’t engage or customers don’t buy it&lt;/li&gt;
      &lt;li&gt;Bounce ideas off teammates&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Define measurable milestones&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.effectiveengineer.com/book&quot;&gt;https://www.effectiveengineer.com/book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Patrick McKenzie, Don't Call Yourself A Programmer</title>
   <link href="/2020/03/12/dont-call-yourself-a-programmer"/>
   <updated>2020-03-12T00:00:00-04:00</updated>
   <id>/2020/03/12/dont-call-yourself-a-programmer</id>
   <content type="html">&lt;p&gt;This is for fairly bright young engineer with zero knowledge on how the real world actually works:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Software solves business problems. It doesn’t matter if your app has the most elegant architecture, it must create value for the company aka brings in revenue.&lt;/li&gt;
  &lt;li&gt;Engineers are hired to create business value.
    &lt;ul&gt;
      &lt;li&gt;Non-goals: produce the beautiful software, solve complex technical problems, use sexy frameworks&lt;/li&gt;
      &lt;li&gt;Actual goals: add revenue, reduce costs - “wrote the backend billing code that 97% of Google’s revenue passes through”&lt;/li&gt;
      &lt;li&gt;That’s why Quants makes more in bonuses in a good year than many talented engineers will earn in a lifetime.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Angel investor is a polite synonym for rich.&lt;/li&gt;
  &lt;li&gt;Most hiring happens privately.
    &lt;ul&gt;
      &lt;li&gt;Resume is not the primary way to get job interviews, but connections do.&lt;/li&gt;
      &lt;li&gt;Networking means:
        &lt;ul&gt;
          &lt;li&gt;Meet people at some point can help you&lt;/li&gt;
          &lt;li&gt;Make a favorable impression on them&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Strive to help people first so it’s harder for them to refuse to help you later.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Academia is not like the real world.&lt;/li&gt;
  &lt;li&gt;People who are skilled in negotiation make more than those who are not.
    &lt;ul&gt;
      &lt;li&gt;Sell solution to a business need rather than your programming skill.&lt;/li&gt;
      &lt;li&gt;Learn to negotiate better. (Getting to Yes)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Working at a startup vs megacorp is more of a lifestyle choice.&lt;/li&gt;
  &lt;li&gt;Your most important professional skill is communication.&lt;/li&gt;
  &lt;li&gt;Engineers are not hired to create programs. They are hired to create business value. The dominant quality which gets you jobs is the ability to give people the perception that you will create value.  This is not necessarily coextensive with ability to create value.&lt;/li&gt;
  &lt;li&gt;Try for “It was a privilege to assist my team by leading their efforts with regards to $YOUR_SPECIALTY.” instead of “I owe it all to my team”.&lt;/li&gt;
  &lt;li&gt;Read Never Eat Alone for some social grooming hack.&lt;/li&gt;
  &lt;li&gt;Work to live, don’t live to work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/&quot;&gt;https://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Dave Asprey, Super Human</title>
   <link href="/2020/01/15/super-human"/>
   <updated>2020-01-15T00:00:00-05:00</updated>
   <id>/2020/01/15/super-human</id>
   <content type="html">&lt;p&gt;The Bulletproof Plan to Age Backward and Maybe Even Live Forever:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t die
    &lt;ul&gt;
      &lt;li&gt;The 4 killers are heart disease, diabetes, Alzheimer’s, and cancer
        &lt;ul&gt;
          &lt;li&gt;Maintaining a healthy diet and lifestyle lowers the risk of developing and dying from these&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Food is an anti-aging drug
        &lt;ul&gt;
          &lt;li&gt;Stop eating fried, grilled meat&lt;/li&gt;
          &lt;li&gt;Avoid grains, produce and animal products. Instead, get
            &lt;ul&gt;
              &lt;li&gt;Organic vegetables&lt;/li&gt;
              &lt;li&gt;Organic fruits&lt;/li&gt;
              &lt;li&gt;Meat from pastured animals, eggs, wild fish&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Eat enough protein for tissue repair - 0.5 gram per pound of body weight
            &lt;ul&gt;
              &lt;li&gt;Excess protein causes imflamation&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Eat the right ratios of fat
            &lt;ul&gt;
              &lt;li&gt;50% saturated - fatty meat, lard, butter, cream, cocounuts)&lt;/li&gt;
              &lt;li&gt;25% monosaturated (olive oil, avocados, nuts)&lt;/li&gt;
              &lt;li&gt;15-20% undamaged omega-6&lt;/li&gt;
              &lt;li&gt;5-10% omega-3 (including EPA, DHA)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Limit eating window to 8-10 hours a day&lt;/li&gt;
          &lt;li&gt;Teach your metabolism to be flexible by practicing a ketogenic diet
            &lt;ul&gt;
              &lt;li&gt;Fasting (to clean out damaged cells, regenerate healthier cells)&lt;/li&gt;
              &lt;li&gt;Avoid carbs for a few days&lt;/li&gt;
              &lt;li&gt;Add energy fats to your food (coffee)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Consume more antioxidants to fight of free radicals
            &lt;ul&gt;
              &lt;li&gt;Berries&lt;/li&gt;
              &lt;li&gt;Herbs&lt;/li&gt;
              &lt;li&gt;Spices&lt;/li&gt;
              &lt;li&gt;Coffee&lt;/li&gt;
              &lt;li&gt;Tea&lt;/li&gt;
              &lt;li&gt;Dark chocolate&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Manage stress
        &lt;ul&gt;
          &lt;li&gt;Mediate&lt;/li&gt;
          &lt;li&gt;Practice yoga&lt;/li&gt;
          &lt;li&gt;Get quality sleep&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Aim for 15-20 minutes of natural sun exposure a day&lt;/li&gt;
      &lt;li&gt;Supplement &amp;amp; treatment
        &lt;ul&gt;
          &lt;li&gt;If you have joint pain or blood sugar issues, consider taking glucosamine because it helps
            &lt;ul&gt;
              &lt;li&gt;Control blood sugar&lt;/li&gt;
              &lt;li&gt;Extends the life-span of mice (probably human too)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Vitamin D&lt;/li&gt;
          &lt;li&gt;Try Zona Plus to help with cardiovascular issues&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Age backward
    &lt;ul&gt;
      &lt;li&gt;Stop eating sugar, soy, excess omega-6 fats, refined carbs&lt;/li&gt;
      &lt;li&gt;Exercise intensely 3 times a week to boost testosterone levels.
        &lt;ul&gt;
          &lt;li&gt;HIIT is real effective&lt;/li&gt;
          &lt;li&gt;Make sure to recover fully in between sessions&lt;/li&gt;
          &lt;li&gt;Make sure to get quality sleep&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Consider taking vitamin D3 and zinc&lt;/li&gt;
      &lt;li&gt;Clean up your diet and your mouth.
        &lt;ul&gt;
          &lt;li&gt;Eliminate sugar&lt;/li&gt;
          &lt;li&gt;Try oil pulling&lt;/li&gt;
          &lt;li&gt;Brush occasionally with activated charcoal&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Up your intake of prebiotic fiber&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Heal like a deity
    &lt;ul&gt;
      &lt;li&gt;Spend more time in nature to enhance your immune system&lt;/li&gt;
      &lt;li&gt;Make sure your sexual function is that of a young person
        &lt;ul&gt;
          &lt;li&gt;Consider GAINSWave treatments&lt;/li&gt;
          &lt;li&gt;Practice Kegel on a daily basis&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Super-Human-Bulletproof-Backward-Forever/dp/0062882821&quot;&gt;https://www.amazon.com/Super-Human-Bulletproof-Backward-Forever/dp/0062882821&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>101+ Coding Interview Problems with Detailed Solutions, Test Cases, and Program Analysis</title>
   <link href="/2020/01/06/101-challenges"/>
   <updated>2020-01-06T00:00:00-05:00</updated>
   <id>/2020/01/06/101-challenges</id>
   <content type="html">&lt;p&gt;Hi friends,&lt;/p&gt;

&lt;p&gt;4 months ago, I made a &lt;a href=&quot;https://www.reddit.com/r/learnprogramming/comments/ctyvbc/is_anyone_interested_in_weekly_coding_interview/&quot;&gt;reddit
post&lt;/a&gt;
on creating a newsletter that sends out 3-6 coding interview problems with details
solutions every week. To my surprise, the post received a lot of attention and
positive feedback from the community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Since the total number of problems and solutions has just passed 101, I would
like to say another big thank you all again for all the support. It really
helps me keep going.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Moving on, I am hoping to add more questions and then finally condense them into a list of
most frequently appeared coding interview problems that I think are the most
valuable and productive to spend time on. Again, my goal has always been to
help you get good at algorithms and data structures so that you can prepare better
for your next coding interviews.&lt;/p&gt;

&lt;p&gt;For those who don’t know, &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;here is the link to all 101+ questions and solutions, sorted by
resources →&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’re interested in getting updates for this, feel free to join my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mail
list here →&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Best,&lt;/p&gt;

&lt;p&gt;Hoanh&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Grokking the Coding Interview's Tree Breath First Search</title>
   <link href="/2019/12/24/gtci-tree-bfs"/>
   <updated>2019-12-24T00:00:00-05:00</updated>
   <id>/2019/12/24/gtci-tree-bfs</id>
   <content type="html">&lt;h3 id=&quot;1-given-a-binary-tree-populate-the-values-of-all-nodes-of-each-level-from-left-to-right-in-separate-sub-arrays&quot;&gt;1. Given a binary tree, populate the values of all nodes of each level from left to right in separate sub-arrays.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input:
      1
	2   3
  4       5
  Output: []interface{}{[]interface{}{1}, []interface{}{2, 3}, []interface{}{4, 5}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Start by pushing the root node to the queue.
- Keep iterating until the queue is empty.
- At each step,
  - send the front of the queue and dequeue it
  - enqueue its left and right child
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/level_order_traversal_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-a-binary-tree-populate-the-values-of-all-nodes-of-each-level-in-reverse-order-in-separate-sub-arrays&quot;&gt;2. Given a binary tree, populate the values of all nodes of each level in reverse order in separate sub-arrays.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input:
      1
	2   3
  4       5
  Output: []interface{}{[]interface{}{4, 5}, []interface{}{2, 3}, []interface{}{1}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to level order reversal problem, except we append the current level's
  value at the beginning of the output list.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/reverse_level_order_traversal_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-a-binary-tree-populate-the-values-of-all-nodes-of-each-level-in-a-zigzag-order-in-separate-sub-arrays&quot;&gt;3. Given a binary tree, populate the values of all nodes of each level in a zigzag order in separate sub-arrays.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input:
      1
	2   3
  4       5
  Output: [][]interface{}{[]interface{}{1}, []interface{}{3, 2}, []interface{}{4, 5}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Start by pushing the root node to a queue.
- Keep iterating until the queue is empty.
- At each step,
  - use a linked list to push front or back depending on the zigzag direction
  - enqueue its left and right child
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/zigzag_traversal_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-given-a-binary-tree-populate-an-array-to-represent-the-averages-of-all-of-its-levels&quot;&gt;4. Given a binary tree, populate an array to represent the averages of all of its levels.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input:
      1
	2   3
  4       5
  Output: []float64{1, 2.5, 4.5}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to level order traversal problem, except we keep track of the sum
  at each level and return the average in the end.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/level_avg_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-given-a-binary-tree-find-the-minimum-depth-aka-the-number-of-nodes-along-the-shortest-path-from-the-root-node-to-the-nearest-leaf-node&quot;&gt;5. Given a binary tree, find the minimum depth, aka the number of nodes along the shortest path from the root node to the nearest leaf node.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input:
      1
	2   3
  4       5
        6   7
      8
  Output: 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to level order traversal problem, except we keep track of the minimum
  depth at each level
- Return it immediately once we find the leaf node.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/min_depth_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-given-a-binary-tree-find-the-maximum-depth&quot;&gt;6. Given a binary tree, find the maximum depth.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input:
      1
	2   3
  4       5
        6   7
      8
  Output: 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to minimum depth problem, we will keep traversing for all
  levels, incrementing our maximum depth instead of returning as
  soon as we find a leaf node.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/max_depth_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-given-a-binary-tree-and-a-node-find-the-level-order-successor-of-the-given-node-the-level-order-successor-is-the-node-that-appears-right-after-the-given-node-in-the-level-order-traversal&quot;&gt;7. Given a binary tree and a node, find the level order successor of the given node. The level order successor is the node that appears right after the given node in the level order traversal.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: target=6, tree=
      1
	2   3
  4       5
        6   7
      8
  Output: 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to level order traversal problem, except we will not keep
  track of all the levels.
- Instead, we keep inserting the child node to the queue and return
  the next node as soon as we find the target.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/level_order_successor_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Grokking the Coding Interview's Cyclic Sort</title>
   <link href="/2019/12/22/gtci-cyclic-sort"/>
   <updated>2019-12-22T00:00:00-05:00</updated>
   <id>/2019/12/22/gtci-cyclic-sort</id>
   <content type="html">&lt;h3 id=&quot;1-cyclic-sort&quot;&gt;1. Cyclic sort&lt;/h3&gt;

&lt;p&gt;Given an array containing n objects where each object, when created,
was assigned a unique number from 1 to n based on their creation sequence.
This means that the object with sequence number 3 was created just before
the object with sequence number 4.&lt;/p&gt;

&lt;p&gt;Write a function to sort the objects in-place on their creation sequence
number in O(n) and without any extra space.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{6, 3, 5, 2, 4, 1}
  Output: []int{1, 2, 3, 4, 5, 6}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use the fact that we are given a range of 1-n, can try placing each number at
  its correct index in the array, say 1 at 0, 2 at 1, 3 at 2 and so on.
- Iterate through the array and if the current number is not at the correct index,
  swap it with the number at its correct index.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/cyclic_sort_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-an-array-containing-n-numbers-taken-from-the-range-1-to-n-it-can-have-duplicates-find-all-those-missing-numbers&quot;&gt;2. Given an array containing n numbers taken from the range 1 to n. It can have duplicates. Find all those missing numbers.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{2, 3, 1, 8, 2, 3, 5, 1}
  Output: []int{4, 6, 7}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to missing number problem, can rearrange the array using cyclic
  sort.
- Those that do not have the correct indices are the missing ones.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time and O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/missing_number_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-an-array-containing-n-distinct-numbers-taken-from-the-range-0-to-n-since-the-array-has-only-n-numbers-out-of-the-total-n1-numbers-find-the-missing-number&quot;&gt;3. Given an array containing n distinct numbers taken from the range 0 to n. Since the array has only n numbers out of the total n+1 numbers, find the missing number.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{4, 0, 3, 1}
  Output: 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Sort the array using the cyclic sort first.
- The one that does not have the correct index is the missing one.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/missing_numbers_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-given-an-array-containing-n1-numbers-taken-from-the-range-1-to-n-it-has-only-one-duplicate-number-but-can-be-repeated-over-time-find-that-one&quot;&gt;4. Given an array containing n+1 numbers taken from the range 1 to n. It has only one duplicate number but can be repeated over time. Find that one.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{1, 4, 4, 3, 2}
  Output: 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to missing number problem, can place each number on its correct
  index.
- If while swapping the number with its index both the numbers being swapped
  are same, we have found the duplicate.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/duplicate_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-given-an-array-containing-n-numbers-taken-from-the-range-1-to-n-it-can-have-some-duplicates-find-all-those-numbers&quot;&gt;5. Given an array containing n numbers taken from the range 1 to n. It can have some duplicates. Find all those numbers.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{5, 4, 7, 2, 3, 5, 3}
  Output: []int{3, 5}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to missing number problem, can rearrange the array using cyclic
  sort.
- Those that do not have the correct indices are the duplicate ones.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/duplicates_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-given-an-array-containing-n1-numbers-taken-from-the-range-1-to-n-one-of-the-numbers-got-duplicated-which-also-resulted-in-one-number-going-missing-find-these-numbers&quot;&gt;6. Given an array containing n+1 numbers taken from the range 1 to n. One of the numbers got duplicated which also resulted in one number going missing. Find these numbers.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{3, 1, 2, 5, 2}
  Output: []int{2, 4}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to finding duplicates problem, can place each number on its correct
  index.
- The one is not at its correct index is the duplicate and its index itself
  is the missing number.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/corrupt_pair_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Grokking the Coding Interview's Merge Intervals</title>
   <link href="/2019/12/20/gtci-merge-intervals"/>
   <updated>2019-12-20T00:00:00-05:00</updated>
   <id>/2019/12/20/gtci-merge-intervals</id>
   <content type="html">&lt;h3 id=&quot;1-given-a-list-of-intervals-merge-all-the-overlapping-intervals-to-produce-a-list-that-has-only-mutually-exclusive-intervals&quot;&gt;1. Given a list of intervals, merge all the overlapping intervals to produce a list that has only mutually exclusive intervals.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }
  Output: []interval{ {1, 3}, {4, 5} }
- Input: []interval{ {1, 5}, {2, 3} }
  Output: []interval{ {1, 5} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Sort the list in ascending order so that intervals that might need to be
  merged are next to each other.
- Can merge two intervals together if the first one's end time is greater or
  or equal than the second one's start time.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(nlogn) time, O(n) space.
- Because we sort all intervals first, the runtime is O(nlogn). We create a new
  list of merged interval times, so the space cost is O(n).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/merge_intervals_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-a-list-of-non-overlapping-intervals-sorted-by-their-start-time-insert-a-given-interval-at-the-correct-position-and-merge-all-necessary-intervals-to-produce-a-list-that-has-only-mutually-exclusive-intervals&quot;&gt;2. Given a list of non-overlapping intervals sorted by their start time, insert a given interval at the correct position and merge all necessary intervals to produce a list that has only mutually exclusive intervals.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []interval{ {1, 3}, {5, 7}, {8, 12} }, interval{4, 6}
  Output: []interval{ {1, 3}, {4, 7}, {8, 12} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Since the list is sorted, can skip all the intervals where their end time is
  less than the new interval's start time.
- The merging process is similar to the one in merge interval problem.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/insert_interval_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-two-sorted-lists-of-intervals-find-the-intersection-between-them&quot;&gt;3. Given two sorted lists of intervals, find the intersection between them.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []interval{ {1, 3}, {5, 6}, {7, 9} }, []interval{ {2, 3}, {5, 7} }
  Output: []interval{ {2, 3}, {5, 6}, {7, 7} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Iterate through both list at the same time and check if two intervals
  are overlapping at each step.
- Opposite to the merging process, an overlapped interval has:
  - a bigger start between the two intervals
  - a smaller end between the two intervals
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/intervals_intersection_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-given-a-list-of-intervals-check-if-any-of-them-is-conflicting&quot;&gt;4. Given a list of intervals, check if any of them is conflicting.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []interval{ {1, 2}, {2, 3}, {4, 5} }
  Output: false
- Input: []interval{ {1, 5}, {2, 3} }
  Output: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to merge intervals problem, need to return the true
  immediately if any of them is conflicting.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(nlogn) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/conflict_appointment_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Grokking the Coding Interview's Fast and Slow Pointers</title>
   <link href="/2019/12/18/gtci-fast-slow-pointers"/>
   <updated>2019-12-18T00:00:00-05:00</updated>
   <id>/2019/12/18/gtci-fast-slow-pointers</id>
   <content type="html">&lt;h3 id=&quot;1-given-the-head-of-a-singly-linked-list-write-a-function-to-determine-if-it-contains-a-cycle&quot;&gt;1. Given the head of a singly linked list, write a function to determine if it contains a cycle.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Have a slow pointer move one step at a time while the fast one move
  2 steps at a time.
- If the linked list has a cycle, the fast pointer will catch the slow one.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/linked_list_cycle_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-the-head-of-a-singly-linked-list-write-a-function-to-find-the-starting-node-of-the-cycle&quot;&gt;2. Given the head of a singly linked list, write a function to find the starting node of the cycle.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to finding a cycle in a linked list problem, can also determine
  the start of its cycle and calculate length k of the cycle.
- Have one pointer at the beginning and one at kth node of the linked list.
- Move both of them until they meet at the start.of the cycle.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time and O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/cycle_start_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-write-an-algorithm-to-determine-if-a-number-is-happy&quot;&gt;3. Write an algorithm to determine if a number is happy.&lt;/h3&gt;

&lt;p&gt;Any number will be called a happy number if, after repeatedly replacing
it with a number equal to the sum of the square of all of its digits,
leads us to 1.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: 19
  Output: true
  Explanation:
	  1^2 + 9^2 = 82
	  8^2 + 2^2 = 68
	  6^2 + 8^2 = 100
	  1^2 + 0^2 + 0^2 = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Since the process always end in a cycle, we can use a similar approach to
  finding a cycle in linked list problem.
- Once is cycle is found, check if it is stuck on 1.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/happy_number_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-given-the-head-of-a-singly-linked-list-write-a-function-to-return-the-middle-value&quot;&gt;4. Given the head of a singly linked list, write a function to return the middle value.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Have a slow pointer move one step at a time while the fast one move
  2 steps at a time.
- Once the fast one reaches the end, the slow is in the middle.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/middle_list_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-given-the-head-of-a-singly-linked-list-write-a-function-to-determine-if-it-is-a-palindrome-in-constant-space&quot;&gt;5. Given the head of a singly linked list, write a function to determine if it is a palindrome in constant space.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Find the middle of the linked list and reverse a half list
- After comparing the first half with the reversed half to check if it's
  a palindrome, revert to the half to original form.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/palindrome_list_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-given-the-head-of-a-singly-linked-list-write-a-function-to-reorder-it-such-that-nodes-from-the-second-half-are-inserted-alternately-to-the-nodes-from-the-first-half-in-reverse-order&quot;&gt;6. Given the head of a singly linked list, write a function to reorder it such that nodes from the second half are inserted alternately to the nodes from the first half in reverse order.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to palindrome linked list problem, can also use a trick to
  reverse the second half and rearrange them in the required order
  using fast and slow pointers.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/reorder_list_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Grokking the Coding Interview's Two Pointers</title>
   <link href="/2019/12/16/gtci-two-pointers"/>
   <updated>2019-12-16T00:00:00-05:00</updated>
   <id>/2019/12/16/gtci-two-pointers</id>
   <content type="html">&lt;h3 id=&quot;1-given-an-array-of-sorted-numbers-and-a-target-sum-find-a-pair-in-the-array-whose-sum-is-equal-to-the-given-target&quot;&gt;1. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{1, 2, 6, 8, 16, 26}, target=14
  Output: []int{2, 3}
  Explanation: 6 (index 2) + 8 (index 3) = 14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Have one pointer start at the beginning and one at the end of the array.
- At each step, see if the two pointers add up to the target sum and move
  them toward each other accordingly.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/pair_target_sum_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-an-array-of-sorted-numbers-and-a-target-sum-find-a-pair-in-the-array-whose-sum-is-equal-to-the-given-target&quot;&gt;2. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{1, 2, 6, 8, 16, 26}, target=14
  Output: []int{2, 3}
  Explanation: 6 (index 2) + 8 (index 3) = 14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Have one pointer iterate the array and one placing non-duplicate number.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/remove_duplicates_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-a-sorted-array-create-a-new-array-containing-squares-of-all-the-number-of-the-input-array-in-the-sorted-order&quot;&gt;3. Given a sorted array, create a new array containing squares of all the number of the input array in the sorted order.&lt;/h3&gt;

&lt;p&gt;Assumption:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- The input can have negative numbers.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{-2, -1, 0, 1, 2}
  Output: []int{0, 1, 1, 4, 4}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- The difficult part is to generate the output array with squares in sorted order because we have negative numbers and their squares are positive.
- Have one pointer start at the beginning and one at the end and let them
  move toward each other.
- At each step, whichever bigger will be added to the output array, from
  right to left.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/square_sorted_array_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-given-an-array-containing-0s-1s-and-2s-sort-the-array-in-place&quot;&gt;4. Given an array containing 0s, 1s and 2s, sort the array in-place.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{1, 0, 2, 1, 0}
  Output: []int{0, 0, 1, 1, 2}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Have one pointer start at the beginning and the other at the end
  while iterating through the array.
- We will move all 0s before that start pointer and 2s after the end
  pointer so that all 1s would be between in the end.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/dutch_flag_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Grokking the Coding Interview's Sliding Window</title>
   <link href="/2019/12/15/gtci-sliding-window"/>
   <updated>2019-12-15T00:00:00-05:00</updated>
   <id>/2019/12/15/gtci-sliding-window</id>
   <content type="html">&lt;h3 id=&quot;1-given-an-array-find-the-average-of-all-contiguous-subarrays-of-size-k&quot;&gt;1. Given an array, find the average of all contiguous subarrays of size k.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{1, 3, 2, 6, -1, 4, 1, 8, 2}, k=5
  Output: []int{2.2, 2.8, 2.4, 3.6, 2.8}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- View each contiguous subarray as a sliding window of k elements.
- As we move to the next subarray, slide the window by one element to
  reuse the sum from previous array.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(k) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/avg_subarray_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-an-array-of-positive-numbers-and-a-positive-number-k-find-the-maximum-sum-of-any-contiguous-subarray-of-size-k&quot;&gt;2. Given an array of positive numbers and a positive number k, find the maximum sum of any contiguous subarray of size k.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: int{2, 1, 5, 1, 3, 2}, k=3
  Output: 9
  Explanation: Subarray with maximum sum is [5, 1, 3].
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- View each contiguous subarray as a sliding window of k elements.
- As we move to the next subarray, slide the window by one element to
  reuse the sum from previous array and update the maximum sum.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time and O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/max_subarray_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-an-array-of-positive-numbers-and-a-positive-number-s-find-the-length-of-the-smallest-contiguous-subarray-whose-sum-is-greater-than-or-equal-to-s&quot;&gt;3. Given an array of positive numbers and a positive number s, find the length of the smallest contiguous subarray whose sum is greater than or equal to s.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: array=int{2, 1, 5, 2, 3, 2}, s=7
  Output: 2
  Explanation: Smallest subarray with a sum great than or equal to 7 is [5, 2]
  with length=2.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- The difference between the previous problem and this one is that the size of
  the sliding window is not fixed.
- Can still use the similar strategy to add up elements until their sum is greater
  than equal to s and view them as our sliding window.
- Shrink the window until the window's sum is smaller than s again while keep
  updating the minimum length.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/valid_palindrome_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-given-a-string-find-the-length-of-the-longest-substring-in-it-with-no-more-than-k-distinct-characters&quot;&gt;4. Given a string, find the length of the longest substring in it with no more than k distinct characters.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: string=&quot;araaci&quot;, k=1
  Output: 2
  Explanation: Longest substring with no more than 1 distinct characters is &quot;aa&quot;.
- Input: string=&quot;araaci&quot;, k=2
  Output: 4
  Explanation: Longest substring with no more than 2 distinct characters is &quot;araa&quot;.
- Input: string=&quot;araaci&quot;, k=3
  Output: 5
  Explanation: Longest substring with no more than 3 distinct characters is &quot;araac&quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use a hashmap to remember the frequency of each character we have seen.
- Insert characters until we have k distinct characters in the map to be consider a
  window.
- Shrink the window until there is no more k distinct characters in the map and keep
  updating the maximum window length at each step.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(k) space where k is the number of characters in the map.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/longest_substring_k_distinct_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-given-an-array-of-characters-where-each-character-represents-a-fruit-tree-you-are-given-two-baskets-and-your-goal-is-to-put-maximum-number-of-fruits-in-each-basket&quot;&gt;5. Given an array of characters where each character represents a fruit tree, you are given two baskets and your goal is to put maximum number of fruits in each basket.&lt;/h3&gt;

&lt;p&gt;Constraints:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Each basket can have only one type of fruit.
- You can start with any tree, but once you have started you can’t skip a tree.
  You will pick one fruit from each tree until you cannot, i.e., you will stop
  when you have to pick from a third fruit type.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: fruits=[&quot;apple&quot;, &quot;orange&quot;, &quot;coconut&quot;, &quot;apple&quot;, &quot;coconut&quot;]
  Output: 3
  Explanation: Can put 2 &quot;cocunut&quot; in 1 basket and 1 &quot;apple&quot; in other from
  subarray [&quot;coconut&quot;, &quot;apple&quot;, &quot;coconut&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to &quot;longest substring with k distinct characters&quot; with k=2.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(k) space where k is the number of characters in the map.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/gtci/fruits_baskets_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>LeetCode's Binary tree</title>
   <link href="/2019/12/05/leetcode-binary-tree"/>
   <updated>2019-12-05T00:00:00-05:00</updated>
   <id>/2019/12/05/leetcode-binary-tree</id>
   <content type="html">&lt;h3 id=&quot;1-given-a-binary-tree-determine-if-it-is-a-valid-binary-search-tree&quot;&gt;1. Given a binary tree, determine if it is a valid binary search tree.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Traverse the tree and apply recursion to check at each step if:
  - the current node's value is greater than the lower bound
  - the current node's value is smaller than the upper bound
  - the current node's left child follows
  - the current node's left child follows
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time and O(n) stack space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/valid_bst_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-a-binary-tree-find-its-maximum-depth&quot;&gt;2. Given a binary tree, find its maximum depth.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- The maximum depth of the current node is the greater of the max height of the left
  subtree and the right subtree plus one.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/max_depth_binary_tree_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-a-binary-tree-find-its-minimum-depth&quot;&gt;3. Given a binary tree, find its minimum depth.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to finding maximum depth, the minimum depth of the current node is
  the smaller of the min height of the left subtree and the right subtree plus one.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space where n is the length of a linked list.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/min_depth_binary_tree_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-given-a-binary-tree-determine-if-it-is-height-balanced&quot;&gt;4. Given a binary tree, determine if it is height-balanced.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Calculate max depth for the left subtree and right subtree.
- If either the left subtree or right subtree is unbalanced, return right away.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) stack space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/balanced_binary_tree_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-given-a-binary-tree-find-the-maximum-path-sum&quot;&gt;5. Given a binary tree, find the maximum path sum.&lt;/h3&gt;

&lt;p&gt;Assumption:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- The path might start and end at any node in the tree.
- Assume the tree is non-empty.
- The node can contain negative number.
- The maximum path does not have to go though the root node.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- At each node, the potential maximum path could be one of these cases:
  - max(left subtree) + node
  - max(right subtree) + node
  - max(left subtree) + max(right subtree) + node
  - the node itself
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/binary_tree_max_path_sum_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>LeetCode's Linked List</title>
   <link href="/2019/11/16/leetcode-linked-list"/>
   <updated>2019-11-16T00:00:00-05:00</updated>
   <id>/2019/11/16/leetcode-linked-list</id>
   <content type="html">&lt;h3 id=&quot;1-merge-two-sorted-linked-lists-and-return-it-as-a-new-list&quot;&gt;1. Merge two sorted linked lists and return it as a new list.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: 1 -&amp;gt; 3-&amp;gt; 5 &amp;amp; 2 -&amp;gt; 4-&amp;gt; 6
  Output: 1 -&amp;gt; 2-&amp;gt; 3 -&amp;gt; 4 -&amp;gt; 5 -&amp;gt; 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Traverse both list at the same time, compare their values at each step and
  add the smaller one to a new list.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n|m) time, O(n+m) space where n and m are lengths of these two linked lists.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/merge_sorted_linked_list_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-two-linked-lists-representing-two-non-negative-number-add-them-together-and-return-it-as-a-linked-list&quot;&gt;2. Given two linked lists representing two non-negative number, add them together and return it as a linked list.&lt;/h3&gt;

&lt;p&gt;Assumption:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- The digits are stored in reverse order.
- Each node contains a single digit.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: (1 -&amp;gt; 6 -&amp;gt; 4) + (2 -&amp;gt; 4-&amp;gt; 1)
  Output: (3 -&amp;gt; 0 -&amp;gt; 6)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Traverse both lists and keep track of the sum and carry for each
  digit.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n|m) time, O(m|n) space where m and m are lengths of these two lists.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/add_two_numbers_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-a-linked-list-swap-every-two-adjacent-nodes-and-return-its-head&quot;&gt;3. Given a linked list, swap every two adjacent nodes and return its head.&lt;/h3&gt;

&lt;p&gt;Assumption:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- If the length of the linked list is odd, the last node should not be swapped.
- The solution should use constant space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: 1 -&amp;gt; 3-&amp;gt; 5 -&amp;gt; 2 -&amp;gt; 4-&amp;gt; 6
  Output: 3 -&amp;gt; 1-&amp;gt; 2 -&amp;gt; 5 -&amp;gt; 6 -&amp;gt; 4
- Input: 1 -&amp;gt; 3-&amp;gt; 5 -&amp;gt; 2 -&amp;gt; 4
  Output: 3 -&amp;gt; 1-&amp;gt; 2 -&amp;gt; 5 -&amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Traverse the list and swap the nodes pairwise by adjusting where it's pointing next.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space where n is the length of a linked list.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/swap_nodes_in_pairs_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Michael Nielsen, Augmenting Long-term Memory</title>
   <link href="/2019/10/20/augmenting-long-term-memory"/>
   <updated>2019-10-20T00:00:00-04:00</updated>
   <id>/2019/10/20/augmenting-long-term-memory</id>
   <content type="html">&lt;p&gt;Use a system named Anki to remember almost anything:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It’s like a flashcard app but able to manage the review schedule.
    &lt;ul&gt;
      &lt;li&gt;If you answer a question correctly, the review time expands.&lt;/li&gt;
      &lt;li&gt;The better you master the material, the less frequent it appears&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Memories are maximally strengthened if tested when we’re on the verge of forgetting them&lt;/li&gt;
  &lt;li&gt;Used to learn anything: papers, books, talks, conversations, facts, plans,…&lt;/li&gt;
  &lt;li&gt;Have desktop client for entering new card, mobile client for reviewing&lt;/li&gt;
  &lt;li&gt;Read a research paper in an unfamiliar field - AlphaGo paper
    &lt;ul&gt;
      &lt;li&gt;Read quickly first, come up with questions that
        &lt;ul&gt;
          &lt;li&gt;Identify the most important ideas&lt;/li&gt;
          &lt;li&gt;Look for basics fact that i could understand easily&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Make several passes this way, each time try to get deeper, continue to ask questions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Make better use of Anki
    &lt;ul&gt;
      &lt;li&gt;Make the question more atomic so I could focus on the hard-to-memory details -&amp;gt; asking good questions is very important&lt;/li&gt;
      &lt;li&gt;Construct your own decks instead of using shared ones -&amp;gt; constructing a card forces you to think through the questions and its answer&lt;/li&gt;
      &lt;li&gt;avoid yes/no questions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Procedural vs declarative memory
    &lt;ul&gt;
      &lt;li&gt;procedural (implicit, unconscious, automatic): habits such as walking, talking,…&lt;/li&gt;
      &lt;li&gt;declarative (explicit): know your phone number, a fact,…&lt;/li&gt;
      &lt;li&gt;Basically, there is a difference between remembering a fact and master a process.
        &lt;ul&gt;
          &lt;li&gt;Just because you remember a unix command doesn’t mean you can recognize or apply it in a real-world situation&lt;/li&gt;
          &lt;li&gt;Remembering is not enough. Need to carry out the process. Solve problem with it.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If Anki is so great, why isn’t it widely used?
    &lt;ul&gt;
      &lt;li&gt;People prefer last-minute cramming and believe it produces better results, though many studies show it does not&lt;/li&gt;
      &lt;li&gt;The act if recalling something while we’re on the verge of forgetting is hard, unless one is strongly motivated&lt;/li&gt;
      &lt;li&gt;Anki is challenging to use well, easy to use poorly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The importance of long-term memory
    &lt;ul&gt;
      &lt;li&gt;A study shows that chess grandmaster has higher memory capacity
        &lt;ul&gt;
          &lt;li&gt;Beginner see a series of individual pieces&lt;/li&gt;
          &lt;li&gt;Master see see a “chunk”-combinations of pieces recognized as a unit -&amp;gt; able to reason much easier at a higher level of abstraction (25k-100k)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;A study shows that the better working memory one has, the higher their IQ and vice versa&lt;/li&gt;
      &lt;li&gt;Having more chunks memorized in some domain is somewhat like an effective boost to a person’s IQ in that domain&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Distribute practice - why Anki works?
    &lt;ul&gt;
      &lt;li&gt;Memory decays through time - we will forget things eventually&lt;/li&gt;
      &lt;li&gt;Retest/recall will slow the decay - meaning it takes longer after subsequent recalls&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://augmentingcognition.com/ltm.html&quot;&gt;http://augmentingcognition.com/ltm.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>LeetCode's Math</title>
   <link href="/2019/10/18/leetcode-math"/>
   <updated>2019-10-18T00:00:00-04:00</updated>
   <id>/2019/10/18/leetcode-math</id>
   <content type="html">&lt;h3 id=&quot;1-given-a-64-bit-integer-reverse-its-digits&quot;&gt;1. Given a 64-bit integer, reverse its digits.&lt;/h3&gt;

&lt;p&gt;Assumption:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Negative numbers are also valid.
- Must handle the case where the reversed integer is overflow.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: 123
  Output: 321
- Input: -123
  Output: -321
- Input: 8085774586302733229 Output: 0
  Explanation: The reversed integer 9223372036854775808 overflows by 1 so we return 0.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use modulo by 10 to get a digit at ones' place of the input and
  dividing by 10 to shift it to the right (eliminate the ones' place).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(m) time, O(1) space, where m is log10 of the input.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/reverse_integer_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-a-number-represented-as-an-array-of-digits-plus-one-to-the-number&quot;&gt;2. Given a number represented as an array of digits, plus one to the number.&lt;/h3&gt;

&lt;p&gt;Assumption:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- The input are non-negative.
- The digits are stored such that the most significant digit is at the head of the list.
- The number does not contain leading zeros.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{1, 2, 5}
  Output: []int{1, 2, 6}
- Input: []int{1, 2, 9}
  Output: []int{1, 3, 0}
- Input: []int{1, 9, 9}
  Output: []int{2, 0, 0}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Iterate through the list from right to left and add 1 to the current digit accordingly.
  - If the current digit is less than 9, add 1 and update it.
  - Otherwise, set it to 0.
- If all the digits are 9, append an 0 in the end and update the first digit to 1.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space, where n is the length of the list.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/plus_one_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-determine-whether-an-integer-is-a-palindrome&quot;&gt;3. Determine whether an integer is a palindrome.&lt;/h3&gt;

&lt;p&gt;Assumption:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Do this without extra space.
- Define negative integers as non-palindrome.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: 101
  Output: true
- Input: 106
  Output: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use two-pointer approach where one starts at the first digit and one starts
  at the last digit, have them walk toward the middle and compare them at each
  step.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/palindrome_number_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>LeetCode's Array/String</title>
   <link href="/2019/10/08/leetcode-array-string"/>
   <updated>2019-10-08T00:00:00-04:00</updated>
   <id>/2019/10/08/leetcode-array-string</id>
   <content type="html">&lt;h3 id=&quot;1-given-an-array-of-integers-return-indices-of-the-two-numbers-such-that-they-add-up-to-a-specific-target&quot;&gt;1. Given an array of integers, return indices of the two numbers such that they add up to a specific target.&lt;/h3&gt;

&lt;p&gt;You may assume that each input would have exactly one solution, and you may not use the same element twice.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: nums = []int{2, 5, 4}, target = 6
  Output: [0, 2] since nums[0] + nums[2] = 2 + 4 = 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use a hash map to store the value and its index as we iterate through the
  list.
- Within each iteration, look up the difference of target and the current
  value to see if we have seen that number.
- Simply return two cached indices once that condition meets.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/two_sum_i_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-a-sorted-array-of-integers-return-indices-of-the-two-numbers-such-that-they-add-up-to-a-specific-target&quot;&gt;2. Given a sorted array of integers, return indices of the two numbers such that they add up to a specific target.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: nums = []int{2, 3, 4}, target = 6
  Output: [0, 2] since nums[0] + nums[2] = 2 + 4 = 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Since the array is sorted, can use two-pointer approach that has one point
  to the start of the list while the other point at the end and move the
  toward each other.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time and O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/two_sum_ii_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-a-string-determine-if-it-is-a-palindrome-considering-only-alphanumeric-characters-and-ignoring-cases&quot;&gt;3. Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: &quot;A man, a plan, a canal: Panama&quot;
  Output: true
- Input: &quot;race a car&quot;
  Output: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use two pointers approach that have one point to the start of the string and
  the other point at the end.
- Move them toward each other and compare if they're the same characters while
  skipping non-alphanumeric characters and ignoring cases.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/valid_palindrome_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-implement-strstr-that-finds-the-first-occurrence-of-the-substring-needle-in-the-string-haystack-it-returns--1-if-needle-is-not-part-of-the-haystack&quot;&gt;4. Implement strstr() that finds the first occurrence of the substring needle in the string haystack. It returns -1 if needle is not part of the haystack.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: haystack = &quot;aaabacd&quot;, needle = &quot;ba&quot;
  Output: 3, because needle &quot;ba&quot; starts at index 3 in the haystack.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Scan the needle with the haystack from its first position and start matching
  all subsequent letters one by one.
- If one letter does not match, start again with the next position in the
  haystack.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(nm) time, O(1) space, where n is the length of haystack while m is the
  length of needle.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/strstr_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-given-a-string-reverse-it-word-by-word&quot;&gt;5. Given a string, reverse it word by word.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: &quot;hard so be to have not does interview coding&quot;
  Output: &quot;coding interview does not have to be so hard&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Approach with a two-pass solution.
- The first pass is to split the string into an array of words separated by
  spaces.
- The second pass is to reverse the order of words in the array by using
  two-pointer approach: swap two values on both ends as we move toward the
  middle.
- Concatenate the values of ordered array to create a final string.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/reverse_words_string_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-given-a-string-find-the-length-of-the-longest-substring-without-repeating-characters&quot;&gt;6. Given a string, find the length of the longest substring without repeating characters.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: &quot;abcabcbb&quot;
  Output: 3
  Explanation: The longest substring is &quot;abc&quot; with the length of 3.
- Input: &quot;bbbbb&quot;
  Output: 1
  Explanation: The longest substring is &quot;b&quot; with the length of 1.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Iterate through the string and keep track of the maximum length of non-repeating
  characters using a hashmap that maps characters to their indices.
- Could skip characters immediately if we found a repeating character.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(m) cost where m &amp;lt; n and  n is the length of the string.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/longest_substring_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-given-a-sorted-integer-array-where-the-range-of-elements-are-0-99-inclusive-return-its-missing-ranges&quot;&gt;7. Given a sorted integer array where the range of elements are [0, 99] inclusive, return its missing ranges.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{0, 1, 6, 16, 66, 99}
  Output: []string{&quot;2-5&quot;, &quot;7-15&quot;, &quot;17-65&quot;, &quot;67-98&quot;}
- Input: []int{6, 16, 66}
  Output: []string{&quot;0-5&quot;, &quot;7-15&quot;, &quot;17-65&quot;, &quot;67-99&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Keep two pointers where one is ahead of the other by 1 index.
- Iterate through the list, calculate the difference of two consecutive numbers
  in the list at each step and append it to a new list.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(m) space, where m &amp;lt; n and n is the size of the input.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/missing_ranges_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;8-given-two-strings-determine-if-they-are-both-one-edit-distance-apart&quot;&gt;8. Given two strings, determine if they are both one edit distance apart.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: &quot;abcde&quot;, &quot;abXde&quot;
  Output: true
  Explanation: Only &quot;c&quot; in S is replaced by &quot;X&quot; in T.
- Input: &quot;abcde&quot;, &quot;abcXde&quot;
  Output: true
  Explanation: &quot;X&quot; is inserted between &quot;c&quot; and &quot;d&quot; in S to get T.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use two-pointer approach to traverse both strings at the same time and
  keep track of count of difference characters.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/leetcode/one_edit_distance_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Interview Cake's Linked Lists</title>
   <link href="/2019/10/01/interviewcake-linked-list"/>
   <updated>2019-10-01T00:00:00-04:00</updated>
   <id>/2019/10/01/interviewcake-linked-list</id>
   <content type="html">&lt;h3 id=&quot;1-delete-a-node-from-a-singly-linked-list-given-only-a-pointer-to-that-node&quot;&gt;1. Delete a node from a singly-linked list, given only a pointer to that node.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Since we don't have access to the previous node, simply copy the value and
  pointer of the next node and copy them into the current node.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(1) time and O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/delete_node_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-determine-if-a-singly-linked-list-has-a-cycle&quot;&gt;2. Determine if a singly-linked list has a cycle.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Keep two pointers starting at the first node such that: every time one moves
  one node ahead, the other moves 2 nodes ahead.
- If the linked list has a cycle, the faster one will catch up with the slow
  one. Otherwise, the faster one will each the end.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time and O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/linked_list_cycle_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-reverse-a-linked-list-in-place&quot;&gt;3. Reverse a linked list in-place.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Iterate through the list and point each node's next pointer to the previous item.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/reverse_linked_list_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-find-the-kth-to-last-node-in-a-linked-list&quot;&gt;4. Find the kth to last node in a linked list.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: list = 1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 -&amp;gt; 5 -&amp;gt; 6, k = 2
  Output: 5, because 5 is the 2nd to the last node (6)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use two pointers such that one starts at the beginning and the other one
  starts at k distance apart.
- Walk both at the same speed toward the end.
- When one hits the tail, the other one is on the target node.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/kth_to_last_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>7 sorting algorithms</title>
   <link href="/2019/09/24/7-sorting-algorithms"/>
   <updated>2019-09-24T00:00:00-04:00</updated>
   <id>/2019/09/24/7-sorting-algorithms</id>
   <content type="html">&lt;p&gt;Here are 7 sorting algorithms implementations in Go that we are going to cover in this post:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Bubble Sort&lt;/li&gt;
  &lt;li&gt;Selection Sort&lt;/li&gt;
  &lt;li&gt;Insertion Sort&lt;/li&gt;
  &lt;li&gt;Merge Sort&lt;/li&gt;
  &lt;li&gt;Quicksort&lt;/li&gt;
  &lt;li&gt;Heapsort&lt;/li&gt;
  &lt;li&gt;Counting Sort&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;bubble-sort&quot;&gt;Bubble Sort&lt;/h2&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Repeatedly swap the adjacent elements if they are in the wrong order in the
array, one item at a time.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;O(n^2) time and O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// for each element in the list, check it with almost every other element.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// since the last i element is already in place, only iterate through&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// the item before the last one.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;// swap the adjacent elements if they are not in ascending order.&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;selection-sort&quot;&gt;Selection Sort&lt;/h2&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Repeatedly select the next smallest element from the unsorted array and move it
to the front.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;O(n^2) time and O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectionSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;minIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;minIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// find the minimum in the rest of the array.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;minIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c&quot;&gt;// swap the minimum value with the first value.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;insertion-sort&quot;&gt;Insertion Sort&lt;/h2&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Insert elements from an unsorted array into a sorted subsection of the
array, one item at a time.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;O(n^2) time and O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insertionSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// iterate through the list from position 1.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// shift each one to the left by swapping it with the one before until&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// it's in the right spot.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;merge-sort&quot;&gt;Merge Sort&lt;/h2&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Split the input in half, recursively sorts each half, then merge the
sorted halves back together.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;O(nlogn) time and O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// base case&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// split the input in half.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;middleIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;middleIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;middleIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// sort each half.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;leftSorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;rightSorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// merge the sorted halves.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeSortedArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftSorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rightSorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeSortedArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// keep two &quot;pointer&quot; at index 0 and move up accordingly as one get&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// merged in.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// if we get here, one array must have bigger size than the other. could&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// figure out which one is it then copy the rest of its to our final one.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;quicksort&quot;&gt;Quicksort&lt;/h2&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Recursively divide the input into two smaller arrays around a pivot, where
one half has items smaller than the pivot, other half has items bigger than
the pivot.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;O(nlogn) time and O(nlogn) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quicksort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// pi is the pivot/partition index.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;c&quot;&gt;// sort the items before and after partition.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;quicksort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;quicksort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// keep going until we find something on the left that belongs to the&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// right.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c&quot;&gt;// keep going until we find something on the right that belongs to the&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// left.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c&quot;&gt;// by swapping the item at left and right index, we move the item that&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// is smaller than the pivot to the left half and vice versa.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;// once the partition is finished, move the pivot back to its final&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;// position by swapping the item at left and end index.&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;heapsort&quot;&gt;Heapsort&lt;/h2&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Similar to selection sort, repeatedly choose the largest item and move it to
the end of the array using a max heap.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;O(nlogn) time and O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapsort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;heapify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// repeatedly remove the largest item.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removeLargest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;c&quot;&gt;// update the heap size.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;

		&lt;span class=&quot;c&quot;&gt;// store the removed value at the end of the list.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// heapify transform the input into a max heap.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;bubbleDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// bubbleDown allow larger values to reach the top.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapSize&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// fast-calculate the children left and right index.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;

		&lt;span class=&quot;c&quot;&gt;// stop if there is no child node.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c&quot;&gt;// find the larger index&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;larger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;larger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c&quot;&gt;// if the current item is larger than both children, we're done.&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// if not, swap with the larger child.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;larger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;larger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// removeLargest remove and return the largest item from the heap.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removeLargest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapSize&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// largest item is at the top of our max heap.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// move the last item into the root position.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heapSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// bubble down from the root to restore the heap.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bubbleDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;counting-sort&quot;&gt;Counting Sort&lt;/h2&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Iterate through the input, count the number of times each item occurs, use
these counts to compute each item's index in the final sorted array.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;O(n) time and O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Solution:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countingSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// utilize max value to create a fix-sized list of item counts.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// populate the array where its indices represent items themselves and&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// its values represent how many time the item appears.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// iterate through the counts and add the item to the output list.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Interview Cake's Queues and Stacks</title>
   <link href="/2019/09/17/interviewcake-queue-stack"/>
   <updated>2019-09-17T00:00:00-04:00</updated>
   <id>/2019/09/17/interviewcake-queue-stack</id>
   <content type="html">&lt;h3 id=&quot;1-implement-a-stack-with-a-method-getmax-that-returns-the-largest-element-in-the-stack-in-o1-time&quot;&gt;1. Implement a stack with a method getMax() that returns the largest element in the stack in O(1) time.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- We use two stack implementation themselves: one holds all the items and the
  other holds all the maximum values after each push() and pop().
- That way, we could keep track of your maximum value up to date in constant
  time.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(1) time, O(m) space where m is the number of operations performed on the
  stack.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/largest_stack_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-implement-a-queue-with-2-stacks&quot;&gt;2. Implement a queue with 2 stacks.&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use one stack for enqueuing item and the other to reverse the order them for
  dequeuing/popping item.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(1) time, O(m) space m is the number of operations.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/queue_two_stacks_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-a-sentence-as-string-and-the-position-of-an-opening-parenthesis-position-find-the-matching-closing-one-position&quot;&gt;3. Given a sentence as string, and the position of an opening parenthesis position, find the matching closing one position.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: &quot;I ((like) (nesting) parenthesis)&quot;, opening parenthesis position = 2
  Output: 31, because the matching parenthesis of the one in position 2 is at
  index 31.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Iterate through the string and keep a count of matching parenthesis at each
  step.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/parenthesis_matching_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-given-a-string-determine-if-its-brackets-are-properly-nested&quot;&gt;4. Given a string, determine if its brackets are properly nested.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: &quot;{[]()}&quot;
  Output: true
- Input: &quot;{[(])}&quot;
  Output: false
- Input: &quot;{[}&quot;
  Output: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use a stack to keep track of matching parenthesis as we iterate
  through the string.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time and O(n) space, where n is the number of operations.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/bracket_validator_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Interview Cake's Trees and Graphs</title>
   <link href="/2019/08/31/interviewcake-tree-graph"/>
   <updated>2019-08-31T00:00:00-04:00</updated>
   <id>/2019/08/31/interviewcake-tree-graph</id>
   <content type="html">&lt;h3 id=&quot;1-given-a-binary-tree-determine-if-it-is-superbalanced---the-difference-between-the-depths-of-any-two-leaf-nodes-is-no-greater-than-1&quot;&gt;1. Given a binary tree, determine if it is “superbalanced” - the difference between the depths of any two leaf nodes is no greater than 1.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input:
         1
      2     3
    4   5      7
          6  8   9
                   10
  Output: false
  Even though this tree is balanced by definition, it is not &quot;superbalanced&quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use a depth-first walk through the tree and keep track of the depth as we
  go.
- Every time we found a leaf with a new depth, there are two ways that the
  tree could be unbalanced:
   - There are more than 2 different leaf depths.
   - There are exactly 2 depths but they are more than 1 apart.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
- The worst case is that we have to iterate all nodes in the tree so the time
  complexity is O(n). For space complexity, we have to keep track of the all
  the nodes at every depth. Hence, it is O(n).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/balanced_binary_tree_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-a-binary-tree-determine-if-it-is-a-binary-search-tree&quot;&gt;2. Given a binary tree, determine if it is a binary search tree.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input:
          5
      3       8
    2   4   7   9
  1               11
  Output: true, because for each node, its value is greater than all values in
  the left subtree and less than all values in the right one.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use a depth-first walk through the tree and validate each node as we go.
- If a node appears in the left subtree, it must be less than its ancestor and
  vice versa.
- Instead of keeping track of every ancestor to check the inequalities, just
  need to check the largest number it must be greater than and the smallest one
  it must be less than, aka lower bound and upper bound.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
- The worst case is that we have to iterate all nodes in the tree so the time
  complexity is O(n). For space complexity, we have to keep track of the lower
  bound and upper bound as we traverse the tree via a stack. Hence, the worst
  case is O(n).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/binary_search_tree_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-a-binary-search-tree-find-the-2nd-largest-item&quot;&gt;3. Given a binary search tree, find the 2nd largest item.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input:
          5
      3       8
    2   4   7   9
  1               11
  Output: 9
- Input:
           5
      3        8
    2   4   7     16
                11
              9   12
  Output: 12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- The largest item in a binary search tree is the rightmost item. Can
  simply traverse down the tree recursively to find one.
- The 2nd largest item could be the parent of the largest but it's not
  necessary since the largest could have a left subtree and there might exist
  one there.
- Still, the second largest one when the largest has a left subtree is basically
  the largest one in that left subtree.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(h) time, O(1) space, where h is the height of the tree.
- If the tree is balanced, the time complexity is (Olgn). Otherwise, it's O(n).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/2nd_largest_item_bst_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-given-an-undirected-graph-with-maximum-degree-d-find-a-graph-coloring-using-at-most-d--1-colors-assume-that-there-is-no-node-with-a-loop&quot;&gt;4. Given an undirected graph, with maximum degree d, find a graph coloring using at most d + 1 colors. Assume that there is no node with a loop.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- For a graph with degree 3, we could use at most 4 colors.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use a greedy approach to iterate over the graph and assign each node the
  first non-taken color that we found.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(m) time and O(d) space, where m is sum of all the nodes and edges, d is
  the number of all colors.
- Even though it seems like we have an outer and inner loop, we carefully walk
  through the graph one node at a time and stop checking for colors as soon as
  we found one that is non-taken.
- About the space complexity, it makes sense that we have to store all
  available colors in the worst case. Hence it takes up O(d) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/graph_coloring_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Interview Cake's Greedy algorithms</title>
   <link href="/2019/08/24/interviewcake-greedy-algorithms"/>
   <updated>2019-08-24T00:00:00-04:00</updated>
   <id>/2019/08/24/interviewcake-greedy-algorithms</id>
   <content type="html">&lt;h3 id=&quot;1-given-a-list-of-stock-prices-integer-in-chronological-order-return-the-max-profit-from-buying-at-earlier-time-and-selling-at-later-time&quot;&gt;1. Given a list of stock prices (integer) in chronological order, return the max profit from buying at earlier time and selling at later time.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{10, 7, 5, 8, 11, 9}
  Output: 6, because one can buy at 5 and sell at 11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use a greedy approach to keep track of the minimum price and the maximum
  profit for each value while iterating through the list.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/apple_stocks_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-a-list-of-integers-return-the-highest-product-of-three-numbers&quot;&gt;2. Given a list of integers, return the highest product of three numbers.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{-10, -10, 1, 3, 2}
  Output: 300, because -10.-10.3 gives the highest product
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use a greedy approach to keep track of the current highest, current lowest,
  highest of three, highest of two and lowest of two for every value as we
  iterate through the list.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/highest_product_of_three_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-a-list-of-integers-return-a-corresponding-list-where-every-index-holds-the-product-of-every-other-values-except-the-value-in-that-index-and-you-cant-use-division&quot;&gt;3. Given a list of integers, return a corresponding list where every index holds the product of every other values except the value in that index. And, you can’t use division!&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{1, 7, 3, 4}
  Output: []int{84, 12, 28, 21}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Iterate through the list and at each step, calculate the product of all
  the integers before each index and the product of all the integers after
  each index.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/product_of_others_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-given-a-list-of-integers-shuffle-its-location-in-place&quot;&gt;4. Given a list of integers, shuffle its location in-place.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{1, 2, 3, 4, 5}
  Output: []int{2, 1, 4, 3, 5}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Iterate through the list, swap current value with a value in a randomized
  index that is between the current and last index.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/inplace_shuffle_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Interview Cake's Hashing problems</title>
   <link href="/2019/08/23/interview-cake-hashing-problems"/>
   <updated>2019-08-23T00:00:00-04:00</updated>
   <id>/2019/08/23/interview-cake-hashing-problems</id>
   <content type="html">&lt;h3 id=&quot;1-given-a-list-of-movie-lengths-and-a-total-flight-length-determine-if-there-exist-two-movies-that-add-up-to-the-total-length&quot;&gt;1. Given a list of movie lengths and a total flight length, determine if there exist two movies that add up to the total length.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: list=[]int{2, 3, 4}, length=6
  Output: true, because there exists 2 and 4 that add up to 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Could use hashmap to keep track of movie lengths that we've seen so far and
  look it up as we iterate through the list.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/inflight_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-a-string-check-if-its-permutation-is-a-palindrome&quot;&gt;2. Given a string, check if its permutation is a palindrome.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: &quot;ivicc&quot;
  Output: true
- Input: &quot;civic&quot;
  Output: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- To determine if a permutation is a palindrome, need to check if each
  character in the string appears an even number of times, allowing for
  only one character to appear an odd time, that is the middle one.
- Could use a hashmap store the characters and their number of occurrences.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/permutation_palindrome_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-a-sentence-string-return-its-word-count-map&quot;&gt;3. Given a sentence (string), return its word count map.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: &quot;Cliff finished his cake and paid the bill. Bill finished his cake at the edge of the cliff.&quot;
  Output: map[string]int{&quot;cliff&quot;: 1, &quot;Cliff&quot;: 1, &quot;finished&quot;: 2, &quot;his&quot;: 2, &quot;cake&quot;: 2, &quot;and&quot;: 1, &quot;paid&quot;: 1, &quot;the&quot;: 3, &quot;bill&quot;: 1, &quot;Bill&quot;: 1, &quot;at&quot;: 1, &quot;edge&quot;: 1, &quot;of&quot;: 1}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- First get rid of special characters, then use a hashmap to keep counts of words
  as we iterate through the string.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/word_cloud_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-given-an-unsorted-list-scores-integer-and-a-highest-possible-score-integer-return-a-sorted-list-utilizing-that-fact&quot;&gt;4. Given an unsorted list scores (integer) and a highest possible score (integer), return a sorted list utilizing that fact.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{37, 89, 41, 65, 91, 53}, 100
  Output: []int{91, 89, 65, 53, 41, 37}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Utilize the highest score to allocate a fix-sized list ahead of time where
  where its indices represent the scores themselves and its values represent
  how many time these scores appear in the list.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(n) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/top_scores_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Ramit Sethi, I Will Teach You to Be Rich</title>
   <link href="/2019/08/23/i-will-teach-you-to-be-rich"/>
   <updated>2019-08-23T00:00:00-04:00</updated>
   <id>/2019/08/23/i-will-teach-you-to-be-rich</id>
   <content type="html">&lt;p&gt;How to earn more, save more and live a rich life:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When it comes to weight loss, the keys are: eat less and exercise more. But instead of focusing on these 2 fundamental things, we discuss trans fat, supplements,… -&amp;gt; same with personal finance.&lt;/li&gt;
  &lt;li&gt;There are some key points. No need to be expert to be rich.
    &lt;ul&gt;
      &lt;li&gt;Cut costs&lt;/li&gt;
      &lt;li&gt;Earn more&lt;/li&gt;
      &lt;li&gt;Optimize your existing spending&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Define your rich life standard. What does being rich mean to YOU? It’s different for everyone because we value things differently&lt;/li&gt;
  &lt;li&gt;Spend more on the things you care about.
    &lt;ul&gt;
      &lt;li&gt;Instead of driving an expensive cars or living in a penthouse, can use money to invest in different hobbies such as making movies, opening restaurants, universities…&lt;/li&gt;
      &lt;li&gt;Travelling and experiencing different cultures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Credit cards are worth having as long as you manage them well
    &lt;ul&gt;
      &lt;li&gt;Completely pay off your bill at the end of the money - own nothing, no interests - like free short-term loan but better because of perks and rewards&lt;/li&gt;
      &lt;li&gt;Large purchases are almost made by credits. If you have a good credit score, the interest rates is low, u saves a lot of money&lt;/li&gt;
      &lt;li&gt;Increase the credit line every 6-12 months&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Open a high-interest saving bank account and set up automatic transaction&lt;/li&gt;
  &lt;li&gt;Saving is not enough. Need to make money works for you.&lt;/li&gt;
  &lt;li&gt;Invest early.
    &lt;ul&gt;
      &lt;li&gt;Think about the big picture.&lt;/li&gt;
      &lt;li&gt;Compound interests are huge in the long run.&lt;/li&gt;
      &lt;li&gt;“Compounding is mankind’s greatest invention because it allows for the reliable, systematic accumulation of wealth.” - Albert Einstein&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Investment isn’t about being sexy - picking stocks. It’s about making money.&lt;/li&gt;
  &lt;li&gt;Everyday you don’t invest, you actually lose money due to inflation. You will not realize this until you are old -&amp;gt; think long-term. Start invest early.
    &lt;ul&gt;
      &lt;li&gt;Take full advantage of 401k by contributing enough to get 100% of the match - this is free money&lt;/li&gt;
      &lt;li&gt;Contribute as much as possible to Roth IRA (check current limits)&lt;/li&gt;
      &lt;li&gt;if there’s money left over, keep contributing to 401k (check current limits)&lt;/li&gt;
      &lt;li&gt;Health saving account (HSA)&lt;/li&gt;
      &lt;li&gt;Non-retirement investment account&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;401k vs Roth IRA
    &lt;ul&gt;
      &lt;li&gt;401k
        &lt;ul&gt;
          &lt;li&gt;Pros
            &lt;ul&gt;
              &lt;li&gt;Money is not taxed until you withdraw years later. Have more for compound grow.&lt;/li&gt;
              &lt;li&gt;Employer match - free money&lt;/li&gt;
              &lt;li&gt;Make 60k, contribute 3k, match 5% -&amp;gt; 6k, start at age 25, earn 8%, earn 1.6 mil when you retire&lt;/li&gt;
              &lt;li&gt;automatic - don’t have to care about it&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Cons
            &lt;ul&gt;
              &lt;li&gt;Cause it’s a retirement account. Withdrawing before results in 10% penalty -&amp;gt; brutal&lt;/li&gt;
              &lt;li&gt;Have to pay taxes afterward!&lt;/li&gt;
              &lt;li&gt;Burden when switching job&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Roth IRA - pay taxes on the amounts you contribute&lt;/li&gt;
      &lt;li&gt;Conclusion
        &lt;ul&gt;
          &lt;li&gt;Both of them are for long-term investment&lt;/li&gt;
          &lt;li&gt;It’s kind of lock-in because it’s your retirement money but
            &lt;ul&gt;
              &lt;li&gt;You can withdraw your money u contribute penalty free&lt;/li&gt;
              &lt;li&gt;Access your money in certain cases - hardship distribution&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Conscious spending
    &lt;ul&gt;
      &lt;li&gt;Decide what’s important and what not&lt;/li&gt;
      &lt;li&gt;Spend extravagantly on these you value, ruthlessly cut down the cost for everything else
        &lt;ul&gt;
          &lt;li&gt;Rather spending money on expensive car and big houses, spend them on experiences with friends and people I love&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;4 major buckets:
        &lt;ul&gt;
          &lt;li&gt;Fixed costs (50-60%): rent, utilities, cell phones, medical insurance, car payment, public transportation, groceries, clothes, internet/cable&lt;/li&gt;
          &lt;li&gt;Investment (10%): 401k, Roth IRA&lt;/li&gt;
          &lt;li&gt;Savings (5-10%): house down payment, vacations, gifts, emergency&lt;/li&gt;
          &lt;li&gt;Guilt-free spending money (20 - 35%): dining out, drinking, movies, clothes, shoes&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Negotiate a raise
    &lt;ul&gt;
      &lt;li&gt;Getting a raise is not about you - nobody cares if your expenses are higher. It’s about demonstrating your value&lt;/li&gt;
      &lt;li&gt;3-6 months before your review: become top performer, exceed every expectations&lt;/li&gt;
      &lt;li&gt;1-2 months before: prepare evidences&lt;/li&gt;
      &lt;li&gt;1-2 weeks before: practice the conversations&lt;/li&gt;
      &lt;li&gt;It’s important that u regularly communicate your process - update every week or two&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Investing
    &lt;ul&gt;
      &lt;li&gt;Rich people tend to become more conservative when it comes to investing because 2-3% of millions is a lot already!&lt;/li&gt;
      &lt;li&gt;Stocks has highest risk, brings the best return - 11.5% on average&lt;/li&gt;
      &lt;li&gt;Bond has lower risk, 5.2%&lt;/li&gt;
      &lt;li&gt;Cash/saving account is the safest, 2-4%&lt;/li&gt;
      &lt;li&gt;The rule of thumb is that: when you’re young, invest aggressively on stocks and bonds&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.iwillteachyoutoberich.com/book/&quot;&gt;https://www.iwillteachyoutoberich.com/book/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Interview Cake's Array and string manipulation</title>
   <link href="/2019/08/21/interviewcake-array-string-manipulation"/>
   <updated>2019-08-21T00:00:00-04:00</updated>
   <id>/2019/08/21/interviewcake-array-string-manipulation</id>
   <content type="html">&lt;h3 id=&quot;1-given-a-list-of-unsorted-independent-meetings-returns-a-list-of-a-merged-one&quot;&gt;1. Given a list of unsorted, independent meetings, returns a list of a merged one.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []meeting{ {1, 2}, {2, 3}, {4, 5} }
  Output: []meeting{ {1, 3}, {4, 5} }
- Input: []meeting{ {1, 5}, {2, 3} }
  Output: []meeting{ {1, 5} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Sort the list in ascending order so that meetings that might need to be
  merged are next to each other.
- Can merge two meetings together if the first one's end time is greater or
  or equal than the second one's start time.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(nlogn) time, O(n) space.
- Because we sort all meeting first, the runtime is O(nlogn). We create a new
  list of merged meeting times, so the space cost is O(n).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/merge_meetings_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-given-a-list-of-string-reverse-its-order&quot;&gt;2. Given a list of string, reverse its order.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []string{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;}
  Output: []string{&quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Use two pointers approach to swap two values on both ends as we move toward
  the middle.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/reverse_string_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-given-a-list-of-string-that-is-made-up-of-word-but-in-reverse-return-the-correct-order-in-place&quot;&gt;3. Given a list of string that is made up of word but in reverse, return the correct order in-place.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []string{&quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;, &quot;&quot;, &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot;&quot;, &quot;s&quot;, &quot;a&quot;, &quot;y&quot;}
  Output: []string{&quot;s&quot;, &quot;a&quot;, &quot;y&quot;, &quot;&quot;, &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;, &quot;&quot;, &quot;w&quot;, &quot;o&quot;, &quot;r&quot;, &quot;l&quot;, &quot;d&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Similar to reversing string, use the same idea to reverse all the characters
  in the list first so that we could have a list of words in the right order, not
  its characters.
- Iterate through the list again and reverse its characters.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/reverse_word_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-merge-two-sorted-arrays&quot;&gt;4. Merge two sorted arrays.&lt;/h3&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Input: []int{1, 3, 5}, []int{2, 4, 6}
  Output: []int{1, 2, 3, 4, 5, 6}
- Input: []int{1, 3, 5}, []int{2, 4, 6, 7}
  Output: []int{1, 2, 3, 4, 5, 6, 7}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Approach:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Since these arrays are sorted, can use two pointers approach to iterate
  through both of them and append the smaller value to a new merged list at
  each step.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cost:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- O(n) time, O(1) space.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hoanhan101/algo/blob/master/interviewcake/merge_sorted_arrays_test.go&quot;&gt;Link to solution →&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more coding problems, please visit
  &lt;a href=&quot;https://github.com/hoanhan101/algo&quot;&gt;https://github.com/hoanhan101/algo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re interested in getting updates for such content like these, consider
  joining my &lt;a href=&quot;https://tinyletter.com/hoanhan&quot;&gt;mailing list here →&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Josh Pigford, Baremetrics, $70k/month</title>
   <link href="/2019/06/14/baremetrics"/>
   <updated>2019-06-14T00:00:00-04:00</updated>
   <id>/2019/06/14/baremetrics</id>
   <content type="html">&lt;h3 id=&quot;what-is-the-product&quot;&gt;What is the product?&lt;/h3&gt;

&lt;p&gt;Subscription analytics and insights.&lt;/p&gt;

&lt;h3 id=&quot;what-is-its-current-revenue&quot;&gt;What is its current revenue?&lt;/h3&gt;

&lt;p&gt;$14k/month after 6 months, $70K/month in 2017, $120k/month now.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-business-model&quot;&gt;What is the business model?&lt;/h3&gt;

&lt;p&gt;Subscription.&lt;/p&gt;

&lt;h3 id=&quot;how-did-the-founder-come-up-with-their-idea&quot;&gt;How did the founder come up with their idea?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Was running 2 other SaaS products in the survey space and needed these
numbers himself: monthly recurring revenue, lifetime value, churn,… There
was no anything great that existed then.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-know-it-was-the-right-one&quot;&gt;How did they know it was the right one?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Realized that there was a pretty big need from talking to other SaaS friends.&lt;/li&gt;
  &lt;li&gt;Launched the first version in November 2013 and it was clear by February that
there was a much larger opportunity. Focused 100% on it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-did-it-take-to-get-the-initial-product-out-the-door&quot;&gt;What did it take to get the initial product out the door?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Vanilla Rails app, hosted on Heroku, just one big monolithic app.&lt;/li&gt;
  &lt;li&gt;Later spent a lot of money running background jobs so that he did not have to
spend time on infrastructure!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-get-their-first-paying-customers&quot;&gt;How did they get their first paying customers?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Used Twitter connections to push for it, though he only had than 1k followers
then.&lt;/li&gt;
  &lt;li&gt;Start reaching out to random people he knew and they shared it.&lt;/li&gt;
  &lt;li&gt;Sold to a $250/month customer in 8 days.&lt;/li&gt;
  &lt;li&gt;Advised to have someone start using the product right away and try to have them
pay for it, instead of getting stuck in the testing phase (building email list,
building a landing page,…)&lt;/li&gt;
  &lt;li&gt;Later wrote useful, educational content on the blog.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.indiehackers.com/podcast/006-josh-pigford-of-baremetrics&quot;&gt;Launching Your Product and Finding Customers Immediately with Josh Pigford of Baremetrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Garrett Dimon, Sifter</title>
   <link href="/2019/06/13/sifter"/>
   <updated>2019-06-13T00:00:00-04:00</updated>
   <id>/2019/06/13/sifter</id>
   <content type="html">&lt;h3 id=&quot;what-is-the-product&quot;&gt;What is the product?&lt;/h3&gt;

&lt;p&gt;Bug tracker for small teams and non-technical people.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-business-model&quot;&gt;What is the business model?&lt;/h3&gt;

&lt;p&gt;Subscription.&lt;/p&gt;

&lt;h3 id=&quot;how-did-the-founder-come-up-with-their-idea&quot;&gt;How did the founder come up with their idea?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Was doing a lot of consulting work and found one of his biggest
struggles was getting his non-technical clients to participate with
the issue tracking, especially with small teams.&lt;/li&gt;
  &lt;li&gt;After sharing the ideas around, peopled started expressing interests and
encouraged him to do something like that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-know-it-was-the-right-one&quot;&gt;How did they know it was the right one?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;It was clear that people showed interests in the beginning and wanted to use
something like that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-did-it-take-to-get-the-initial-product-out-the-door&quot;&gt;What did it take to get the initial product out the door?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Had a simple Rails MySQL setup, built a billing system himself because Stripe
was not there yet and Braintree was not so good. Took 11 months in total.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-get-their-first-paying-customers&quot;&gt;How did they get their first paying customers?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;People expressed interests and came to him in the first place.&lt;/li&gt;
  &lt;li&gt;He kept blogging and sharing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.indiehackers.com/podcast/004-garrett-dimon-of-sifter&quot;&gt;Succeeding in a Crowded Market by Building a Niche Business with Garrett
Dimon of Sifter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Chris Chen, Instapainting, $32k/month</title>
   <link href="/2019/06/12/instapainting"/>
   <updated>2019-06-12T00:00:00-04:00</updated>
   <id>/2019/06/12/instapainting</id>
   <content type="html">&lt;h3 id=&quot;what-is-the-product&quot;&gt;What is the product?&lt;/h3&gt;

&lt;p&gt;Custom painting by actual artists, delivered to your shipping address.&lt;/p&gt;

&lt;h3 id=&quot;what-is-its-current-revenue&quot;&gt;What is its current revenue?&lt;/h3&gt;

&lt;p&gt;$32k a month.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-business-model&quot;&gt;What is the business model?&lt;/h3&gt;

&lt;p&gt;Direct sale.&lt;/p&gt;

&lt;h3 id=&quot;how-did-the-founder-come-up-with-their-idea&quot;&gt;How did the founder come up with their idea?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Raised money from YC after YC, spent about 2 years pivoting and trying
different ideas. Focused on how to generate revenue immediately because he
was running low on cash.&lt;/li&gt;
  &lt;li&gt;Saw several sites were doing the same things but with oil paintings.
Introduced a more modern, cheaper, mixed media product.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-know-it-was-the-right-one&quot;&gt;How did they know it was the right one?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;It generated revenue immediately after trying to sell on r/startups
subreddit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-did-it-take-to-get-the-initial-product-out-the-door&quot;&gt;What did it take to get the initial product out the door?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Found one supplier that could do the work.&lt;/li&gt;
  &lt;li&gt;The very first artists were his roommates.&lt;/li&gt;
  &lt;li&gt;Had a basic interface for artist to check the order and manually brokered and
managed transaction. Had to email back and forth because there was no
messaging system in place yet.&lt;/li&gt;
  &lt;li&gt;Barely managed to ship on time so even had to do the painting himself.&lt;/li&gt;
  &lt;li&gt;Replied to email in timely fashion. Took great care of customers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-get-their-first-paying-customers&quot;&gt;How did they get their first paying customers?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Tried to sell on r/startups subreddit, targeting gifts around New Year time.&lt;/li&gt;
  &lt;li&gt;3 months later got a TechCrunch article, then Hacker News.&lt;/li&gt;
  &lt;li&gt;Optimized for SEO.&lt;/li&gt;
  &lt;li&gt;Did some cool content marketing strategies such as: making a robot to
replicate artist’s painting, making a 2-player version of 2048 and having
featured on top of Hacker News,…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.indiehackers.com/podcast/002-chris-chen-of-instapainting&quot;&gt;Fueling Growth with SEO and Content Marketing with Chris Chen of Instapainting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Chris Oliver, GoRails, $15k/month</title>
   <link href="/2019/06/11/gorails"/>
   <updated>2019-06-11T00:00:00-04:00</updated>
   <id>/2019/06/11/gorails</id>
   <content type="html">&lt;h3 id=&quot;what-is-the-product&quot;&gt;What is the product?&lt;/h3&gt;

&lt;p&gt;Education site for Ruby on Rails developers.&lt;/p&gt;

&lt;h3 id=&quot;what-is-its-current-revenue&quot;&gt;What is its current revenue?&lt;/h3&gt;

&lt;p&gt;$15k a month.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-business-model&quot;&gt;What is the business model?&lt;/h3&gt;

&lt;p&gt;Subscription.&lt;/p&gt;

&lt;h3 id=&quot;how-did-the-founder-come-up-with-their-idea&quot;&gt;How did the founder come up with their idea?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Was working as a Ruby on Rails consultant for many businesses and startups.
Got tired of trading my time for money then decided to document Rails practices
and turned them into a product.&lt;/li&gt;
  &lt;li&gt;Published content for a year before launching paid courses.&lt;/li&gt;
  &lt;li&gt;Collected email addresses along the way. Also built a forum to ask/answer
questions publicly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-know-it-was-the-right-one&quot;&gt;How did they know it was the right one?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Generated thousand visitors the first month by documenting some free guides
on the blog, then decided to keep going because there was need.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-did-it-take-to-get-the-initial-product-out-the-door&quot;&gt;What did it take to get the initial product out the door?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Took 5 month to plan, record, edit screencasts for the first 2 courses.&lt;/li&gt;
  &lt;li&gt;Setup Stripe and Wistia himself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-get-their-first-paying-customers&quot;&gt;How did they get their first paying customers?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Launched and got 1 sale a week, 9 sales after 2 months.&lt;/li&gt;
  &lt;li&gt;Decided to use subscription model with weekly screencasts instead. Got 14
subscribers the second day.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.indiehackers.com/interview/rails-and-revenue-how-to-build-a-screencast-business-8999c7ac7f&quot;&gt;Rails and Revenue: How to Build a Screencast Business&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Jason Grishkoff, SubmitHub, $50k/month</title>
   <link href="/2019/06/10/submithub"/>
   <updated>2019-06-10T00:00:00-04:00</updated>
   <id>/2019/06/10/submithub</id>
   <content type="html">&lt;h3 id=&quot;what-is-the-product&quot;&gt;What is the product?&lt;/h3&gt;

&lt;p&gt;Allow musicians to connect with industry professionals.&lt;/p&gt;

&lt;h3 id=&quot;what-is-its-current-revenue&quot;&gt;What is its current revenue?&lt;/h3&gt;

&lt;p&gt;$50k a month.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-business-model&quot;&gt;What is the business model?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Free/premium credit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-the-founder-come-up-with-their-idea&quot;&gt;How did the founder come up with their idea?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Found Indie Shuffle blog that features good indie music. Realized that the
more content on the blog, the more traffic it attracted. Hence, pushed out
2-3 articles a day in the beginning then paid people to do so. Hit a point
where there were 10 articles a day.&lt;/li&gt;
  &lt;li&gt;Got attention from musicians themselves and started to connect with them to
feature their music.&lt;/li&gt;
  &lt;li&gt;Built SubmitHub for people to submit their requests instead of using emails.&lt;/li&gt;
  &lt;li&gt;Later expanded to a service to help musicians with industry professionals.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-know-it-was-the-right-one&quot;&gt;How did they know it was the right one?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;He knew it when musicians contacted him and wanted to submit their music too.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-did-it-take-to-get-the-initial-product-out-the-door&quot;&gt;What did it take to get the initial product out the door?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Had to learn coding by himself.&lt;/li&gt;
  &lt;li&gt;Had to talk to a lot of blogs and labels.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-get-their-first-paying-customers&quot;&gt;How did they get their first paying customers?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Many musicians turned into customers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.indiehackers.com/podcast/001-jason-grishkoff-of-submithub&quot;&gt;Building an Audience and Being Scrappy with Jason Grishkoff of SubmitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Eric Zhang, Scalable Press, $100m/year</title>
   <link href="/2019/06/09/scalable-press"/>
   <updated>2019-06-09T00:00:00-04:00</updated>
   <id>/2019/06/09/scalable-press</id>
   <content type="html">&lt;h3 id=&quot;what-is-the-product&quot;&gt;What is the product?&lt;/h3&gt;

&lt;p&gt;Efficient custom printing on demand - lower cost, better quality, better
turnaround time.&lt;/p&gt;

&lt;h3 id=&quot;what-is-its-current-revenue&quot;&gt;What is its current revenue?&lt;/h3&gt;

&lt;p&gt;$100 millions a year.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-business-model&quot;&gt;What is the business model?&lt;/h3&gt;

&lt;p&gt;Manufacture.&lt;/p&gt;

&lt;h3 id=&quot;how-did-the-founder-come-up-with-their-idea&quot;&gt;How did the founder come up with their idea?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Had a friend, Raymond, who sold T-shirt online. He was a high school
student until he dropped out because he had made $1 millions in revenue.&lt;/li&gt;
  &lt;li&gt;He did contracts with a Chinese factory at first, but wanted to improve
the product quality and used a US factory instead.&lt;/li&gt;
  &lt;li&gt;Eric later joined to build their own printing infrastructure to a even
more automated, cheaper, efficient process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-know-it-was-the-right-one&quot;&gt;How did they know it was the right one?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The T-shirt space was booming at that time, notably Teespring.&lt;/li&gt;
  &lt;li&gt;They were doing alright and wanting to do it better,
faster, and cheaper with their brand TeepChip.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-did-it-take-to-get-the-initial-product-out-the-door&quot;&gt;What did it take to get the initial product out the door?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Built the printing API first.&lt;/li&gt;
  &lt;li&gt;Used profits to reinvest into the business then built the software team.&lt;/li&gt;
  &lt;li&gt;Every step of the decision was made frugally because they did not have a lot
of capital.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-get-their-first-paying-customers&quot;&gt;How did they get their first paying customers?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Had people signed up early for the API, a lot from Hacker News. A lot of them
turned into customers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.indiehackers.com/podcast/101-eric-zhang-of-scalable-press&quot;&gt;How to Execute Well and Beat the Competition with Eric Zhang of Scalable Press&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>David Hauser, Grasshopper, $32m/year</title>
   <link href="/2019/06/08/grasshopper"/>
   <updated>2019-06-08T00:00:00-04:00</updated>
   <id>/2019/06/08/grasshopper</id>
   <content type="html">&lt;h3 id=&quot;what-is-the-product&quot;&gt;What is the product?&lt;/h3&gt;

&lt;p&gt;Virtual phone system.&lt;/p&gt;

&lt;h3 id=&quot;what-is-its-current-revenue&quot;&gt;What is its current revenue?&lt;/h3&gt;

&lt;p&gt;$32 millions a year.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-business-model&quot;&gt;What is the business model?&lt;/h3&gt;

&lt;p&gt;Subscription.&lt;/p&gt;

&lt;h3 id=&quot;how-did-the-founder-come-up-with-their-idea&quot;&gt;How did the founder come up with their idea?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Could not find a good solution for handling inbound calls professionally.&lt;/li&gt;
  &lt;li&gt;Started right away, developed the software started selling as quickly as possible.&lt;/li&gt;
  &lt;li&gt;Became profitable after 3 months.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-know-it-was-the-right-one&quot;&gt;How did they know it was the right one?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;They have learned a lot over the years starting their own businesses so they knew there was a need.&lt;/li&gt;
  &lt;li&gt;They were good at targeting the right group because of their experiences.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-did-it-take-to-get-the-initial-product-out-the-door&quot;&gt;What did it take to get the initial product out the door?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Had almost no money so aimed to get revenue as quickly as possible.&lt;/li&gt;
  &lt;li&gt;Used funding from other ventures and borrowing from friends and relatives.&lt;/li&gt;
  &lt;li&gt;Did a lot of of coding himself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-get-their-first-paying-customers&quot;&gt;How did they get their first paying customers?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;There was no social media, PPC or AdWords back then.&lt;/li&gt;
  &lt;li&gt;Bought keyword traffic from Omnitrure, used organic SEO, though he said these
tatics wouldn’t work today. Basically test as many channels as possible, and
get feedbacks quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.indiehackers.com/podcast/003-david-hauser-of-grasshopper&quot;&gt;Bootstrapping a SaaS Business to $30,000,000/year with David Hauser of Grasshopper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Nathan Barry, ConvertKit, $600k/month</title>
   <link href="/2019/06/07/convertkit"/>
   <updated>2019-06-07T00:00:00-04:00</updated>
   <id>/2019/06/07/convertkit</id>
   <content type="html">&lt;h3 id=&quot;what-is-the-product&quot;&gt;What is the product?&lt;/h3&gt;

&lt;p&gt;Email marketing tool for bloggers and content creators.&lt;/p&gt;

&lt;h3 id=&quot;what-is-its-current-revenue&quot;&gt;What is its current revenue?&lt;/h3&gt;

&lt;p&gt;5k to $600k a month in 2 years.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-business-model&quot;&gt;What is the business model?&lt;/h3&gt;

&lt;p&gt;Subscription.&lt;/p&gt;

&lt;h3 id=&quot;how-did-the-founder-come-up-with-the-idea&quot;&gt;How did the founder come up with the idea?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Nathan used to design and write books on iOS and web app.&lt;/li&gt;
  &lt;li&gt;Was expert on email marketing and had built and grew his personal audience
throughout the year.&lt;/li&gt;
  &lt;li&gt;One day he blogged about starting a SaaS company but had no idea to work on.
Just basically set a public goal to hold accountability.&lt;/li&gt;
  &lt;li&gt;Came up with an idea to interview businesses in depth, tried to see what
problems they were facing. But then decided to stay true to his problems -
building a service that was better than Mailchimp.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-know-it-was-the-right-one&quot;&gt;How did they know it was the right one?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Bunch of similar products were out there and had huge market shares.
Still went for it because it showed there were needs and still rooms for
improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-did-it-take-to-get-the-initial-product-out-the-door&quot;&gt;What did it take to get the initial product out the door?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Knew about 10 people who were good at email marketing. Asked them about their
frustrations, tried to understand their why, asked if they would pay for a solution.&lt;/li&gt;
  &lt;li&gt;Came back after a month with a MVP and asked to buy it - started to get real
feedbacks, though only made 1 purchase though they all said yes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-did-they-get-their-first-paying-customers&quot;&gt;How did they get their first paying customers?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Through direct contact as above.&lt;/li&gt;
  &lt;li&gt;Also launch pre-sale programs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.indiehackers.com/podcast/008-nathan-barry-of-convertkit&quot;&gt;Growing a $600,000/mo Business by Starting with Direct Sales with Nathan Barry of ConvertKit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Austin Kleon, Show Your Work!</title>
   <link href="/2019/06/06/show-your-work"/>
   <updated>2019-06-06T00:00:00-04:00</updated>
   <id>/2019/06/06/show-your-work</id>
   <content type="html">&lt;p&gt;A book for people who hate the very idea of self-promotion:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Be an amateur, not afraid to voice your opinion, be willing to share&lt;/li&gt;
  &lt;li&gt;Document your process, start a journal, record it, take photo,…&lt;/li&gt;
  &lt;li&gt;Share/publish something small everyday
    &lt;ul&gt;
      &lt;li&gt;Once you finish your work for the day, reflect on it, share some of its process&lt;/li&gt;
      &lt;li&gt;90% of everything is crap. True for your own work. Don’t be afraid to share. Some will find it interesting.&lt;/li&gt;
      &lt;li&gt;Build a good name that people can search through - way to build up your audience.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Actionable ideas:
    &lt;ul&gt;
      &lt;li&gt;Blog everyday about my work, even if it’s code or things that I find interesting/informative or learn throughout the day.&lt;/li&gt;
      &lt;li&gt;Keep things that inspire you, share other artists’ work.&lt;/li&gt;
      &lt;li&gt;Tell good stories. Remember Dan Harmon’s story circle, Kurt Vonnegut’s story graph. Gustav Freytag’s pyramid&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Teach what you know, even though you’ve just started.
    &lt;ul&gt;
      &lt;li&gt;Share your reading lists, references,…&lt;/li&gt;
      &lt;li&gt;Create tutorials.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Try to become a more interesting person.&lt;/li&gt;
  &lt;li&gt;Learn to take a punch/criticism.&lt;/li&gt;
  &lt;li&gt;Don’t be afraid to charge for your work&lt;/li&gt;
  &lt;li&gt;Don’t quit. Keep going. Keep producing one after another. But always remember to take rest
    &lt;ul&gt;
      &lt;li&gt;Short rest: exercise, take a walk, hike,&lt;/li&gt;
      &lt;li&gt;Long rest: years off, sabbatical,…anything to help you recharge and ready for a new beginning&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://austinkleon.com/show-your-work/&quot;&gt;https://austinkleon.com/show-your-work/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Early days of profitable internet businesses</title>
   <link href="/2019/06/06/earlyday"/>
   <updated>2019-06-06T00:00:00-04:00</updated>
   <id>/2019/06/06/earlyday</id>
   <content type="html">&lt;p&gt;I am interested in starting a company in the near future. I think the best way
to learn how to do so is to look at the early days of different profitable businesses,
not when they’re already successful so that one can see how the founders
actually got started.&lt;/p&gt;

&lt;p&gt;Some of resources that I find helpful to obtain these informations are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.indiehackers.com&quot;&gt;Indie Hackers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each company, here is a list of questions that I would like to start with:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What is the product?&lt;/li&gt;
  &lt;li&gt;What is its current revenue?&lt;/li&gt;
  &lt;li&gt;What is the business model?&lt;/li&gt;
  &lt;li&gt;How did the founder come up with the idea?&lt;/li&gt;
  &lt;li&gt;How did they know it was the right one?&lt;/li&gt;
  &lt;li&gt;What did it take to get the initial product out the door?&lt;/li&gt;
  &lt;li&gt;How did they get their first paying customers?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That said, from now on, I will try to write up at least 1-3 articles on this
topic everyweek. They should all have the tag &lt;a href=&quot;/tag/early-days&quot;&gt;#early-days&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2019/06/06/earlyday-summary&quot;&gt;Here is a sumary of my finding if anyone is interested →&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Early days of profitable internet businesses's summary</title>
   <link href="/2019/06/06/earlyday-summary"/>
   <updated>2019-06-06T00:00:00-04:00</updated>
   <id>/2019/06/06/earlyday-summary</id>
   <content type="html">&lt;ul&gt;
  &lt;li&gt;Dive deep into the industry and take advantage of your domain expertise to identify
the “right” problems to work on.&lt;/li&gt;
  &lt;li&gt;Constantly launch/bootstrap products - as a lot of them have founded multiple
businesses before and get their hand dirty on the business side of thing.&lt;/li&gt;
  &lt;li&gt;Actively seek for paying customers and TALK TO THEM, even before having a
concrete product. Focus on how to generate revenue immediately.&lt;/li&gt;
  &lt;li&gt;Blog to share your progress. Provide quality contents. Grow your audience.&lt;/li&gt;
  &lt;li&gt;Don’t get trapped in testing phase where all you do is collecting emails and
building lists… Hack a MVP and have actually customer use it then pay for
it. This is the ultimate test.&lt;/li&gt;
  &lt;li&gt;Utilize social media to promote your products and get feedbacks.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>
